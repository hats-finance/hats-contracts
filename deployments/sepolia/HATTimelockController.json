{
  "address": "0xB630FD108d20D8586509DB17D1821306e60642bE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDelay",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_proposers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_executors",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "CallExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "CallScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "Cancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "MinDelayChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CANCELLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXECUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROPOSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIMELOCK_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract HATGovernanceArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "internalType": "contract IHATClaimsManager",
          "name": "_claimsManager",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        }
      ],
      "name": "approveClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract HATGovernanceArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "internalType": "contract IHATClaimsManager",
          "name": "_claimsManager",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        }
      ],
      "name": "dismissClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "payloads",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "executeBatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "hashOperation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "payloads",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "hashOperationBatch",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "isOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "registered",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "isOperationDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "isOperationPending",
      "outputs": [
        {
          "internalType": "bool",
          "name": "pending",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "isOperationReady",
      "outputs": [
        {
          "internalType": "bool",
          "name": "ready",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "schedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "payloads",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "scheduleBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "contract IRewardController",
          "name": "_rewardController",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "setAllocPoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATClaimsManager",
          "name": "_claimsManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_committee",
          "type": "address"
        }
      ],
      "name": "setCommittee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_depositPause",
          "type": "bool"
        }
      ],
      "name": "setDepositPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATVaultsRegistry",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isEmergencyPaused",
          "type": "bool"
        }
      ],
      "name": "setEmergencyPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "setVaultDescription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_visible",
          "type": "bool"
        }
      ],
      "name": "setVaultVisibility",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATVaultsRegistry",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_beneficiaries",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMinimum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_routingContract",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_routingPayload",
          "type": "bytes"
        }
      ],
      "name": "swapAndSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDelay",
          "type": "uint256"
        }
      ],
      "name": "updateDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x013bc0bb11f4256dda40cdb4bc7834f0236c425acfc8d9b7b7a53176f09a15d4",
  "receipt": {
    "to": null,
    "from": "0x1885B7c7a3AE1F35BA71C0392C13153A95c4914f",
    "contractAddress": "0xB630FD108d20D8586509DB17D1821306e60642bE",
    "transactionIndex": 210,
    "gasUsed": "2301616",
    "logsBloom": "0x000000040000000008000000000080000a0000000000000000000000000000002008000000000000000000000001000000000000010000004200000010200000000000000040004000000010000000000000000000000000000000000003000000000000020000400000000000000800000000000000000000020000000000000000000000000000000002000000000000000000000000080040000010000000000000000020000000000000000000000000000000000000001000400000000000100000000000004004000000000000400200000000000900000100200020000000000000001000000000000100000000000000000000000000000000000010",
    "blockHash": "0x5a515351674e515686e2fbea3a453ea36fc51d5ca511619b7a692e751756b99a",
    "transactionHash": "0x013bc0bb11f4256dda40cdb4bc7834f0236c425acfc8d9b7b7a53176f09a15d4",
    "logs": [
      {
        "transactionIndex": 210,
        "blockNumber": 5558658,
        "transactionHash": "0x013bc0bb11f4256dda40cdb4bc7834f0236c425acfc8d9b7b7a53176f09a15d4",
        "address": "0xB630FD108d20D8586509DB17D1821306e60642bE",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5"
        ],
        "data": "0x",
        "logIndex": 356,
        "blockHash": "0x5a515351674e515686e2fbea3a453ea36fc51d5ca511619b7a692e751756b99a"
      },
      {
        "transactionIndex": 210,
        "blockNumber": 5558658,
        "transactionHash": "0x013bc0bb11f4256dda40cdb4bc7834f0236c425acfc8d9b7b7a53176f09a15d4",
        "address": "0xB630FD108d20D8586509DB17D1821306e60642bE",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5"
        ],
        "data": "0x",
        "logIndex": 357,
        "blockHash": "0x5a515351674e515686e2fbea3a453ea36fc51d5ca511619b7a692e751756b99a"
      },
      {
        "transactionIndex": 210,
        "blockNumber": 5558658,
        "transactionHash": "0x013bc0bb11f4256dda40cdb4bc7834f0236c425acfc8d9b7b7a53176f09a15d4",
        "address": "0xB630FD108d20D8586509DB17D1821306e60642bE",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5"
        ],
        "data": "0x",
        "logIndex": 358,
        "blockHash": "0x5a515351674e515686e2fbea3a453ea36fc51d5ca511619b7a692e751756b99a"
      },
      {
        "transactionIndex": 210,
        "blockNumber": 5558658,
        "transactionHash": "0x013bc0bb11f4256dda40cdb4bc7834f0236c425acfc8d9b7b7a53176f09a15d4",
        "address": "0xB630FD108d20D8586509DB17D1821306e60642bE",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xfd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f783",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5"
        ],
        "data": "0x",
        "logIndex": 359,
        "blockHash": "0x5a515351674e515686e2fbea3a453ea36fc51d5ca511619b7a692e751756b99a"
      },
      {
        "transactionIndex": 210,
        "blockNumber": 5558658,
        "transactionHash": "0x013bc0bb11f4256dda40cdb4bc7834f0236c425acfc8d9b7b7a53176f09a15d4",
        "address": "0xB630FD108d20D8586509DB17D1821306e60642bE",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5",
          "0x000000000000000000000000b630fd108d20d8586509db17d1821306e60642be",
          "0x0000000000000000000000001885b7c7a3ae1f35ba71c0392c13153a95c4914f"
        ],
        "data": "0x",
        "logIndex": 360,
        "blockHash": "0x5a515351674e515686e2fbea3a453ea36fc51d5ca511619b7a692e751756b99a"
      },
      {
        "transactionIndex": 210,
        "blockNumber": 5558658,
        "transactionHash": "0x013bc0bb11f4256dda40cdb4bc7834f0236c425acfc8d9b7b7a53176f09a15d4",
        "address": "0xB630FD108d20D8586509DB17D1821306e60642bE",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1",
          "0x000000000000000000000000fa6579f3bb1793efab541de06763b872e11bfcbe",
          "0x0000000000000000000000001885b7c7a3ae1f35ba71c0392c13153a95c4914f"
        ],
        "data": "0x",
        "logIndex": 361,
        "blockHash": "0x5a515351674e515686e2fbea3a453ea36fc51d5ca511619b7a692e751756b99a"
      },
      {
        "transactionIndex": 210,
        "blockNumber": 5558658,
        "transactionHash": "0x013bc0bb11f4256dda40cdb4bc7834f0236c425acfc8d9b7b7a53176f09a15d4",
        "address": "0xB630FD108d20D8586509DB17D1821306e60642bE",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xfd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f783",
          "0x000000000000000000000000fa6579f3bb1793efab541de06763b872e11bfcbe",
          "0x0000000000000000000000001885b7c7a3ae1f35ba71c0392c13153a95c4914f"
        ],
        "data": "0x",
        "logIndex": 362,
        "blockHash": "0x5a515351674e515686e2fbea3a453ea36fc51d5ca511619b7a692e751756b99a"
      },
      {
        "transactionIndex": 210,
        "blockNumber": 5558658,
        "transactionHash": "0x013bc0bb11f4256dda40cdb4bc7834f0236c425acfc8d9b7b7a53176f09a15d4",
        "address": "0xB630FD108d20D8586509DB17D1821306e60642bE",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63",
          "0x0000000000000000000000000b7602011ec2b862bc157ff08d27b1018aeb18d5",
          "0x0000000000000000000000001885b7c7a3ae1f35ba71c0392c13153a95c4914f"
        ],
        "data": "0x",
        "logIndex": 363,
        "blockHash": "0x5a515351674e515686e2fbea3a453ea36fc51d5ca511619b7a692e751756b99a"
      },
      {
        "transactionIndex": 210,
        "blockNumber": 5558658,
        "transactionHash": "0x013bc0bb11f4256dda40cdb4bc7834f0236c425acfc8d9b7b7a53176f09a15d4",
        "address": "0xB630FD108d20D8586509DB17D1821306e60642bE",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63",
          "0x00000000000000000000000056e889664f5961452e5f4183aa13af568198ead2",
          "0x0000000000000000000000001885b7c7a3ae1f35ba71c0392c13153a95c4914f"
        ],
        "data": "0x",
        "logIndex": 364,
        "blockHash": "0x5a515351674e515686e2fbea3a453ea36fc51d5ca511619b7a692e751756b99a"
      },
      {
        "transactionIndex": 210,
        "blockNumber": 5558658,
        "transactionHash": "0x013bc0bb11f4256dda40cdb4bc7834f0236c425acfc8d9b7b7a53176f09a15d4",
        "address": "0xB630FD108d20D8586509DB17D1821306e60642bE",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63",
          "0x0000000000000000000000001885b7c7a3ae1f35ba71c0392c13153a95c4914f",
          "0x0000000000000000000000001885b7c7a3ae1f35ba71c0392c13153a95c4914f"
        ],
        "data": "0x",
        "logIndex": 365,
        "blockHash": "0x5a515351674e515686e2fbea3a453ea36fc51d5ca511619b7a692e751756b99a"
      },
      {
        "transactionIndex": 210,
        "blockNumber": 5558658,
        "transactionHash": "0x013bc0bb11f4256dda40cdb4bc7834f0236c425acfc8d9b7b7a53176f09a15d4",
        "address": "0xB630FD108d20D8586509DB17D1821306e60642bE",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63",
          "0x000000000000000000000000fa6579f3bb1793efab541de06763b872e11bfcbe",
          "0x0000000000000000000000001885b7c7a3ae1f35ba71c0392c13153a95c4914f"
        ],
        "data": "0x",
        "logIndex": 366,
        "blockHash": "0x5a515351674e515686e2fbea3a453ea36fc51d5ca511619b7a692e751756b99a"
      },
      {
        "transactionIndex": 210,
        "blockNumber": 5558658,
        "transactionHash": "0x013bc0bb11f4256dda40cdb4bc7834f0236c425acfc8d9b7b7a53176f09a15d4",
        "address": "0xB630FD108d20D8586509DB17D1821306e60642bE",
        "topics": [
          "0x11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c",
        "logIndex": 367,
        "blockHash": "0x5a515351674e515686e2fbea3a453ea36fc51d5ca511619b7a692e751756b99a"
      }
    ],
    "blockNumber": 5558658,
    "cumulativeGasUsed": "27590310",
    "status": 1,
    "byzantium": true
  },
  "args": [
    300,
    [
      "0xFA6579F3Bb1793eFaB541de06763b872E11bfCBe"
    ],
    [
      "0x0B7602011EC2B862Bc157fF08d27b1018aEb18d5",
      "0x56E889664F5961452E5f4183AA13AF568198eaD2",
      "0x1885B7c7a3AE1F35BA71C0392C13153A95c4914f",
      "0xFA6579F3Bb1793eFaB541de06763b872E11bfCBe"
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "e2dd19fbd28890679930fe6b1d01ee82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDelay\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_proposers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_executors\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CallExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"CallScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Cancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"MinDelayChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CANCELLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMELOCK_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract HATGovernanceArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_claimsManager\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"approveClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract HATGovernanceArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_claimsManager\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"dismissClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"hashOperation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"hashOperationBatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ready\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"scheduleBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract IRewardController\",\"name\":\"_rewardController\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"setAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_claimsManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_committee\",\"type\":\"address\"}],\"name\":\"setCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_depositPause\",\"type\":\"bool\"}],\"name\":\"setDepositPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATVaultsRegistry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isEmergencyPaused\",\"type\":\"bool\"}],\"name\":\"setEmergencyPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"setVaultDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_visible\",\"type\":\"bool\"}],\"name\":\"setVaultVisibility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATVaultsRegistry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_routingContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_routingPayload\",\"type\":\"bytes\"}],\"name\":\"swapAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"updateDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancel(bytes32)\":{\"details\":\"Cancel an operation. Requirements: - the caller must have the 'canceller' role.\"},\"execute(address,uint256,bytes,bytes32,bytes32)\":{\"details\":\"Execute an (ready) operation containing a single transaction. Emits a {CallExecuted} event. Requirements: - the caller must have the 'executor' role.\"},\"executeBatch(address[],uint256[],bytes[],bytes32,bytes32)\":{\"details\":\"Execute an (ready) operation containing a batch of transactions. Emits one {CallExecuted} event per transaction in the batch. Requirements: - the caller must have the 'executor' role.\"},\"getMinDelay()\":{\"details\":\"Returns the minimum delay for an operation to become valid. This value can be changed by executing an operation that calls `updateDelay`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTimestamp(bytes32)\":{\"details\":\"Returns the timestamp at with an operation becomes ready (0 for unset operations, 1 for done operations).\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"hashOperation(address,uint256,bytes,bytes32,bytes32)\":{\"details\":\"Returns the identifier of an operation containing a single transaction.\"},\"hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)\":{\"details\":\"Returns the identifier of an operation containing a batch of transactions.\"},\"isOperation(bytes32)\":{\"details\":\"Returns whether an id correspond to a registered operation. This includes both Pending, Ready and Done operations.\"},\"isOperationDone(bytes32)\":{\"details\":\"Returns whether an operation is done or not.\"},\"isOperationPending(bytes32)\":{\"details\":\"Returns whether an operation is pending or not.\"},\"isOperationReady(bytes32)\":{\"details\":\"Returns whether an operation is ready or not.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155Receiver-onERC1155BatchReceived}.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155Receiver-onERC1155Received}.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"schedule(address,uint256,bytes,bytes32,bytes32,uint256)\":{\"details\":\"Schedule an operation containing a single transaction. Emits a {CallScheduled} event. Requirements: - the caller must have the 'proposer' role.\"},\"scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)\":{\"details\":\"Schedule an operation containing a batch of transactions. Emits one {CallScheduled} event per transaction in the batch. Requirements: - the caller must have the 'proposer' role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateDelay(uint256)\":{\"details\":\"Changes the minimum timelock duration for future operations. Emits a {MinDelayChange} event. Requirements: - the caller must be the timelock itself. This can only be achieved by scheduling and later executing an operation where the timelock is the target and the data is the ABI-encoded call to this function.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HATTimelockController.sol\":\"HATTimelockController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626Upgradeable is IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x8177581667dcba94ed9eaf94aa2f4fbf5f9b908a40c98bf0de4578a92a5a47fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/TimelockController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (governance/TimelockController.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access/AccessControl.sol\\\";\\nimport \\\"../token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"../token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev Contract module which acts as a timelocked controller. When set as the\\n * owner of an `Ownable` smart contract, it enforces a timelock on all\\n * `onlyOwner` maintenance operations. This gives time for users of the\\n * controlled contract to exit before a potentially dangerous maintenance\\n * operation is applied.\\n *\\n * By default, this contract is self administered, meaning administration tasks\\n * have to go through the timelock process. The proposer (resp executor) role\\n * is in charge of proposing (resp executing) operations. A common use case is\\n * to position this {TimelockController} as the owner of a smart contract, with\\n * a multisig or a DAO as the sole proposer.\\n *\\n * _Available since v3.3._\\n */\\ncontract TimelockController is AccessControl, IERC721Receiver, IERC1155Receiver {\\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\\\"TIMELOCK_ADMIN_ROLE\\\");\\n    bytes32 public constant PROPOSER_ROLE = keccak256(\\\"PROPOSER_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n    bytes32 public constant CANCELLER_ROLE = keccak256(\\\"CANCELLER_ROLE\\\");\\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n    mapping(bytes32 => uint256) private _timestamps;\\n    uint256 private _minDelay;\\n\\n    /**\\n     * @dev Emitted when a call is scheduled as part of operation `id`.\\n     */\\n    event CallScheduled(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data,\\n        bytes32 predecessor,\\n        uint256 delay\\n    );\\n\\n    /**\\n     * @dev Emitted when a call is performed as part of operation `id`.\\n     */\\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\\n\\n    /**\\n     * @dev Emitted when operation `id` is cancelled.\\n     */\\n    event Cancelled(bytes32 indexed id);\\n\\n    /**\\n     * @dev Emitted when the minimum delay for future operations is modified.\\n     */\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n\\n    /**\\n     * @dev Initializes the contract with the following parameters:\\n     *\\n     * - `minDelay`: initial minimum delay for operations\\n     * - `proposers`: accounts to be granted proposer and canceller roles\\n     * - `executors`: accounts to be granted executor role\\n     * - `admin`: optional account to be granted admin role; disable with zero address\\n     *\\n     * IMPORTANT: The optional admin can aid with initial configuration of roles after deployment\\n     * without being subject to delay, but this role should be subsequently renounced in favor of\\n     * administration through timelocked proposals. Previous versions of this contract would assign\\n     * this admin to the deployer automatically and should be renounced as well.\\n     */\\n    constructor(\\n        uint256 minDelay,\\n        address[] memory proposers,\\n        address[] memory executors,\\n        address admin\\n    ) {\\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(CANCELLER_ROLE, TIMELOCK_ADMIN_ROLE);\\n\\n        // self administration\\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\\n\\n        // optional admin\\n        if (admin != address(0)) {\\n            _setupRole(TIMELOCK_ADMIN_ROLE, admin);\\n        }\\n\\n        // register proposers and cancellers\\n        for (uint256 i = 0; i < proposers.length; ++i) {\\n            _setupRole(PROPOSER_ROLE, proposers[i]);\\n            _setupRole(CANCELLER_ROLE, proposers[i]);\\n        }\\n\\n        // register executors\\n        for (uint256 i = 0; i < executors.length; ++i) {\\n            _setupRole(EXECUTOR_ROLE, executors[i]);\\n        }\\n\\n        _minDelay = minDelay;\\n        emit MinDelayChange(0, minDelay);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by a certain role. In\\n     * addition to checking the sender's role, `address(0)` 's role is also\\n     * considered. Granting a role to `address(0)` is equivalent to enabling\\n     * this role for everyone.\\n     */\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        if (!hasRole(role, address(0))) {\\n            _checkRole(role, _msgSender());\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, AccessControl) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns whether an id correspond to a registered operation. This\\n     * includes both Pending, Ready and Done operations.\\n     */\\n    function isOperation(bytes32 id) public view virtual returns (bool registered) {\\n        return getTimestamp(id) > 0;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is pending or not.\\n     */\\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\\n        return getTimestamp(id) > _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is ready or not.\\n     */\\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\\n        uint256 timestamp = getTimestamp(id);\\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is done or not.\\n     */\\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\\n        return getTimestamp(id) == _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\\n     * unset operations, 1 for done operations).\\n     */\\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\\n        return _timestamps[id];\\n    }\\n\\n    /**\\n     * @dev Returns the minimum delay for an operation to become valid.\\n     *\\n     * This value can be changed by executing an operation that calls `updateDelay`.\\n     */\\n    function getMinDelay() public view virtual returns (uint256 duration) {\\n        return _minDelay;\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a single\\n     * transaction.\\n     */\\n    function hashOperation(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a batch of\\n     * transactions.\\n     */\\n    function hashOperationBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a single transaction.\\n     *\\n     * Emits a {CallScheduled} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function schedule(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _schedule(id, delay);\\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a batch of transactions.\\n     *\\n     * Emits one {CallScheduled} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function scheduleBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n        _schedule(id, delay);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation that is to becomes valid after a given delay.\\n     */\\n    function _schedule(bytes32 id, uint256 delay) private {\\n        require(!isOperation(id), \\\"TimelockController: operation already scheduled\\\");\\n        require(delay >= getMinDelay(), \\\"TimelockController: insufficient delay\\\");\\n        _timestamps[id] = block.timestamp + delay;\\n    }\\n\\n    /**\\n     * @dev Cancel an operation.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'canceller' role.\\n     */\\n    function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {\\n        require(isOperationPending(id), \\\"TimelockController: operation cannot be cancelled\\\");\\n        delete _timestamps[id];\\n\\n        emit Cancelled(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\\n    // thus any modifications to the operation during reentrancy should be caught.\\n    // slither-disable-next-line reentrancy-eth\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata payload,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        bytes32 id = hashOperation(target, value, payload, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        _execute(target, value, payload);\\n        emit CallExecuted(id, 0, target, value, payload);\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\\n    // thus any modifications to the operation during reentrancy should be caught.\\n    // slither-disable-next-line reentrancy-eth\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            address target = targets[i];\\n            uint256 value = values[i];\\n            bytes calldata payload = payloads[i];\\n            _execute(target, value, payload);\\n            emit CallExecuted(id, i, target, value, payload);\\n        }\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an operation's call.\\n     */\\n    function _execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal virtual {\\n        (bool success, ) = target.call{value: value}(data);\\n        require(success, \\\"TimelockController: underlying transaction reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Checks before execution of an operation's calls.\\n     */\\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \\\"TimelockController: missing dependency\\\");\\n    }\\n\\n    /**\\n     * @dev Checks after execution of an operation's calls.\\n     */\\n    function _afterCall(bytes32 id) private {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        _timestamps[id] = _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Changes the minimum timelock duration for future operations.\\n     *\\n     * Emits a {MinDelayChange} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\\n     */\\n    function updateDelay(uint256 newDelay) external virtual {\\n        require(msg.sender == address(this), \\\"TimelockController: caller must be timelock\\\");\\n        emit MinDelayChange(_minDelay, newDelay);\\n        _minDelay = newDelay;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155Received}.\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x455518e20a057f0e9af048cbc3ffef44fa205ac6d57d33fd2a759d687c507373\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/HATGovernanceArbitrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IHATClaimsManager.sol\\\";\\n\\ncontract HATGovernanceArbitrator is Ownable {\\n\\n    function approveClaim(IHATClaimsManager _vault, bytes32 _claimId) external onlyOwner {\\n        _vault.challengeClaim(_claimId);\\n        _vault.approveClaim(_claimId, 0, address(0));\\n    }\\n\\n    function dismissClaim(IHATClaimsManager _vault, bytes32 _claimId) external onlyOwner {\\n        _vault.challengeClaim(_claimId);\\n        _vault.dismissClaim(_claimId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x638f0ee0f1b24da39a44f54e46cdfe43f616c07ef26c325cdf5b82997f6b1682\",\"license\":\"MIT\"},\"contracts/HATTimelockController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/governance/TimelockController.sol\\\";\\nimport \\\"./HATGovernanceArbitrator.sol\\\";\\n\\ncontract HATTimelockController is TimelockController {\\n\\n    constructor(\\n        uint256 _minDelay,\\n        address[] memory _proposers,\\n        address[] memory _executors\\n    // solhint-disable-next-line no-empty-blocks\\n    ) TimelockController(_minDelay, _proposers, _executors, address(0)) {}\\n    \\n    // The following functions are not subject to the timelock\\n\\n    function approveClaim(HATGovernanceArbitrator _arbitrator, IHATClaimsManager _claimsManager, bytes32 _claimId) external onlyRole(PROPOSER_ROLE) {\\n        _arbitrator.approveClaim(_claimsManager, _claimId);\\n    }\\n\\n    function dismissClaim(HATGovernanceArbitrator _arbitrator, IHATClaimsManager _claimsManager, bytes32 _claimId) external onlyRole(PROPOSER_ROLE) {\\n        _arbitrator.dismissClaim(_claimsManager, _claimId);\\n    }\\n\\n    function setCommittee(IHATClaimsManager _claimsManager, address _committee) external onlyRole(PROPOSER_ROLE) {\\n        _claimsManager.setCommittee(_committee);\\n    }\\n\\n    function setVaultDescription(IHATVault _vault, string memory _descriptionHash) external onlyRole(PROPOSER_ROLE) {\\n        _vault.setVaultDescription(_descriptionHash);\\n    }\\n\\n    function setDepositPause(IHATVault _vault, bool _depositPause) external onlyRole(PROPOSER_ROLE) {\\n        _vault.setDepositPause(_depositPause);\\n    }\\n\\n    function setVaultVisibility(IHATVault _vault, bool _visible) external onlyRole(PROPOSER_ROLE) {\\n        _vault.registry().setVaultVisibility(address(_vault), _visible);\\n    }\\n\\n    function setAllocPoint(IHATVault _vault, IRewardController _rewardController, uint256 _allocPoint)\\n    external onlyRole(PROPOSER_ROLE) {\\n        _rewardController.setAllocPoint(address(_vault), _allocPoint);\\n    }\\n\\n    function swapAndSend(\\n        IHATVaultsRegistry _registry,\\n        address _asset,\\n        address[] calldata _beneficiaries,\\n        uint256 _amountOutMinimum,\\n        address _routingContract,\\n        bytes calldata _routingPayload\\n    )\\n    external\\n    onlyRole(PROPOSER_ROLE) {\\n        _registry.swapAndSend(\\n            _asset,\\n            _beneficiaries,\\n            _amountOutMinimum,\\n            _routingContract,\\n            _routingPayload\\n        );\\n    }\\n\\n    function setEmergencyPaused(IHATVaultsRegistry _registry, bool _isEmergencyPaused) external onlyRole(PROPOSER_ROLE) {\\n        _registry.setEmergencyPaused(_isEmergencyPaused);\\n    }\\n}\\n\",\"keccak256\":\"0x603b76ed968971b73c284092c696560a613e6e8d54c7a15c64cd94be098cb521\",\"license\":\"MIT\"},\"contracts/interfaces/IHATClaimsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IRewardController.sol\\\";\\nimport \\\"./IHATVault.sol\\\";\\nimport \\\"./IHATVaultsRegistry.sol\\\";\\n\\n/** @title Interface for Hats.finance Vaults\\n * @author Hats.finance\\n * @notice A HATVault holds the funds for a specific project's bug bounties.\\n * Anyone can permissionlessly deposit into the HATVault using\\n * the vault\\u2019s native token. When a bug is submitted and approved, the bounty \\n * is paid out using the funds in the vault. Bounties are paid out as a\\n * percentage of the vault. The percentage is set according to the severity of\\n * the bug. Vaults have regular safety periods (typically for an hour twice a\\n * day) which are time for the committee to make decisions.\\n *\\n * In addition to the roles defined in the IHATVaultsRegistry, every HATVault \\n * has the roles:\\n * Committee - The only address which can submit a claim for a bounty payout\\n * and set the maximum bounty.\\n * User - Anyone can deposit the vault's native token into the vault and \\n * recieve shares for it. Shares represent the user's relative part in the\\n * vault, and when a bounty is paid out, users lose part of their deposits\\n * (based on percentage paid), but keep their share of the vault.\\n * Users also receive rewards for their deposits, which can be claimed at any\\n *  time.\\n * To withdraw previously deposited tokens, a user must first send a withdraw\\n * request, and the withdrawal will be made available after a pending period.\\n * Withdrawals are not permitted during safety periods or while there is an \\n * active claim for a bounty payout.\\n *\\n * Bounties are payed out distributed between a few channels, and that \\n * distribution is set upon creation (the hacker gets part in direct transfer,\\n * part in vested reward and part in vested HAT token, part gets rewarded to\\n * the committee, part gets swapped to HAT token and burned and/or sent to Hats\\n * governance).\\n *\\n * NOTE: Vaults should not use tokens which do not guarantee that the amount\\n * specified is the amount transferred\\n *\\n * This project is open-source and can be found at:\\n * https://github.com/hats-finance/hats-contracts\\n */\\ninterface IHATClaimsManager {\\n\\n    // How to divide the bounty - after deducting the part that is swapped to\\n    // HAT tokens (and then sent to governance and vested to the hacker)\\n    // values are in percentages and should add up to 100% (defined as 10000)\\n    struct BountySplit {\\n        // the percentage of reward sent to the hacker via vesting contract\\n        uint16 hackerVested;\\n        // the percentage of tokens that are sent directly to the hacker\\n        uint16 hacker;\\n        // the percentage sent to the committee\\n        uint16 committee;\\n    }\\n\\n    // How to divide a bounty for a claim that has been approved\\n    // used to keep track of payouts, amounts are in vault's native token\\n    struct ClaimBounty {\\n        uint256 hacker;\\n        uint256 hackerVested;\\n        uint256 committee;\\n        uint256 hackerHatVested;\\n        uint256 governanceHat;\\n    }\\n\\n    struct Claim {\\n        bytes32 claimId;\\n        address beneficiary;\\n        uint16 bountyPercentage;\\n        // the address of the committee at the time of the submission, so that this committee will\\n        // be paid their share of the bounty in case the committee changes before claim approval\\n        address committee;\\n        uint32 createdAt;\\n        uint32 challengedAt;\\n        uint256 bountyGovernanceHAT;\\n        uint256 bountyHackerHATVested;\\n        address arbitrator;\\n        uint32 challengePeriod;\\n        uint32 challengeTimeOutPeriod;\\n        bool arbitratorCanChangeBounty;\\n        bool arbitratorCanChangeBeneficiary;\\n    }\\n\\n    struct PendingMaxBounty {\\n        uint16 maxBounty;\\n        uint32 timestamp;\\n    }\\n\\n    /**\\n    * @notice Initialization parameters for the vault\\n    * @param name The vault's name (concatenated as \\\"Hats Vault \\\" + name)\\n    * @param symbol The vault's symbol (concatenated as \\\"HAT\\\" + symbol)\\n    * @param rewardController The reward controller for the vault\\n    * @param vestingDuration Duration of the vesting period of the vault's\\n    * token vested part of the bounty\\n    * @param vestingPeriods The number of vesting periods of the vault's token\\n    * vested part of the bounty\\n    * @param maxBounty The maximum percentage of the vault that can be paid\\n    * out as a bounty\\n    * @param bountySplit The way to split the bounty between the hacker, \\n    * hacker vested, and committee.\\n    *   Each entry is a number between 0 and `HUNDRED_PERCENT`.\\n    *   Total splits should be equal to `HUNDRED_PERCENT`.\\n    * @param bountyGovernanceHAT The HAT bounty for governance\\n    * @param bountyHackerHATVested The HAT bounty vested for the hacker\\n    * @param asset The vault's native token\\n    * @param owner The address of the vault's owner \\n    * @param committee The address of the vault's committee \\n    * @param arbitrator The address of the vault's arbitrator\\n    * @param arbitratorCanChangeBounty Can the arbitrator change a claim's bounty\\n    * @param arbitratorCanChangeBeneficiary Can the arbitrator change a claim's beneficiary\\n    * @param arbitratorCanSubmitClaims Can the arbitrator submit a claim\\n    * @param isTokenLockRevocable can the committee revoke the token lock\\n    * @dev Needed to avoid a \\\"stack too deep\\\" error\\n    */\\n    struct ClaimsManagerInitParams {\\n        uint32 vestingDuration;\\n        uint32 vestingPeriods;\\n        uint16 maxBounty;\\n        BountySplit bountySplit;\\n        uint16 bountyGovernanceHAT;\\n        uint16 bountyHackerHATVested;\\n        address owner;\\n        address committee;\\n        address arbitrator;\\n        bool arbitratorCanChangeBounty;\\n        bool arbitratorCanChangeBeneficiary;\\n        bool arbitratorCanSubmitClaims;\\n        bool isTokenLockRevocable;\\n    }\\n\\n    // Only committee\\n    error OnlyCommittee();\\n    // Active claim exists\\n    error ActiveClaimExists();\\n    // Safety period\\n    error SafetyPeriod();\\n    // Not safety period\\n    error NotSafetyPeriod();\\n    // Bounty percentage is higher than the max bounty\\n    error BountyPercentageHigherThanMaxBounty();\\n    // Only callable by arbitrator or after challenge timeout period\\n    error OnlyCallableByArbitratorOrAfterChallengeTimeOutPeriod();\\n    // No active claim exists\\n    error NoActiveClaimExists();\\n    // Claim Id specified is not the active claim Id\\n    error ClaimIdIsNotActive();\\n    // Not enough fee paid\\n    error NotEnoughFeePaid();\\n    // No pending max bounty\\n    error NoPendingMaxBounty();\\n    // Delay period for setting max bounty had not passed\\n    error DelayPeriodForSettingMaxBountyHadNotPassed();\\n    // Committee already checked in\\n    error CommitteeAlreadyCheckedIn();\\n    // Total bounty split % should be `HUNDRED_PERCENT`\\n    error TotalSplitPercentageShouldBeHundredPercent();\\n    // Vesting duration is too long\\n    error VestingDurationTooLong();\\n    // Vesting periods cannot be zero\\n    error VestingPeriodsCannotBeZero();\\n    // Vesting duration smaller than periods\\n    error VestingDurationSmallerThanPeriods();\\n    // Max bounty cannot be more than `MAX_BOUNTY_LIMIT` (unless if it is 100%)\\n    error MaxBountyCannotBeMoreThanMaxBountyLimit();\\n    // Committee bounty split cannot be more than `MAX_COMMITTEE_BOUNTY`\\n    error CommitteeBountyCannotBeMoreThanMax();\\n    // Only registry owner\\n    error OnlyRegistryOwner();\\n    // Set shares arrays must have same length\\n    error SetSharesArraysMustHaveSameLength();\\n    // Not enough user balance\\n    error NotEnoughUserBalance();\\n    // Only arbitrator or registry owner\\n    error OnlyArbitratorOrRegistryOwner();\\n    // Unchallenged claim can only be approved if challenge period is over\\n    error UnchallengedClaimCanOnlyBeApprovedAfterChallengePeriod();\\n    // Challenged claim can only be approved by arbitrator before the challenge timeout period\\n    error ChallengedClaimCanOnlyBeApprovedByArbitratorUntilChallengeTimeoutPeriod();\\n    // Claim has expired\\n    error ClaimExpired();\\n    // Challenge period is over\\n    error ChallengePeriodEnded();\\n    // Claim can be challenged only once\\n    error ClaimAlreadyChallenged();\\n    // Only callable if challenged\\n    error OnlyCallableIfChallenged();\\n    // System is in an emergency pause\\n    error SystemInEmergencyPause();\\n    // Cannot set a reward controller that was already used in the past\\n    error CannotSetToPerviousRewardController();\\n    // Payout must either be 100%, or up to the MAX_BOUNTY_LIMIT\\n    error PayoutMustBeUpToMaxBountyLimitOrHundredPercent();\\n\\n\\n    event SubmitClaim(\\n        bytes32 indexed _claimId,\\n        address _committee,\\n        address indexed _submitter,\\n        address indexed _beneficiary,\\n        uint256 _bountyPercentage,\\n        string _descriptionHash\\n    );\\n    event ChallengeClaim(bytes32 indexed _claimId);\\n    event ApproveClaim(\\n        bytes32 indexed _claimId,\\n        address _committee,\\n        address indexed _approver,\\n        address indexed _beneficiary,\\n        uint256 _bountyPercentage,\\n        address _tokenLock,\\n        ClaimBounty _claimBounty\\n    );\\n    event DismissClaim(bytes32 indexed _claimId);\\n    event SetCommittee(address indexed _committee);\\n    event SetVestingParams(\\n        uint256 _duration,\\n        uint256 _periods\\n    );\\n    event SetBountySplit(BountySplit _bountySplit);\\n    event CommitteeCheckedIn();\\n    event SetPendingMaxBounty(uint256 _maxBounty);\\n    event SetMaxBounty(uint256 _maxBounty);\\n    event SetHATBountySplit(uint256 _bountyGovernanceHAT, uint256 _bountyHackerHATVested);\\n    event SetArbitrator(address indexed _arbitrator);\\n    event SetChallengePeriod(uint256 _challengePeriod);\\n    event SetChallengeTimeOutPeriod(uint256 _challengeTimeOutPeriod);\\n    event SetArbitratorOptions(bool _arbitratorCanChangeBounty, bool _arbitratorCanChangeBeneficiary, bool _arbitratorCanSubmitClaims);\\n\\n    /**\\n    * @notice Initialize a claims manager instance\\n    * @param _vault The vault instance\\n    * @param _params The claim manager's initialization parameters\\n    * @dev See {IHATClaimsManager-ClaimsManagerInitParams} for more details\\n    * @dev Called when the vault is created in {IHATVaultsRegistry-createVault}\\n    */\\n    function initialize(IHATVault _vault, ClaimsManagerInitParams calldata _params) external;\\n\\n    /* -------------------------------------------------------------------------------- */\\n\\n    /* ---------------------------------- Claim --------------------------------------- */\\n\\n    /**\\n     * @notice Called by the committee to submit a claim for a bounty payout.\\n     * This function should be called only on a safety period, when withdrawals\\n     * are disabled, and while there's no other active claim. Cannot be called\\n     * when the registry is in an emergency pause.\\n     * Upon a call to this function by the committee the vault's withdrawals\\n     * will be disabled until the claim is approved or dismissed. Also from the\\n     * time of this call the arbitrator will have a period of \\n     * {IHATVaultsRegistry.challengePeriod} to challenge the claim.\\n     * @param _beneficiary The submitted claim's beneficiary\\n     * @param _bountyPercentage The submitted claim's bug requested reward percentage\\n     */\\n    function submitClaim(\\n        address _beneficiary, \\n        uint16 _bountyPercentage, \\n        string calldata _descriptionHash\\n    )\\n        external\\n        returns (bytes32 claimId);\\n\\n   \\n    /**\\n    * @notice Called by the arbitrator or governance to challenge a claim for a bounty\\n    * payout that had been previously submitted by the committee.\\n    * Can only be called during the challenge period after submission of the\\n    * claim.\\n    * @param _claimId The claim ID\\n    */\\n    function challengeClaim(bytes32 _claimId) external;\\n\\n    /**\\n    * @notice Approve a claim for a bounty submitted by a committee, and\\n    * pay out bounty to hacker and committee. Also transfer to the \\n    * IHATVaultsRegistry the part of the bounty that will be swapped to HAT \\n    * tokens.\\n    * If the claim had been previously challenged, this is only callable by\\n    * the arbitrator. Otherwise, callable by anyone after challengePeriod had\\n    * passed.\\n    * @param _claimId The claim ID\\n    * @param _bountyPercentage The percentage of the vault's balance that will\\n    * be sent as a bounty. This value will be ignored if the caller is not the\\n    * arbitrator.\\n    * @param _beneficiary where the bounty will be sent to. This value will be \\n    * ignored if the caller is not the arbitrator.\\n    */\\n    function approveClaim(bytes32 _claimId, uint16 _bountyPercentage, address _beneficiary)\\n        external;\\n\\n    /**\\n    * @notice Dismiss the active claim for bounty payout submitted by the\\n    * committee.\\n    * Called either by the arbitrator, or by anyone if the claim has timed out.\\n    * @param _claimId The claim ID\\n    */\\n    function dismissClaim(bytes32 _claimId) external;\\n\\n    /* -------------------------------------------------------------------------------- */\\n\\n    /* ---------------------------------- Params -------------------------------------- */\\n\\n    /**\\n    * @notice Set new committee address. Can be called by existing committee,\\n    * or by the the vault's owner in the case that the committee hadn't checked in\\n    * yet.\\n    * @param _committee The address of the new committee \\n    */\\n    function setCommittee(address _committee) external;\\n\\n    /**\\n    * @notice Called by the vault's owner to set the vesting params for the\\n    * part of the bounty that the hacker gets vested in the vault's native\\n    * token\\n    * @param _duration Duration of the vesting period. Must be smaller than\\n    * 120 days and bigger than `_periods`\\n    * @param _periods Number of vesting periods. Cannot be 0.\\n    */\\n    function setVestingParams(uint32 _duration, uint32 _periods) external;\\n\\n    /**\\n    * @notice Called by the vault's owner to set the vault token bounty split\\n    * upon an approval.\\n    * Can only be called if is no active claim and not during safety periods.\\n    * @param _bountySplit The bounty split\\n    */\\n    function setBountySplit(BountySplit calldata _bountySplit) external;\\n\\n    /**\\n    * @notice Called by the vault's committee to claim it's role.\\n    * Deposits are enabled only after committee check in.\\n    */\\n    function committeeCheckIn() external;\\n\\n    /**\\n    * @notice Called by the vault's owner to set a pending request for the\\n    * maximum percentage of the vault that can be paid out as a bounty.\\n    * Cannot be called if there is an active claim that has been submitted.\\n    * Max bounty should be less than or equal to 90% (defined as 9000).\\n    * It can also be set to 100%, but in this mode the vault will only allow\\n    * payouts of the 100%, and the vault will become inactive forever afterwards.\\n    * The pending value can be set by the owner after the time delay (of \\n    * {IHATVaultsRegistry.generalParameters.setMaxBountyDelay}) had passed.\\n    * @param _maxBounty The maximum bounty percentage that can be paid out\\n    */\\n    function setPendingMaxBounty(uint16 _maxBounty) external;\\n\\n    /**\\n    * @notice Called by the vault's owner to set the vault's max bounty to\\n    * the already pending max bounty.\\n    * Cannot be called if there are active claims that have been submitted.\\n    * Can only be called if there is a max bounty pending approval, and the\\n    * time delay since setting the pending max bounty had passed.\\n    */\\n    function setMaxBounty() external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set the vault HAT token bounty \\n    * split upon an approval.\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _bountyGovernanceHAT The HAT bounty for governance\\n    * @param _bountyHackerHATVested The HAT bounty vested for the hacker\\n    */\\n    function setHATBountySplit(\\n        uint16 _bountyGovernanceHAT,\\n        uint16 _bountyHackerHATVested\\n    ) \\n        external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set the vault arbitrator\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _arbitrator The address of vault's arbitrator\\n    */\\n    function setArbitrator(address _arbitrator) external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set the period of time after\\n    * a claim for a bounty payout has been submitted that it can be challenged\\n    * by the arbitrator.\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _challengePeriod The vault's challenge period\\n    */\\n    function setChallengePeriod(uint32 _challengePeriod) external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set the period of time after\\n    * which a claim for a bounty payout can be dismissed by anyone.\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _challengeTimeOutPeriod The vault's challenge timeout period\\n    */\\n    function setChallengeTimeOutPeriod(uint32 _challengeTimeOutPeriod)\\n        external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set whether the arbitrator\\n    * can change a claim bounty percentage and/ or beneficiary\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _arbitratorCanChangeBounty Whether the arbitrator can change a claim bounty percentage\\n    * @param _arbitratorCanChangeBeneficiary Whether the arbitrator can change a claim beneficiary\\n    */\\n    function setArbitratorOptions(\\n        bool _arbitratorCanChangeBounty,\\n        bool _arbitratorCanChangeBeneficiary,\\n        bool _arbitratorCanSubmitClaims\\n    )\\n        external;\\n\\n    /* -------------------------------------------------------------------------------- */\\n\\n    /* --------------------------------- Getters -------------------------------------- */\\n\\n    /** \\n    * @notice Returns the max bounty that can be paid from the vault in percentages out of HUNDRED_PERCENT\\n    * @return The max bounty\\n    */\\n    function maxBounty() external view returns(uint16);\\n\\n    /** \\n    * @notice Returns the vault's registry\\n    * @return The registry's address\\n    */\\n    function registry() external view returns(IHATVaultsRegistry);\\n\\n    /** \\n    * @notice Returns whether the committee has checked in\\n    * @return Whether the committee has checked in\\n    */\\n    function committeeCheckedIn() external view returns(bool);\\n\\n    /** \\n    * @notice Returns the current active claim\\n    * @return The current active claim\\n    */\\n    function getActiveClaim() external view returns(Claim memory);\\n\\n    /** \\n    * @notice Returns the vault HAT bounty split part that goes to the governance\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The vault's HAT bounty split part that goes to the governance\\n    */\\n    function getBountyGovernanceHAT() external view returns(uint16);\\n    \\n    /** \\n    * @notice Returns the vault HAT bounty split part that is vested for the hacker\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The vault's HAT bounty split part that is vested for the hacker\\n    */\\n    function getBountyHackerHATVested() external view returns(uint16);\\n\\n    /** \\n    * @notice Returns the address of the vault's arbitrator\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The address of the vault's arbitrator\\n    */\\n    function getArbitrator() external view returns(address);\\n\\n    /** \\n    * @notice Returns the period of time after a claim for a bounty payout has\\n    * been submitted that it can be challenged by the arbitrator.\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The vault's challenge period\\n    */\\n    function getChallengePeriod() external view returns(uint32);\\n\\n    /** \\n    * @notice Returns the period of time after which a claim for a bounty\\n    * payout can be dismissed by anyone.\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The vault's challenge timeout period\\n    */\\n    function getChallengeTimeOutPeriod() external view returns(uint32);\\n\\n    /** \\n    * @notice Returns the claims manager's version\\n    * @return The claims manager's version\\n    */\\n    function VERSION() external view returns(string calldata);\\n}\\n\",\"keccak256\":\"0x65002b348c94f5fcacc302fd5da474317dfbc98b52530d523931a96216cad37e\",\"license\":\"MIT\"},\"contracts/interfaces/IHATVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IRewardController.sol\\\";\\nimport \\\"./IHATVaultsRegistry.sol\\\";\\nimport \\\"./IHATClaimsManager.sol\\\";\\n\\n/** @title Interface for Hats.finance Vaults\\n * @author Hats.finance\\n * @notice A HATVault holds the funds for a specific project's bug bounties.\\n * Anyone can permissionlessly deposit into the HATVault using\\n * the vault\\u2019s native token. When a bug is submitted and approved, the bounty \\n * is paid out using the funds in the vault. Bounties are paid out as a\\n * percentage of the vault. The percentage is set according to the severity of\\n * the bug. Vaults have regular safety periods (typically for an hour twice a\\n * day) which are time for the committee to make decisions.\\n *\\n * In addition to the roles defined in the HATVaultsRegistry, every HATVault \\n * has the roles:\\n * Committee - The only address which can submit a claim for a bounty payout\\n * and set the maximum bounty.\\n * User - Anyone can deposit the vault's native token into the vault and \\n * recieve shares for it. Shares represent the user's relative part in the\\n * vault, and when a bounty is paid out, users lose part of their deposits\\n * (based on percentage paid), but keep their share of the vault.\\n * Users also receive rewards for their deposits, which can be claimed at any\\n *  time.\\n * To withdraw previously deposited tokens, a user must first send a withdraw\\n * request, and the withdrawal will be made available after a pending period.\\n * Withdrawals are not permitted during safety periods or while there is an \\n * active claim for a bounty payout.\\n *\\n * Bounties are payed out distributed between a few channels, and that \\n * distribution is set upon creation (the hacker gets part in direct transfer,\\n * part in vested reward and part in vested HAT token, part gets rewarded to\\n * the committee, part gets swapped to HAT token and burned and/or sent to Hats\\n * governance).\\n *\\n * NOTE: Vaults should not use tokens which do not guarantee that the amount\\n * specified is the amount transferred\\n *\\n * This project is open-source and can be found at:\\n * https://github.com/hats-finance/hats-contracts\\n */\\ninterface IHATVault is IERC4626Upgradeable {\\n\\n    /**\\n    * @notice Initialization parameters for the vault token\\n    * @param name The vault's name (concatenated as \\\"Hats Vault \\\" + name)\\n    * @param symbol The vault's symbol (concatenated as \\\"HAT\\\" + symbol)\\n    * @param rewardController The reward controller for the vault\\n    * @param asset The vault's native token\\n    * @param owner The address of the vault's owner \\n    * @param isPaused Whether to initialize the vault with deposits disabled\\n    * @param descriptionHash The hash of the vault's description\\n    */\\n    struct VaultInitParams {\\n        string name;\\n        string symbol;\\n        IRewardController[] rewardControllers;\\n        IERC20 asset;\\n        address owner;\\n        bool isPaused;\\n        string descriptionHash;\\n    }\\n\\n    // Only claims manager can make this call\\n    error OnlyClaimsManager();\\n    // Only registry owner\\n    error OnlyRegistryOwner();\\n    // Vault not started yet\\n    error VaultNotStartedYet();\\n    // First deposit must return at least MINIMAL_AMOUNT_OF_SHARES\\n    error AmountOfSharesMustBeMoreThanMinimalAmount();\\n    // Withdraw amount must be greater than zero\\n    error WithdrawMustBeGreaterThanZero();\\n    // Cannot mint burn or transfer 0 amount of shares\\n    error AmountCannotBeZero();\\n    // Cannot transfer shares to self\\n    error CannotTransferToSelf();\\n    // Cannot deposit to another user with withdraw request\\n    error CannotTransferToAnotherUserWithActiveWithdrawRequest();\\n    // Redeem amount cannot be more than maximum for user\\n    error RedeemMoreThanMax();\\n    // Deposit passed max slippage\\n    error DepositSlippageProtection();\\n    // Mint passed max slippage\\n    error MintSlippageProtection();\\n    // Withdraw passed max slippage\\n    error WithdrawSlippageProtection();\\n    // Redeem passed max slippage\\n    error RedeemSlippageProtection();\\n    // Cannot add the same reward controller more than once\\n    error DuplicatedRewardController();\\n    // Fee must be less than or equal to 2%\\n    error WithdrawalFeeTooBig();\\n    // System is in an emergency pause\\n    error SystemInEmergencyPause();\\n    // Only fee setter\\n    error OnlyFeeSetter();\\n    // Cannot unpasue deposits for a vault that was destroyed\\n    error CannotUnpauseDestroyedVault();\\n\\n    event AddRewardController(IRewardController indexed _newRewardController);\\n    event SetWithdrawalFee(uint256 _newFee);\\n    event VaultPayout(uint256 _amount);\\n    event SetDepositPause(bool _depositPause);\\n    event SetWithdrawPaused(bool _withdrawPaused);\\n    event VaultStarted();\\n    event VaultDestroyed();\\n    event SetVaultDescription(string _descriptionHash);\\n    event WithdrawRequest(\\n        address indexed _beneficiary,\\n        uint256 _withdrawEnableTime\\n    );\\n\\n    /**\\n    * @notice Initialize a vault token instance\\n    * @param _claimsManager The vault's claims manager\\n    * @param _params The vault token initialization parameters\\n    * @dev See {IHATVault-VaultInitParams} for more details\\n    * @dev Called when the vault token is created in {IHATVaultsRegistry-createVault}\\n    */\\n    function initialize(address _claimsManager, VaultInitParams calldata _params) external;\\n\\n    /**\\n    * @notice Adds a reward controller to the reward controllers list\\n    * @param _rewardController The reward controller to add\\n    */\\n    function addRewardController(IRewardController _rewardController) external;\\n\\n    /**\\n    * @notice Called by the vault's owner to disable all deposits to the vault\\n    * @param _depositPause Are deposits paused\\n    */\\n    function setDepositPause(bool _depositPause) external;\\n\\n    /**\\n    * @notice Called by the registry's fee setter to set the fee for \\n    * withdrawals from the vault.\\n    * @param _fee The new fee. Must be smaller than or equal to `MAX_WITHDRAWAL_FEE`\\n    */\\n    function setWithdrawalFee(uint256 _fee) external;\\n\\n    /**\\n    * @notice Make a payout out of the vault\\n    * @param _amount The amount to send out for the payout\\n    */\\n    function makePayout(uint256 _amount) external;\\n\\n    /**\\n    * @notice Called by the vault's claims manager to disable all withdrawals from the vault\\n    * @param _withdrawPaused Are withdraws paused\\n    */\\n    function setWithdrawPaused(bool _withdrawPaused) external;\\n\\n    /**\\n    * @notice Start the vault, deposits are disabled until the vault is first started\\n    */\\n    function startVault() external;\\n\\n\\n    /**\\n    * @notice Permanently disables deposits to the vault\\n    */\\n    function destroyVault() external;\\n\\n    /**\\n    * @notice Called by the registry's owner to change the description of the\\n    * vault in the Hats.finance UI\\n    * @param _descriptionHash the hash of the vault's description\\n    */\\n    function setVaultDescription(string calldata _descriptionHash) external;\\n    \\n    /** \\n    * @notice Returns the vault's version\\n    * @return The vault's version\\n    */\\n    function VERSION() external view returns(string calldata);\\n\\n    /** \\n    * @notice Returns the vault's registry\\n    * @return The registry's address\\n    */\\n    function registry() external view returns(IHATVaultsRegistry);\\n\\n    /** \\n    * @notice Returns the vault's registry\\n    * @return The registry's address\\n    */\\n    function claimsManager() external view returns(address);\\n\\n    /**\\n    * @notice Submit a request to withdraw funds from the vault.\\n    * The request will only be approved if there is no previous active\\n    * withdraw request.\\n    * The request will be pending for a period of\\n    * {HATVaultsRegistry.generalParameters.withdrawRequestPendingPeriod},\\n    * after which a withdraw will be possible for a duration of\\n    * {HATVaultsRegistry.generalParameters.withdrawRequestEnablePeriod}\\n    */\\n    function withdrawRequest() external;\\n\\n    /** \\n    * @notice Withdraw previously deposited funds from the vault and claim\\n    * the HAT reward that the user has earned.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param assets Amount of tokens to withdraw\\n    * @param receiver Address of receiver of the funds\\n    * @param owner Address of owner of the funds\\n    * @dev See {IERC4626-withdraw}.\\n    */\\n    function withdrawAndClaim(uint256 assets, address receiver, address owner)\\n        external \\n        returns (uint256 shares);\\n\\n    /** \\n    * @notice Redeem shares in the vault for the respective amount\\n    * of underlying assets and claim the HAT reward that the user has earned.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param shares Amount of shares to redeem\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds \\n    * @dev See {IERC4626-redeem}.\\n    */\\n    function redeemAndClaim(uint256 shares, address receiver, address owner)\\n        external \\n        returns (uint256 assets);\\n\\n    /** \\n    * @notice Redeem all of the user's shares in the vault for the respective amount\\n    * of underlying assets without calling the reward controller, meaning user renounces\\n    * their uncommited part of the reward.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param receiver Address of receiver of the funds \\n    */\\n    function emergencyWithdraw(address receiver) external returns (uint256 assets);\\n\\n    /** \\n    * @notice Withdraw previously deposited funds from the vault, without\\n    * transferring the accumulated rewards.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param assets Amount of tokens to withdraw\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds \\n    * @dev See {IERC4626-withdraw}.\\n    */\\n    function withdraw(uint256 assets, address receiver, address owner)\\n        external \\n        returns (uint256);\\n\\n    /** \\n    * @notice Redeem shares in the vault for the respective amount\\n    * of underlying assets, without transferring the accumulated reward.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param shares Amount of shares to redeem\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds \\n    * @dev See {IERC4626-redeem}.\\n    */\\n    function redeem(uint256 shares, address receiver, address owner)\\n        external  \\n        returns (uint256);\\n\\n    /**\\n    * @dev Deposit funds to the vault. Can only be called if the committee had\\n    * checked in and deposits are not paused, and the registry is not in an emergency pause.\\n    * @param receiver Reciever of the shares from the deposit\\n    * @param assets Amount of vault's native token to deposit\\n    * @dev See {IERC4626-deposit}.\\n    */\\n    function deposit(uint256 assets, address receiver) \\n        external\\n        returns (uint256);\\n\\n    /**\\n    * @dev Deposit funds to the vault. Can only be called if the committee had\\n    * checked in and deposits are not paused, and the registry is not in an emergency pause.\\n    * Allows to specify minimum shares to be minted for slippage protection.\\n    * @param receiver Reciever of the shares from the deposit\\n    * @param assets Amount of vault's native token to deposit\\n    * @param minShares Minimum amount of shares to minted for the assets\\n    */\\n    function deposit(uint256 assets, address receiver, uint256 minShares) \\n        external\\n        returns (uint256);\\n\\n    /**\\n    * @dev Deposit funds to the vault based on the amount of shares to mint specified.\\n    * Can only be called if the committee had checked in and deposits are not paused,\\n    * and the registry is not in an emergency pause.\\n    * Allows to specify maximum assets to be deposited for slippage protection.\\n    * @param receiver Reciever of the shares from the deposit\\n    * @param shares Amount of vault's shares to mint\\n    * @param maxAssets Maximum amount of assets to deposit for the shares\\n    */\\n    function mint(uint256 shares, address receiver, uint256 maxAssets) \\n        external\\n        returns (uint256);\\n\\n    /** \\n    * @notice Withdraw previously deposited funds from the vault, without\\n    * transferring the accumulated HAT reward.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * Allows to specify maximum shares to be burnt for slippage protection.\\n    * @param assets Amount of tokens to withdraw\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds\\n    * @param maxShares Maximum amount of shares to burn for the assets\\n    */\\n    function withdraw(uint256 assets, address receiver, address owner, uint256 maxShares)\\n        external \\n        returns (uint256);\\n\\n    /** \\n    * @notice Redeem shares in the vault for the respective amount\\n    * of underlying assets, without transferring the accumulated reward.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * Allows to specify minimum assets to be received for slippage protection.\\n    * @param shares Amount of shares to redeem\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds\\n    * @param minAssets Minimum amount of assets to receive for the shares\\n    */\\n    function redeem(uint256 shares, address receiver, address owner, uint256 minAssets)\\n        external  \\n        returns (uint256);\\n\\n    /** \\n    * @notice Withdraw previously deposited funds from the vault and claim\\n    * the HAT reward that the user has earned.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * Allows to specify maximum shares to be burnt for slippage protection.\\n    * @param assets Amount of tokens to withdraw\\n    * @param receiver Address of receiver of the funds\\n    * @param owner Address of owner of the funds\\n    * @param maxShares Maximum amount of shares to burn for the assets\\n    * @dev See {IERC4626-withdraw}.\\n    */\\n    function withdrawAndClaim(uint256 assets, address receiver, address owner, uint256 maxShares)\\n        external \\n        returns (uint256 shares);\\n\\n    /** \\n    * @notice Redeem shares in the vault for the respective amount\\n    * of underlying assets and claim the HAT reward that the user has earned.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * Allows to specify minimum assets to be received for slippage protection.\\n    * @param shares Amount of shares to redeem\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds\\n    * @param minAssets Minimum amount of assets to receive for the shares\\n    * @dev See {IERC4626-redeem}.\\n    */\\n    function redeemAndClaim(uint256 shares, address receiver, address owner, uint256 minAssets)\\n        external \\n        returns (uint256 assets);\\n\\n    /** \\n    * @notice Returns the amount of shares to be burned to give the user the exact\\n    * amount of assets requested plus cover for the fee. Also returns the amount assets\\n    * to be paid as fee.\\n    * @return shares The amount of shares to be burned to get the requested amount of assets\\n    * @return fee The amount of assets that will be paid as fee\\n    */\\n    function previewWithdrawAndFee(uint256 assets) external view returns (uint256 shares, uint256 fee);\\n\\n\\n    /** \\n    * @notice Returns the amount of assets to be sent to the user for the exact\\n    * amount of shares to redeem. Also returns the amount assets to be paid as fee.\\n    * @return assets amount of assets to be sent in exchange for the amount of shares specified\\n    * @return fee The amount of assets that will be paid as fee\\n    */\\n    function previewRedeemAndFee(uint256 shares) external view returns (uint256 assets, uint256 fee);\\n}\\n\",\"keccak256\":\"0x98e04ef364f09fb7ec4c4cb4bcc46973a98dc742b3399e82a21a8aee02f6c1b1\",\"license\":\"MIT\"},\"contracts/interfaces/IHATVaultsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./IHATVault.sol\\\";\\nimport \\\"./IHATClaimsManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/** @title Interface for the Hats.finance Vault Registry\\n * @author hats.finance\\n * @notice The Hats.finance Vault Registry is used to deploy Hats.finance\\n * vaults and manage shared parameters.\\n *\\n * Hats.finance is a proactive bounty protocol for white hat hackers and\\n * security experts, where projects, community members, and stakeholders\\n * incentivize protocol security and responsible disclosure.\\n * Hats create scalable vaults using the project\\u2019s own token. The value of the\\n * bounty increases with the success of the token and project.\\n *\\n * The owner of the registry has the permission to set time limits and bounty\\n * parameters and change vaults' info, and to set the other registry roles -\\n * fee setter and arbitrator.\\n * The arbitrator can challenge submitted claims for bounty payouts made by\\n * vaults' committees, approve them with a different bounty percentage or\\n * dismiss them.\\n * The fee setter can set the fee on withdrawals on all vaults.\\n *\\n * This project is open-source and can be found at:\\n * https://github.com/hats-finance/hats-contracts\\n *\\n * @dev New hats.finance vaults should be created through a call to {createVault}\\n * so that they are linked to the registry\\n */\\ninterface IHATVaultsRegistry {\\n\\n    // a struct with parameters for all vaults\\n    struct GeneralParameters {\\n        // vesting duration for the part of the bounty given to the hacker in HAT tokens\\n        uint32 hatVestingDuration;\\n        // vesting periods for the part of the bounty given to the hacker in HAT tokens\\n        uint32 hatVestingPeriods;\\n        // withdraw enable period. safetyPeriod starts when finished.\\n        uint32 withdrawPeriod;\\n        // withdraw disable period - time for the committee to gather and decide on actions,\\n        // withdrawals are not possible in this time. withdrawPeriod starts when finished.\\n        uint32 safetyPeriod;\\n        // period of time after withdrawRequestPendingPeriod where it is possible to withdraw\\n        // (after which withdrawals are not possible)\\n        uint32 withdrawRequestEnablePeriod;\\n        // period of time that has to pass after withdraw request until withdraw is possible\\n        uint32 withdrawRequestPendingPeriod;\\n        // period of time that has to pass after setting a pending max\\n        // bounty before it can be set as the new max bounty\\n        uint32 setMaxBountyDelay;\\n        // fee in ETH to be transferred with every logging of a claim\\n        uint256 claimFee;\\n    }\\n\\n    /**\\n     * @notice Raised on {setWithdrawSafetyPeriod} if the withdraw period to\\n     * be set is shorter than 1 hour\\n     */\\n    error WithdrawPeriodTooShort();\\n\\n    /**\\n     * @notice Raised on {setWithdrawSafetyPeriod} if the safety period to\\n     * be set is longer than 6 hours\\n     */\\n    error SafetyPeriodTooLong();\\n\\n    /**\\n     * @notice Raised on {setWithdrawRequestParams} if the withdraw request\\n     * pending period to be set is shorter than 3 months\\n     */\\n    error WithdrawRequestPendingPeriodTooLong();\\n\\n    /**\\n     * @notice Raised on {setWithdrawRequestParams} if the withdraw request\\n     * enabled period to be set is shorter than 6 hours\\n     */\\n    error WithdrawRequestEnabledPeriodTooShort();\\n\\n    /**\\n     * @notice Raised on {setWithdrawRequestParams} if the withdraw request\\n     * enabled period to be set is longer than 100 days\\n     */\\n    error WithdrawRequestEnabledPeriodTooLong();\\n\\n    /**\\n     * @notice Raised on {setHatVestingParams} if the vesting duration to be\\n     * set is longer than 180 days\\n     */\\n    error HatVestingDurationTooLong();\\n\\n    /**\\n     * @notice Raised on {setHatVestingParams} if the vesting periods to be\\n     * set is 0\\n     */\\n    error HatVestingPeriodsCannotBeZero();\\n    \\n    /**\\n     * @notice Raised on {setHatVestingParams} if the vesting duration is \\n     * smaller than the vesting periods\\n     */\\n    error HatVestingDurationSmallerThanPeriods();\\n\\n    /**\\n     * @notice Raised on {setMaxBountyDelay} if the max bounty to be set is\\n     * shorter than 2 days\\n     */\\n    error DelayTooShort();\\n\\n    /**\\n     * @notice Raised on {swapAndSend} if the amount to swap is zero\\n     */\\n    error AmountToSwapIsZero();\\n\\n    /**\\n     * @notice Raised on {swapAndSend} if the swap was not successful\\n     */\\n    error SwapFailed();\\n    // Wrong amount received\\n\\n    /**\\n     * @notice Raised on {swapAndSend} if the amount that was recieved in\\n     * the swap was less than the minimum amount specified\\n     */\\n    error AmountSwappedLessThanMinimum();\\n\\n    /**\\n     * @notice Raised on {setDefaultHATBountySplit} if the split to be set is\\n     * greater than 20% (defined as 2000)\\n     */\\n    error TotalHatsSplitPercentageShouldBeUpToMaxHATSplit();\\n\\n    /**\\n     * @notice Raised on {setDefaultChallengePeriod} if the challenge period\\n     *  to be set is shorter than 1 day\\n     */\\n    error ChallengePeriodTooShort();\\n\\n    /**\\n     * @notice Raised on {setDefaultChallengePeriod} if the challenge period\\n     *  to be set is longer than 5 days\\n     */\\n    error ChallengePeriodTooLong();\\n        \\n    /**\\n     * @notice Raised on {setDefaultChallengeTimeOutPeriod} if the challenge\\n     * timeout period to be set is shorter than 1 day\\n     */\\n    error ChallengeTimeOutPeriodTooShort();\\n\\n    /**\\n     * @notice Raised on {setDefaultChallengeTimeOutPeriod} if the challenge\\n     * timeout period to be set is longer than 125 days\\n     */\\n    error ChallengeTimeOutPeriodTooLong();\\n    \\n    /**\\n     * @notice Raised on {LogClaim} if the transaction was not sent with the\\n     * amount of ETH specified as {generalParameters.claimFee}\\n     */\\n    error NotEnoughFeePaid();\\n\\n    /**\\n     * @notice Raised on {LogClaim} if the transfer of the claim fee failed\\n     */\\n    error ClaimFeeTransferFailed();\\n\\n    /**\\n     * @notice Emitted on deployment of the registry\\n     * @param _hatVaultImplementation The HATVault implementation address\\n     * @param _hatClaimsManagerImplementation The HATClaimsManager implementation address\\n     * @param _HAT The HAT token address\\n     * @param _tokenLockFactory The token lock factory address\\n     * @param _generalParameters The registry's general parameters\\n     * @param _bountyGovernanceHAT The HAT bounty for governance\\n     * @param _bountyHackerHATVested The HAT bounty vested for the hacker\\n     * @param _hatGovernance The registry's governance\\n     * @param _defaultChallengePeriod The new default challenge period\\n     * @param _defaultChallengeTimeOutPeriod The new default challenge timeout\\n     */\\n    event RegistryCreated(\\n        address _hatVaultImplementation,\\n        address _hatClaimsManagerImplementation,\\n        address _HAT,\\n        address _tokenLockFactory,\\n        GeneralParameters _generalParameters,\\n        uint256 _bountyGovernanceHAT,\\n        uint256 _bountyHackerHATVested,\\n        address _hatGovernance,\\n        address _defaultArbitrator,\\n        uint256 _defaultChallengePeriod,\\n        uint256 _defaultChallengeTimeOutPeriod\\n    );\\n\\n    /**\\n     * @notice Emitted when a claim is logged\\n     * @param _claimer The address of the claimer\\n     * @param _descriptionHash - a hash of an ipfs encrypted file which\\n     * describes the claim.\\n     */\\n    event LogClaim(address indexed _claimer, string _descriptionHash);\\n\\n    /**\\n     * @notice Emitted when a new fee setter is set\\n     * @param _feeSetter The address of the new fee setter\\n     */\\n    event SetFeeSetter(address indexed _feeSetter);\\n\\n    /**\\n     * @notice Emitted when new withdraw request time limits are set\\n     * @param _withdrawRequestPendingPeriod Time period where the withdraw\\n     * request is pending\\n     * @param _withdrawRequestEnablePeriod Time period after the peding period\\n     * has ended during which withdrawal is enabled\\n     */\\n    event SetWithdrawRequestParams(\\n        uint256 _withdrawRequestPendingPeriod,\\n        uint256 _withdrawRequestEnablePeriod\\n    );\\n\\n    /**\\n     * @notice Emitted when a new fee for logging a claim for a bounty is set\\n     * @param _fee Claim fee in ETH to be transferred on any call of {logClaim}\\n     */\\n    event SetClaimFee(uint256 _fee);\\n\\n    /**\\n     * @notice Emitted when new durations are set for withdraw period and\\n     * safety period\\n     * @param _withdrawPeriod Amount of time during which withdrawals are\\n     * enabled, and the bounty split can be changed by the governance\\n     * @param _safetyPeriod Amount of time during which claims for bounties \\n     * can be submitted and withdrawals are disabled\\n     */\\n    event SetWithdrawSafetyPeriod(\\n        uint256 _withdrawPeriod,\\n        uint256 _safetyPeriod\\n    );\\n\\n    /**\\n     * @notice Emitted when new HAT vesting parameters are set\\n     * @param _duration The duration of the vesting period\\n     * @param _periods The number of vesting periods\\n     */\\n    event SetHatVestingParams(uint256 _duration, uint256 _periods);\\n\\n    /**\\n     * @notice Emitted when a new timelock delay for setting the\\n     * max bounty is set\\n     * @param _delay The time period for the delay\\n     */\\n    event SetMaxBountyDelay(uint256 _delay);\\n\\n    /**\\n     * @notice Emitted when the UI visibility of a vault is changed\\n     * @param _vault The address of the vault to update\\n     * @param _visible Is this vault visible in the UI\\n     */\\n    event SetVaultVisibility(address indexed _vault, bool indexed _visible);\\n\\n    /** @dev Emitted when a new vault is created\\n     * @param _vault The address of the vault to add to the registry\\n     * @param _claimsManager The address of the vault's claims manager\\n     * @param _vaultParams The vault initialization parameters\\n     * @param _claimsManagerParams The vault's claims manager initialization parameters\\n     */\\n    event VaultCreated(\\n        address indexed _vault,\\n        address indexed _claimsManager,\\n        IHATVault.VaultInitParams _vaultParams,\\n        IHATClaimsManager.ClaimsManagerInitParams _claimsManagerParams\\n    );\\n    \\n    /** @notice Emitted when a swap of vault tokens to HAT tokens is done and\\n     * the HATS tokens are sent to beneficiary through vesting contract\\n     * @param _beneficiary Address of beneficiary\\n     * @param _amountSwapped Amount of vault's native tokens that was swapped\\n     * @param _amountSent Amount of HAT tokens sent to beneficiary\\n     * @param _tokenLock Address of the token lock contract that holds the HAT\\n     * tokens (address(0) if no token lock is used)\\n     */\\n    event SwapAndSend(\\n        address indexed _beneficiary,\\n        uint256 _amountSwapped,\\n        uint256 _amountSent,\\n        address indexed _tokenLock\\n    );\\n\\n    /**\\n     * @notice Emitted when a new default HAT bounty split is set\\n     * @param _defaultBountyGovernanceHAT The new default HAT bounty part sent to governance\\n     * @param _defaultBountyHackerHATVested The new default HAT bounty part vseted for the hacker\\n     */\\n    event SetDefaultHATBountySplit(uint256 _defaultBountyGovernanceHAT, uint256 _defaultBountyHackerHATVested);\\n\\n    /**\\n     * @notice Emitted when a new default arbitrator is set\\n     * @param _defaultArbitrator The address of the new arbitrator\\n     */\\n    event SetDefaultArbitrator(address indexed _defaultArbitrator);\\n\\n    /**\\n     * @notice Emitted when a new default challenge period is set\\n     * @param _defaultChallengePeriod The new default challenge period\\n     */ \\n    event SetDefaultChallengePeriod(uint256 _defaultChallengePeriod);\\n\\n    /**\\n     * @notice Emitted when a new default challenge timeout period is set\\n     * @param _defaultChallengeTimeOutPeriod The new default challenge timeout\\n     * period\\n     */\\n    event SetDefaultChallengeTimeOutPeriod(uint256 _defaultChallengeTimeOutPeriod);\\n\\n    /** @notice Emitted when the system is put into emergency pause/unpause\\n     * @param _isEmergencyPaused Is the system in an emergency pause\\n     */\\n    event SetEmergencyPaused(bool _isEmergencyPaused);\\n\\n    /**\\n     * @notice Emitted when a new swap token is set\\n     * @param _swapToken The new swap token address\\n     */\\n    event SetSwapToken(address indexed _swapToken);\\n\\n    /**\\n     * @notice Emitted when a new HATVault implementation is set\\n     * @param _hatVaultImplementation The address of the new HATVault implementation\\n     */\\n    event SetHATVaultImplementation(address indexed _hatVaultImplementation);\\n\\n    /**\\n     * @notice Emitted when a new HATClaimsManager implementation is set\\n     * @param _hatClaimsManagerImplementation The address of the new HATClaimsManager implementation\\n     */\\n    event SetHATClaimsManagerImplementation(address indexed _hatClaimsManagerImplementation);\\n\\n    /**\\n     * @notice Called by governance to pause/unpause the system in case of an\\n     * emergency\\n     * @param _isEmergencyPaused Is the system in an emergency pause\\n     */\\n    function setEmergencyPaused(bool _isEmergencyPaused) external;\\n\\n    /**\\n     * @notice Called by governance to set a new swap token\\n     * @param _swapToken the new swap token address\\n     */\\n    function setSwapToken(address _swapToken) external;\\n\\n    /**\\n     * @notice Called by governance to set a new HATVault and HATVault implementation to be\\n     * used by the registry for creating new vaults\\n     * @param _hatVaultImplementation The address of the HATVault implementation\\n     * @param _hatClaimsManagerImplementation The address of the HATClaimsManager implementation\\n     */\\n    function setVaultImplementations(address _hatVaultImplementation, address _hatClaimsManagerImplementation) external;\\n\\n    /**\\n     * @notice Emit an event that includes the given _descriptionHash\\n     * This can be used by the claimer as evidence that she had access to the\\n     * information at the time of the call\\n     * if a {generalParameters.claimFee} > 0, the caller must send that amount\\n     * of ETH for the claim to succeed\\n     * @param _descriptionHash - a hash of an IPFS encrypted file which \\n     * describes the claim.\\n     */\\n    function logClaim(string calldata _descriptionHash) external payable;\\n\\n    /**\\n     * @notice Called by governance to set the default percentage of each claim bounty\\n     * that will be swapped for hats and sent to the governance or vested for the hacker\\n     * @param _defaultBountyGovernanceHAT The HAT bounty for governance\\n     * @param _defaultBountyHackerHATVested The HAT bounty vested for the hacker\\n     */\\n    function setDefaultHATBountySplit(\\n        uint16 _defaultBountyGovernanceHAT,\\n        uint16 _defaultBountyHackerHATVested\\n    ) \\n        external;\\n\\n    /** \\n     * @dev Check that a given hats bounty split is legal, meaning that:\\n     *   Each entry is a number between 0 and less than `MAX_HAT_SPLIT`.\\n     *   Total splits should be less than `MAX_HAT_SPLIT`.\\n     * function will revert in case the bounty split is not legal.\\n     * @param _bountyGovernanceHAT The HAT bounty for governance\\n     * @param _bountyHackerHATVested The HAT bounty vested for the hacker\\n     */\\n    function validateHATSplit(uint16 _bountyGovernanceHAT, uint16 _bountyHackerHATVested)\\n         external\\n         pure;\\n\\n    /**\\n     * @notice Called by governance to set the default arbitrator.\\n     * @param _defaultArbitrator The default arbitrator address\\n     */\\n    function setDefaultArbitrator(address _defaultArbitrator) external;\\n\\n    /**\\n     * @notice Called by governance to set the default challenge period\\n     * @param _defaultChallengePeriod The default challenge period\\n     */\\n    function setDefaultChallengePeriod(uint32 _defaultChallengePeriod) \\n        external;\\n\\n    /**\\n     * @notice Called by governance to set the default challenge timeout\\n     * @param _defaultChallengeTimeOutPeriod The Default challenge timeout\\n     */\\n    function setDefaultChallengeTimeOutPeriod(\\n        uint32 _defaultChallengeTimeOutPeriod\\n    ) \\n        external;\\n\\n    /**\\n     * @notice Check that the given challenge period is legal, meaning that it\\n     * is greater than 1 day and less than 5 days.\\n     * @param _challengePeriod The challenge period to check\\n     */\\n    function validateChallengePeriod(uint32 _challengePeriod) external pure;\\n\\n    /**\\n     * @notice Check that the given challenge timeout period is legal, meaning\\n     * that it is greater than 2 days and less than 125 days.\\n     * @param _challengeTimeOutPeriod The challenge timeout period to check\\n     */\\n    function validateChallengeTimeOutPeriod(uint32 _challengeTimeOutPeriod) external pure;\\n   \\n    /**\\n     * @notice Called by governance to set the fee setter role\\n     * @param _feeSetter Address of new fee setter\\n     */\\n    function setFeeSetter(address _feeSetter) external;\\n\\n    /**\\n     * @notice Called by governance to set time limits for withdraw requests\\n     * @param _withdrawRequestPendingPeriod Time period where the withdraw\\n     * request is pending\\n     * @param _withdrawRequestEnablePeriod Time period after the peding period\\n     * has ended during which withdrawal is enabled\\n     */\\n    function setWithdrawRequestParams(\\n        uint32 _withdrawRequestPendingPeriod,\\n        uint32  _withdrawRequestEnablePeriod\\n    )\\n        external;\\n\\n    /**\\n     * @notice Called by governance to set the fee for logging a claim for a\\n     * bounty in any vault.\\n     * @param _fee Claim fee in ETH to be transferred on any call of\\n     * {logClaim}\\n     */\\n    function setClaimFee(uint256 _fee) external;\\n\\n    /**\\n     * @notice Called by governance to set the withdraw period and safety\\n     * period, which are always interchanging.\\n     * The safety period is time that the committee can submit claims for \\n     * bounty payouts, and during which withdrawals are disabled and the\\n     * bounty split cannot be changed.\\n     * @param _withdrawPeriod Amount of time during which withdrawals are\\n     * enabled, and the bounty split can be changed by the governance. Must be\\n     * at least 1 hour.\\n     * @param _safetyPeriod Amount of time during which claims for bounties \\n     * can be submitted and withdrawals are disabled. Must be at most 6 hours.\\n     */\\n    function setWithdrawSafetyPeriod(\\n        uint32 _withdrawPeriod,\\n        uint32 _safetyPeriod\\n    ) \\n        external;\\n\\n    /**\\n     * @notice Called by governance to set vesting params for rewarding hackers\\n     * with rewardToken, for all vaults\\n     * @param _duration Duration of the vesting period. Must be less than 180\\n     * days.\\n     * @param _periods The number of vesting periods. Must be more than 0 and \\n     * less then the vesting duration.\\n     */\\n    function setHatVestingParams(uint32 _duration, uint32 _periods) external;\\n\\n    /**\\n     * @notice Called by governance to set the timelock delay for setting the\\n     * max bounty (the time between setPendingMaxBounty and setMaxBounty)\\n     * @param _delay The time period for the delay. Must be at least 2 days.\\n     */\\n    function setMaxBountyDelay(uint32 _delay) external;\\n\\n    /**\\n     * @notice Create a new vault\\n     * NOTE: Vaults should not use tokens which do not guarantee that the \\n     * amount specified is the amount transferred\\n     * @param _vaultParams The vault initialization parameters\\n     * @param _vaultParams The vault token initialization parameters\\n     * @return vault The address of the new vault\\n     */\\n    function createVault(\\n        IHATVault.VaultInitParams calldata _vaultParams,\\n        IHATClaimsManager.ClaimsManagerInitParams calldata _claimsManagerParams\\n    ) external returns(address vault, address vaultClaimsManager);\\n\\n    /**\\n     * @notice Called by governance to change the UI visibility of a vault\\n     * @param _vault The address of the vault to update\\n     * @param _visible Is this vault visible in the UI\\n     * This parameter can be used by the UI to include or exclude the vault\\n     */\\n    function setVaultVisibility(address _vault, bool _visible) external;\\n\\n    /**\\n     * @notice Transfer the part of the bounty that is supposed to be swapped\\n     * into HAT tokens from the HATVault to the registry, and keep track of\\n     * the amounts to be swapped and sent/burnt in a later transaction\\n     * @param _asset The vault's native token\\n     * @param _hacker The address of the beneficiary of the bounty\\n     * @param _hackersHatReward The amount of the vault's native token to be\\n     * swapped to HAT tokens and sent to the hacker via a vesting contract\\n     * @param _governanceHatReward The amount of the vault's native token to\\n     * be swapped to HAT tokens and sent to governance\\n     */\\n    function addTokensToSwap(\\n        IERC20 _asset,\\n        address _hacker,\\n        uint256 _hackersHatReward,\\n        uint256 _governanceHatReward\\n    ) external;\\n\\n    /**\\n     * @notice Called by governance to swap the given asset to HAT tokens and \\n     * distribute the HAT tokens: Send to governance their share and send to\\n     * beneficiaries their share through a vesting contract.\\n     * @param _asset The address of the token to be swapped to HAT tokens\\n     * @param _beneficiaries Addresses of beneficiaries\\n     * @param _amountOutMinimum Minimum amount of HAT tokens at swap\\n     * @param _routingContract Routing contract to call for the swap\\n     * @param _routingPayload Payload to send to the _routingContract for the\\n     * swap\\n     */\\n    function swapAndSend(\\n        address _asset,\\n        address[] calldata _beneficiaries,\\n        uint256 _amountOutMinimum,\\n        address _routingContract,\\n        bytes calldata _routingPayload\\n    ) external;\\n  \\n    /**\\n     * @notice Returns the withdraw enable period for all vaults. The safety\\n     * period starts when finished.\\n     * @return Withdraw enable period for all vaults\\n     */\\n    function getWithdrawPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the withdraw disable period - time for the committee to\\n     * gather and decide on actions, withdrawals are not possible in this\\n     * time. The withdraw period starts when finished.\\n     * @return Safety period for all vaults\\n     */\\n    function getSafetyPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the withdraw request enable period for all vaults -\\n     * period of time after withdrawRequestPendingPeriod where it is possible\\n     * to withdraw, and after which withdrawals are not possible.\\n     * @return Withdraw request enable period for all vaults\\n     */\\n    function getWithdrawRequestEnablePeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the withdraw request pending period for all vaults -\\n     * period of time that has to pass after withdraw request until withdraw\\n     * is possible\\n     * @return Withdraw request pending period for all vaults\\n     */\\n    function getWithdrawRequestPendingPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the set max bounty delay for all vaults - period of\\n     * time that has to pass after setting a pending max bounty before it can\\n     * be set as the new max bounty\\n     * @return Set max bounty delay for all vaults\\n     */\\n    function getSetMaxBountyDelay() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the number of vaults that have been previously created\\n     * @return The number of vaults in the registry\\n     */\\n    function getNumberOfVaults() external view returns(uint256);\\n\\n    /**\\n     * @notice Get the fee setter address\\n     * @return The address of the fee setter\\n     */\\n    function feeSetter() external view returns(address);\\n\\n    /**\\n     * @notice Get whether the system is in an emergency pause\\n     * @return Whether the system is in an emergency pause\\n     */\\n    function isEmergencyPaused() external view returns(bool);\\n\\n    /**\\n     * @notice Get the owner address\\n     * @return The address of the owner\\n     */\\n    function owner() external view returns(address);\\n\\n    /**\\n     * @notice Get the default percentage of the total bounty to be swapped to HATs and sent to governance\\n     * @return The default percentage of the total bounty to be swapped to HATs and sent to governance\\n     */\\n    function defaultBountyGovernanceHAT() external view returns(uint16);\\n\\n    /**\\n     * @notice Get the default percentage of the total bounty to be swapped to HATs and sent to the hacker via vesting contract\\n     * @return The default percentage of the total bounty to be swapped to HATs and sent to the hacker via vesting contract\\n     */\\n    function defaultBountyHackerHATVested() external view returns(uint16);\\n\\n    /**\\n     * @notice Get the default arbitrator address\\n     * @return The default arbitrator address\\n     */\\n    function defaultArbitrator() external view returns(address);\\n\\n    /**\\n     * @notice Get the default challenge period\\n     * @return The default challenge period\\n     */\\n    function defaultChallengePeriod() external view returns(uint32);\\n\\n    /**\\n     * @notice Get the default challenge time out period\\n     * @return The default challenge time out period\\n     */\\n    function defaultChallengeTimeOutPeriod() external view returns(uint32);\\n}\\n\",\"keccak256\":\"0x71f2cbbf2b35c973777713f5cf4680ecf9af466db56c1c4ca2bf08b97b55e882\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IRewardController {\\n    \\n    error EpochLengthZero();\\n    // Not enough rewards to transfer to user\\n    error NotEnoughRewardsToTransferToUser();\\n\\n    event RewardControllerCreated(\\n        address _rewardToken,\\n        address _governance,\\n        uint256 _startBlock,\\n        uint256 _epochLength,\\n        uint256[24] _epochRewardPerBlock\\n    );\\n    event SetEpochRewardPerBlock(uint256[24] _epochRewardPerBlock);\\n    event SetAllocPoint(address indexed _vault, uint256 _prevAllocPoint, uint256 _allocPoint);\\n    event VaultUpdated(address indexed _vault, uint256 _rewardPerShare, uint256 _lastProcessedVaultUpdate);\\n    event UserBalanceCommitted(address indexed _vault, address indexed _user, uint256 _unclaimedReward, uint256 _rewardDebt);\\n    event ClaimReward(address indexed _vault, address indexed _user, uint256 _amount);\\n\\n    /**\\n     * @notice Initializes the reward controller\\n     * @param _rewardToken The address of the ERC20 token to be distributed as rewards\\n     * @param _governance The hats governance address, to be given ownership of the reward controller\\n     * @param _startRewardingBlock The block number from which to start rewarding\\n     * @param _epochLength The length of a rewarding epoch\\n     * @param _epochRewardPerBlock The reward per block for each of the 24 epochs\\n     */\\n    function initialize(\\n        address _rewardToken,\\n        address _governance,\\n        uint256 _startRewardingBlock,\\n        uint256 _epochLength,\\n        uint256[24] calldata _epochRewardPerBlock\\n    ) external;\\n\\n    /**\\n     * @notice Called by the owner to set the allocation points for a vault, meaning the\\n     * vault's relative share of the total rewards\\n     * @param _vault The address of the vault\\n     * @param _allocPoint The allocation points for the vault\\n     */\\n    function setAllocPoint(address _vault, uint256 _allocPoint) external;\\n\\n    /**\\n    * @notice Update the vault's reward per share, not more then once per block\\n    * @param _vault The vault's address\\n    */\\n    function updateVault(address _vault) external;\\n\\n    /**\\n    * @notice Called by the owner to set reward per epoch\\n    * Reward can only be set for epochs which have not yet started\\n    * @param _epochRewardPerBlock reward per block for each epoch\\n    */\\n    function setEpochRewardPerBlock(uint256[24] calldata _epochRewardPerBlock) external;\\n\\n    /**\\n    * @notice Called by the vault to update a user claimable reward after deposit or withdraw.\\n    * This call should never revert.\\n    * @param _user The user address to updare rewards for\\n    * @param _sharesChange The user of shared the user deposited or withdrew\\n    * @param _isDeposit Whether user deposited or withdrew\\n    */\\n    function commitUserBalance(address _user, uint256 _sharesChange, bool _isDeposit) external;\\n    /**\\n    * @notice Transfer to the specified user their pending share of rewards.\\n    * @param _vault The vault address\\n    * @param _user The user address to claim for\\n    */\\n    function claimReward(address _vault, address _user) external;\\n\\n    /**\\n    * @notice Calculate rewards for a vault by iterating over the history of totalAllocPoints updates,\\n    * and sum up all rewards periods from vault.lastRewardBlock until current block number.\\n    * @param _vault The vault address\\n    * @param _fromBlock The block from which to start calculation\\n    * @return reward The amount of rewards for the vault\\n    */\\n    function getVaultReward(address _vault, uint256 _fromBlock) external view returns(uint256 reward);\\n\\n    /**\\n    * @notice Calculate the amount of rewards a user can claim for having contributed to a specific vault\\n    * @param _vault The vault address\\n    * @param _user The user for which the reward is calculated\\n    */\\n    function getPendingReward(address _vault, address _user) external view returns (uint256);\\n\\n    /**\\n    * @notice Called by the owner to transfer any tokens held in this contract to the owner\\n    * @param _token The token to sweep\\n    * @param _amount The amount of token to sweep\\n    */\\n    function sweepToken(IERC20Upgradeable _token, uint256 _amount) external;\\n\\n}\\n\",\"keccak256\":\"0x6eceb6516497db7ea79c8f571b03359ec1e53489222c9fffd60aa2f4496e0d23\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60406080815234620003ff5762002811803803806200001e8162000404565b928339810190606081830312620003ff5780516020808301516001600160401b03949293919290858111620003ff57816200005b91840162000440565b9486830151908111620003ff5762000074920162000440565b7f5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5938560009580875286855260019283888185822001548483878420015584865191817fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff809585a48a7fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1918282528685898420015481878b8620015584868585a47fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e639687835280868a8520015481888c8720015589878686a480897ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f7838097818752838a80858a20015494892001558686a48083528883203084528c5260ff9889818520541615620003c6575b9c9a9d9b999897969592915050905b620002ab575b505050508286905b62000205575b505050507f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d59450816002558351928352820152a1516122e690816200050b8239f35b909192939597949685518210156200029f57849162000257916001600160a01b0362000232838a620004df565b5116858c528b8a52818c20818d528a5286828d2054161562000266575b5050620004b9565b899795989694939291620001bd565b858c528b8a52818c20818d528a52818c208560ff1982541617905585600080516020620027f18339815191528d339451a48a386200024f565b969488969450620001c3565b8697999b989a50839495969351811015620003b65762000331908d8d858d6001600160a01b0380620002de878d620004df565b511688855284835285852081865283528d8686205416156200037d575b5062000308868c620004df565b51169282815280825284812084825282528c85822054161562000341575b5050505050620004b9565b8c9a989b999796959493620001af565b600080516020620027f18339815191529183825281815285822090858352528481208a60ff19825416179055339451a48d38858f8e9062000326565b88855284835285852081865283528585208b60ff19825416179055339089600080516020620027f1833981519152878951a438620002fb565b8c9a989b999796959450620001b5565b818452838d528084203085528d5283208660ff19825416179055600080516020620027f183398151915233933093a48a38808e620001a0565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200042a57604052565b634e487b7160e01b600052604160045260246000fd5b81601f82011215620003ff578051916001600160401b0383116200042a578260051b60209283806200047481850162000404565b809781520192820101928311620003ff578301905b82821062000498575050505090565b81516001600160a01b0381168103620003ff57815290830190830162000489565b6000198114620004c95760010190565b634e487b7160e01b600052601160045260246000fd5b8051821015620004f45760209160051b010190565b634e487b7160e01b600052603260045260246000fdfe60406080815260049081361015610020575b5050361561001e57600080fd5b005b600091823560e01c83816301d5062a146113195750806301ffc9a7146112a757806307bd02651461127e5780630d3cf6fc14611243578063134008d31461119757806313bc9f2014611177578063150b7a02146111225780631ff550dd1461109e578063248a9ca3146110755783816324a8ae8414611010578163252ca2b514610fa5575080632ab0f52914610f765780632f2ff15d14610ecd57806331d5075014610e9f57806336568abe14610e0f578381633d2f895c14610d9a57508063584b153e14610d6257806364d6235314610cb75780638065657f14610c95578381638643778514610c30575080638f2a0bb014610b0c5780638f61f4f514610ad157806391d1485414610a8d578063a217fddf14610a7257838163aec1d1081461099257508063b08e51c014610957578063b1c5f4271461092b578063bc197c81146108a5578063c4d252f5146105dc57838163ca8001511461056c578163cdb76136146104e657508063d45c4435146104bf578063d547741f14610483578063e38335e51461036f578063f23a6e6114610317578063f27a0c92146102f85763f2e615e4146101d05750610011565b346102f45760031960c0368201126102f0576101ea6113bb565b6101f26113d1565b926001600160401b03926044358481116102ec57610213903690840161157b565b9490916084359660018060a01b03938489168099036102e7578a9860a4359485116102e3576102468695369089016113e7565b969098610252336116c1565b1695863b156102df578a98899561028f6102ab958f519d8e9c8d9b8c9a63e2b001bf60e01b8c5216908a015260a060248a015260a4890191611c18565b9360643560448801526064870152858403016084860152611ba2565b03925af180156102d2576102be57505051f35b6102c790611462565b6102ce5751f35b5080fd5b50505051903d90823e3d90fd5b8a80fd5b8980fd5b600080fd5b8780fd5b8380fd5b8280fd5b5050346102ce57816003193601126102ce576020906002549051908152f35b50913461036c5760a036600319011261036c576103326113bb565b5061033b6113d1565b50608435906001600160401b03821161036c575060209261035e91369101611519565b505163f23a6e6160e01b8152f35b80fd5b6103df84846103d8610380366115ab565b6000805160206122918339815191528b9c939c999299979497528a602052898b206000805260205260ff8a600020541615610475575b6103c1858514611da3565b6103cc8c8514611da3565b888c888789888d611c61565b96876120bd565b875b8181106103f65788886103f389612153565b51f35b8080887fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b5888888f8e610451878f9361044a828f8f6104709f61043f90610444926104689b611e20565b611e46565b98611e20565b3596611e5a565b9161045e83838888611faf565b5194859485611f8b565b0390a3611dfb565b6103e1565b61047e336118b5565b6103b6565b50346102f457816003193601126102f4576103f390356104a16113d1565b90808552846020526104ba6001858720015433906119f4565b611b08565b50346102f45760203660031901126102f45760209282913581526001845220549051908152f35b919050346102ce57826003193601126102ce576105016113bb565b906024356001600160401b0381116102f057366023820112156102f05761053190369060248185013591016114e2565b9161053b336116c1565b6001600160a01b031691823b156102f0576102ab928492838751809681958294632905f80360e21b84528301611695565b919050346102ce57826003193601126102ce576105876113bb565b61058f6113d1565b90610599336116c1565b6001600160a01b03908116803b156105d85784928360249288519687958694635eed720760e11b865216908401525af180156102d2576102be57505051f35b8480fd5b5090346102f4576020806003193601126102f0578235927ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f78380600052600083528360002033600052835260ff846000205416156106e1575061064c84600052600160205260016040600020541190565b15610686575060019083855252828181205551907fbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb708383a2f35b915162461bcd60e51b815291820152603160248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e2063616044820152701b9b9bdd0818994818d85b98d95b1b1959607a1b6064820152608490fd5b6106ed92919233612182565b8451906106f98261148b565b604282528382019260603685378251156108905760308453825160019081101561087b57607860218501536041905b80821161080e5750506107cc576107c89386936107b4936107a560489461077c9a519a8576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8d978801528251928391603789019101611672565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190611672565b010360288101875201856114a6565b5162461bcd60e51b81529283928301611695565b0390fd5b50505080606493519262461bcd60e51b845283015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610866576f181899199a1a9b1b9c1cb0b131b232b360811b901a61083d8487612171565b53871c918015610851576000190190610728565b601188634e487b7160e01b6000525260246000fd5b603289634e487b7160e01b6000525260246000fd5b603287634e487b7160e01b6000525260246000fd5b603286634e487b7160e01b6000525260246000fd5b50913461036c5760a036600319011261036c576108c06113bb565b506108c96113d1565b506001600160401b03906044358281116102ce576108ea903690860161160c565b506064358281116102ce57610902903690860161160c565b5060843591821161036c575060209261091d91369101611519565b505163bc197c8160e01b8152f35b5050346102ce57602090610950610941366115ab565b96959095949194939293611c61565b9051908152f35b5050346102ce57816003193601126102ce57602090517ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f7838152f35b919050346102ce57826003193601126102ce576109ad6113bb565b906109b6611537565b916109c0336116c1565b8451637b10399960e01b81526001600160a01b0391821691906020818581865afa908115610a68578691610a2a575b5016803b156105d857849283604492885196879586946315d83a2160e31b8652850152151560248401525af180156102d2576102be57505051f35b90506020813d8211610a60575b81610a44602093836114a6565b81010312610a5c57518181168103610a5c57386109ef565b8580fd5b3d9150610a37565b87513d88823e3d90fd5b5050346102ce57816003193601126102ce5751908152602090f35b50346102f457816003193601126102f45781602093610aaa6113d1565b92358152808552209060018060a01b0316600052825260ff81600020541690519015158152f35b5050346102ce57816003193601126102ce57602090517fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc18152f35b50346102f45760c03660031901126102f4576001600160401b0381358181116105d857610b3c903690840161157b565b919092602435828111610c2c57610b56903690830161157b565b9290916044359182116102ec57610b6f9136910161157b565b909260a4359160643591610b82336116c1565b610b8d818814611da3565b610b98828814611da3565b610baa608435848489858a8d8f611c61565b96610bb58589611e9b565b898b5b828110610bc4578c8251f35b808a7f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8b8b8f8c8c610c2599610c1a898f8f8f610c1391610c0d61043f8680946104689d611e20565b9a611e20565b3598611e5a565b915196879687611d6b565b8a90610bb8565b8680fd5b919050346102ce57610c4136611546565b909291610c4d336116c1565b6001600160a01b0316803b156105d8578551634fd5e6d760e11b81526001600160a01b03909416928401928352602083019190915283918391908290849082906040016102ab565b5050346102ce57602090610950610cab36611414565b94939093929192611bc3565b50346102f45760203660031901126102f457803590303303610d0b57507f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5826002548151908152836020820152a160025551f35b608490602084519162461bcd60e51b8352820152602b60248201527f54696d656c6f636b436f6e74726f6c6c65723a2063616c6c6572206d7573742060448201526a62652074696d656c6f636b60a81b6064820152fd5b50913461036c57602036600319011261036c5750610d9160209235600052600160205260016040600020541190565b90519015158152f35b919050346102ce5760603660031901126102ce57610db66113bb565b6001600160a01b03602435818116908190036105d857610dd5336116c1565b803b156105d8578492836044928851968795869462ac5c8360e21b86521690840152833560248401525af180156102d2576102be57505051f35b50346102f457816003193601126102f457610e286113d1565b90336001600160a01b03831603610e4457906103f39135611b08565b608490602084519162461bcd60e51b8352820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b50913461036c57602036600319011261036c5750610d91602092356000526001602052604060002054151590565b50346102f457816003193601126102f45735610ee76113d1565b81845283602052610eff6001848620015433906119f4565b818452836020528284209060018060a01b0316908160005260205260ff83600020541615610f2c57505051f35b818452836020528284208160005260205282600020600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d858551a451f35b50913461036c57602036600319011261036c5750610d9160209235600052600160205260016040600020541490565b919050346102ce57826003193601126102ce57610fc06113bb565b610fc8611537565b90610fd2336116c1565b6001600160a01b031691823b156102f0576024849283875195869485936386d192e560e01b85521515908401525af180156102d2576102be57505051f35b919050346102ce5761102136611546565b90929161102d336116c1565b6001600160a01b0316803b156105d85785516370b73f7960e11b81526001600160a01b03909416928401928352602083019190915283918391908290849082906040016102ab565b50346102f45760203660031901126102f457816020936001923581528085522001549051908152f35b508290346102ce57826003193601126102ce576110b96113bb565b906110c2611537565b916110cc336116c1565b6001600160a01b031691823b156102f05790602484928387519586948593639d0ab89f60e01b85521515908401525af180156111185761110b57509051f35b61111490611462565b9051f35b83513d84823e3d90fd5b50913461036c57608036600319011261036c5761113d6113bb565b506111466113d1565b50606435906001600160401b03821161036c575060209261116991369101611519565b5051630a85bd0160e11b8152f35b50913461036c57602036600319011261036c5750610d9160209235611b7e565b50506103f36112168361122d7fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b5861120d6111d036611414565b6000805160206122918339815191528a999597929994939452896020528c8a208a805260205260ff8d8b20541615611235575b8884848989611bc3565b988997886120bd565b61122282828787611faf565b8a5194859485611f8b565b0390a3612153565b61123e336118b5565b611203565b5050346102ce57816003193601126102ce57602090517f5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca58152f35b5050346102ce57816003193601126102ce57602090516000805160206122918339815191528152f35b50346102f45760203660031901126102f457359063ffffffff60e01b82168092036102f45760209250630271189760e51b82149182156112eb575b50519015158152f35b909150637965db0b60e01b8114908115611308575b5090386112e2565b6301ffc9a760e01b14905038611300565b919050346102ce5760c03660031901126102ce576113356113bb565b90602435604435926001600160401b0384116105d85761137c7f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca936113b5953691016113e7565b60649591953560a4359161138f336116c1565b61139f60843583838b8a8a611bc3565b976113aa848a611e9b565b8a5196879687611d6b565b0390a351f35b600435906001600160a01b03821682036102e757565b602435906001600160a01b03821682036102e757565b9181601f840112156102e7578235916001600160401b0383116102e757602083818601950101116102e757565b60a06003198201126102e7576004356001600160a01b03811681036102e7579160243591604435906001600160401b0382116102e757611456916004016113e7565b90916064359060843590565b6001600160401b03811161147557604052565b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b0382111761147557604052565b90601f801991011681019081106001600160401b0382111761147557604052565b6001600160401b03811161147557601f01601f191660200190565b9291926114ee826114c7565b916114fc60405193846114a6565b8294818452818301116102e7578281602093846000960137010152565b9080601f830112156102e757816020611534933591016114e2565b90565b6024359081151582036102e757565b60609060031901126102e7576001600160a01b039060043582811681036102e7579160243590811681036102e7579060443590565b9181601f840112156102e7578235916001600160401b0383116102e7576020808501948460051b0101116102e757565b9060a06003198301126102e7576001600160401b036004358181116102e757836115d79160040161157b565b939093926024358381116102e757826115f29160040161157b565b939093926044359182116102e7576114569160040161157b565b9080601f830112156102e7578135906001600160401b038211611475578160051b60405193602093611640858401876114a6565b855283808601928201019283116102e7578301905b828210611663575050505090565b81358152908301908301611655565b60005b8381106116855750506000910152565b8181015183820152602001611675565b604091602082526116b58151809281602086015260208686019101611672565b601f01601f1916010190565b6001600160a01b031660008181527f3412d5605ac6cd444957cedb533e5dacad6378b4bc819ebe3652188a665066d5602090815260408083205490939192917fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc19160ff1615611731575050505050565b61173a90612182565b8451916117468361148b565b604283528483019360603686378351156118a157603085538351906001918210156118a15790607860218601536041915b818311611833575050506117f15761077c9385936117db936117cc6048946107c89951988576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8b978801528251928391603789019101611672565b010360288101855201836114a6565b5162461bcd60e51b815291829160048301611695565b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f8116601081101561188d576f181899199a1a9b1b9c1cb0b131b232b360811b901a6118638588612171565b5360041c92801561187957600019019190611777565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b6001600160a01b031660008181527fdae2aa361dfd1ca020a396615627d436107c35eff9fe7738a3512819782d7069602090815260408083205490939192916000805160206122918339815191529160ff1615611913575050505050565b61191c90612182565b8451916119288361148b565b604283528483019360603686378351156118a157603085538351906001918210156118a15790607860218601536041915b8183116119ae575050506117f15761077c9385936117db936117cc6048946107c89951988576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8b978801528251928391603789019101611672565b909192600f8116601081101561188d576f181899199a1a9b1b9c1cb0b131b232b360811b901a6119de8588612171565b5360041c92801561187957600019019190611959565b60008181526020918183526040938483209060018060a01b031690818452845260ff858420541615611a27575050505050565b611a3090612182565b845191611a3c8361148b565b604283528483019360603686378351156118a157603085538351906001918210156118a15790607860218601536041915b818311611ac2575050506117f15761077c9385936117db936117cc6048946107c89951988576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8b978801528251928391603789019101611672565b909192600f8116601081101561188d576f181899199a1a9b1b9c1cb0b131b232b360811b901a611af28588612171565b5360041c92801561187957600019019190611a6d565b9060009180835282602052604083209160018060a01b03169182845260205260ff604084205416611b3857505050565b80835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b3393604051a4565b6000526001602052604060002054600181119081611b9a575090565b905042101590565b908060209392818452848401376000828201840152601f01601f1916010190565b94611bf9611c1294959293604051968795602087019960018060a01b03168a52604087015260a0606087015260c0860191611ba2565b91608084015260a083015203601f1981018352826114a6565b51902090565b9190808252602080920192916000805b838210611c3757505050505090565b9091929394853560018060a01b0381168091036102f4578152830194830193929160010190611c28565b969294909695919560405196611c85602092838a019a60a08c5260c08b0191611c18565b601f19898203810160408b0152888252976001600160fb1b0381116102e7579089969495939897929160051b80928a830137019380888601878703606089015252604085019460408260051b82010195836000925b848410611d0257505050505050611c129550608084015260a0830152039081018352826114a6565b9193969850919398999496603f198282030184528935601e19843603018112156102e75783018681019190356001600160401b0381116102e75780360383136102e757611d5488928392600195611ba2565b9b0194019401918b98969394919a9997959a611cda565b929093611d99926080959897969860018060a01b03168552602085015260a0604085015260a0840191611ba2565b9460608201520152565b15611daa57565b60405162461bcd60e51b815260206004820152602360248201527f54696d656c6f636b436f6e74726f6c6c65723a206c656e677468206d69736d616044820152620e8c6d60eb1b6064820152608490fd5b6000198114611e0a5760010190565b634e487b7160e01b600052601160045260246000fd5b9190811015611e305760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036102e75790565b9190811015611e305760051b81013590601e19813603018212156102e75701908135916001600160401b0383116102e75760200182360381136102e7579190565b90611eb3826000526001602052604060002054151590565b611f2e576002548110611eda57420190814211611e0a576000526001602052604060002055565b60405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a20696e73756666696369656e746044820152652064656c617960d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602f60248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e20616c60448201526e1c9958591e481cd8da19591d5b1959608a1b6064820152608490fd5b611534949260609260018060a01b0316825260208201528160408201520191611ba2565b90926000938493826040519384928337810185815203925af13d15612059573d611fd8816114c7565b90611fe660405192836114a6565b8152600060203d92013e5b15611ff857565b60405162461bcd60e51b815260206004820152603360248201527f54696d656c6f636b436f6e74726f6c6c65723a20756e6465726c79696e6720746044820152721c985b9cd858dd1a5bdb881c995d995c9d1959606a1b6064820152608490fd5b611ff1565b1561206557565b60405162461bcd60e51b815260206004820152602a60248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e206973604482015269206e6f7420726561647960b01b6064820152608490fd5b6120c96120ce91611b7e565b61205e565b8015908115612134575b50156120e057565b60405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a206d697373696e6720646570656044820152656e64656e637960d01b6064820152608490fd5b61214d9150600052600160205260016040600020541490565b386120d8565b61215f6120c982611b7e565b60005260016020526001604060002055565b908151811015611e30570160200190565b60405190606082018281106001600160401b0382111761147557604052602a8252602082016040368237825115611e3057603090538151600190811015611e3057607860218401536029905b8082116122225750506121de5790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f8116601081101561227b576f181899199a1a9b1b9c1cb0b131b232b360811b901a6122518486612171565b5360041c9180156122665760001901906121ce565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fdfed8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63a26469706673582212207f805d3e918c4805e07c9dc4dba61dc42894670c3fde922a6cf18227bec00f2264736f6c634300081000332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
  "deployedBytecode": "0x60406080815260049081361015610020575b5050361561001e57600080fd5b005b600091823560e01c83816301d5062a146113195750806301ffc9a7146112a757806307bd02651461127e5780630d3cf6fc14611243578063134008d31461119757806313bc9f2014611177578063150b7a02146111225780631ff550dd1461109e578063248a9ca3146110755783816324a8ae8414611010578163252ca2b514610fa5575080632ab0f52914610f765780632f2ff15d14610ecd57806331d5075014610e9f57806336568abe14610e0f578381633d2f895c14610d9a57508063584b153e14610d6257806364d6235314610cb75780638065657f14610c95578381638643778514610c30575080638f2a0bb014610b0c5780638f61f4f514610ad157806391d1485414610a8d578063a217fddf14610a7257838163aec1d1081461099257508063b08e51c014610957578063b1c5f4271461092b578063bc197c81146108a5578063c4d252f5146105dc57838163ca8001511461056c578163cdb76136146104e657508063d45c4435146104bf578063d547741f14610483578063e38335e51461036f578063f23a6e6114610317578063f27a0c92146102f85763f2e615e4146101d05750610011565b346102f45760031960c0368201126102f0576101ea6113bb565b6101f26113d1565b926001600160401b03926044358481116102ec57610213903690840161157b565b9490916084359660018060a01b03938489168099036102e7578a9860a4359485116102e3576102468695369089016113e7565b969098610252336116c1565b1695863b156102df578a98899561028f6102ab958f519d8e9c8d9b8c9a63e2b001bf60e01b8c5216908a015260a060248a015260a4890191611c18565b9360643560448801526064870152858403016084860152611ba2565b03925af180156102d2576102be57505051f35b6102c790611462565b6102ce5751f35b5080fd5b50505051903d90823e3d90fd5b8a80fd5b8980fd5b600080fd5b8780fd5b8380fd5b8280fd5b5050346102ce57816003193601126102ce576020906002549051908152f35b50913461036c5760a036600319011261036c576103326113bb565b5061033b6113d1565b50608435906001600160401b03821161036c575060209261035e91369101611519565b505163f23a6e6160e01b8152f35b80fd5b6103df84846103d8610380366115ab565b6000805160206122918339815191528b9c939c999299979497528a602052898b206000805260205260ff8a600020541615610475575b6103c1858514611da3565b6103cc8c8514611da3565b888c888789888d611c61565b96876120bd565b875b8181106103f65788886103f389612153565b51f35b8080887fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b5888888f8e610451878f9361044a828f8f6104709f61043f90610444926104689b611e20565b611e46565b98611e20565b3596611e5a565b9161045e83838888611faf565b5194859485611f8b565b0390a3611dfb565b6103e1565b61047e336118b5565b6103b6565b50346102f457816003193601126102f4576103f390356104a16113d1565b90808552846020526104ba6001858720015433906119f4565b611b08565b50346102f45760203660031901126102f45760209282913581526001845220549051908152f35b919050346102ce57826003193601126102ce576105016113bb565b906024356001600160401b0381116102f057366023820112156102f05761053190369060248185013591016114e2565b9161053b336116c1565b6001600160a01b031691823b156102f0576102ab928492838751809681958294632905f80360e21b84528301611695565b919050346102ce57826003193601126102ce576105876113bb565b61058f6113d1565b90610599336116c1565b6001600160a01b03908116803b156105d85784928360249288519687958694635eed720760e11b865216908401525af180156102d2576102be57505051f35b8480fd5b5090346102f4576020806003193601126102f0578235927ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f78380600052600083528360002033600052835260ff846000205416156106e1575061064c84600052600160205260016040600020541190565b15610686575060019083855252828181205551907fbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb708383a2f35b915162461bcd60e51b815291820152603160248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e2063616044820152701b9b9bdd0818994818d85b98d95b1b1959607a1b6064820152608490fd5b6106ed92919233612182565b8451906106f98261148b565b604282528382019260603685378251156108905760308453825160019081101561087b57607860218501536041905b80821161080e5750506107cc576107c89386936107b4936107a560489461077c9a519a8576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8d978801528251928391603789019101611672565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190611672565b010360288101875201856114a6565b5162461bcd60e51b81529283928301611695565b0390fd5b50505080606493519262461bcd60e51b845283015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610866576f181899199a1a9b1b9c1cb0b131b232b360811b901a61083d8487612171565b53871c918015610851576000190190610728565b601188634e487b7160e01b6000525260246000fd5b603289634e487b7160e01b6000525260246000fd5b603287634e487b7160e01b6000525260246000fd5b603286634e487b7160e01b6000525260246000fd5b50913461036c5760a036600319011261036c576108c06113bb565b506108c96113d1565b506001600160401b03906044358281116102ce576108ea903690860161160c565b506064358281116102ce57610902903690860161160c565b5060843591821161036c575060209261091d91369101611519565b505163bc197c8160e01b8152f35b5050346102ce57602090610950610941366115ab565b96959095949194939293611c61565b9051908152f35b5050346102ce57816003193601126102ce57602090517ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f7838152f35b919050346102ce57826003193601126102ce576109ad6113bb565b906109b6611537565b916109c0336116c1565b8451637b10399960e01b81526001600160a01b0391821691906020818581865afa908115610a68578691610a2a575b5016803b156105d857849283604492885196879586946315d83a2160e31b8652850152151560248401525af180156102d2576102be57505051f35b90506020813d8211610a60575b81610a44602093836114a6565b81010312610a5c57518181168103610a5c57386109ef565b8580fd5b3d9150610a37565b87513d88823e3d90fd5b5050346102ce57816003193601126102ce5751908152602090f35b50346102f457816003193601126102f45781602093610aaa6113d1565b92358152808552209060018060a01b0316600052825260ff81600020541690519015158152f35b5050346102ce57816003193601126102ce57602090517fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc18152f35b50346102f45760c03660031901126102f4576001600160401b0381358181116105d857610b3c903690840161157b565b919092602435828111610c2c57610b56903690830161157b565b9290916044359182116102ec57610b6f9136910161157b565b909260a4359160643591610b82336116c1565b610b8d818814611da3565b610b98828814611da3565b610baa608435848489858a8d8f611c61565b96610bb58589611e9b565b898b5b828110610bc4578c8251f35b808a7f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8b8b8f8c8c610c2599610c1a898f8f8f610c1391610c0d61043f8680946104689d611e20565b9a611e20565b3598611e5a565b915196879687611d6b565b8a90610bb8565b8680fd5b919050346102ce57610c4136611546565b909291610c4d336116c1565b6001600160a01b0316803b156105d8578551634fd5e6d760e11b81526001600160a01b03909416928401928352602083019190915283918391908290849082906040016102ab565b5050346102ce57602090610950610cab36611414565b94939093929192611bc3565b50346102f45760203660031901126102f457803590303303610d0b57507f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5826002548151908152836020820152a160025551f35b608490602084519162461bcd60e51b8352820152602b60248201527f54696d656c6f636b436f6e74726f6c6c65723a2063616c6c6572206d7573742060448201526a62652074696d656c6f636b60a81b6064820152fd5b50913461036c57602036600319011261036c5750610d9160209235600052600160205260016040600020541190565b90519015158152f35b919050346102ce5760603660031901126102ce57610db66113bb565b6001600160a01b03602435818116908190036105d857610dd5336116c1565b803b156105d8578492836044928851968795869462ac5c8360e21b86521690840152833560248401525af180156102d2576102be57505051f35b50346102f457816003193601126102f457610e286113d1565b90336001600160a01b03831603610e4457906103f39135611b08565b608490602084519162461bcd60e51b8352820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b50913461036c57602036600319011261036c5750610d91602092356000526001602052604060002054151590565b50346102f457816003193601126102f45735610ee76113d1565b81845283602052610eff6001848620015433906119f4565b818452836020528284209060018060a01b0316908160005260205260ff83600020541615610f2c57505051f35b818452836020528284208160005260205282600020600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d858551a451f35b50913461036c57602036600319011261036c5750610d9160209235600052600160205260016040600020541490565b919050346102ce57826003193601126102ce57610fc06113bb565b610fc8611537565b90610fd2336116c1565b6001600160a01b031691823b156102f0576024849283875195869485936386d192e560e01b85521515908401525af180156102d2576102be57505051f35b919050346102ce5761102136611546565b90929161102d336116c1565b6001600160a01b0316803b156105d85785516370b73f7960e11b81526001600160a01b03909416928401928352602083019190915283918391908290849082906040016102ab565b50346102f45760203660031901126102f457816020936001923581528085522001549051908152f35b508290346102ce57826003193601126102ce576110b96113bb565b906110c2611537565b916110cc336116c1565b6001600160a01b031691823b156102f05790602484928387519586948593639d0ab89f60e01b85521515908401525af180156111185761110b57509051f35b61111490611462565b9051f35b83513d84823e3d90fd5b50913461036c57608036600319011261036c5761113d6113bb565b506111466113d1565b50606435906001600160401b03821161036c575060209261116991369101611519565b5051630a85bd0160e11b8152f35b50913461036c57602036600319011261036c5750610d9160209235611b7e565b50506103f36112168361122d7fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b5861120d6111d036611414565b6000805160206122918339815191528a999597929994939452896020528c8a208a805260205260ff8d8b20541615611235575b8884848989611bc3565b988997886120bd565b61122282828787611faf565b8a5194859485611f8b565b0390a3612153565b61123e336118b5565b611203565b5050346102ce57816003193601126102ce57602090517f5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca58152f35b5050346102ce57816003193601126102ce57602090516000805160206122918339815191528152f35b50346102f45760203660031901126102f457359063ffffffff60e01b82168092036102f45760209250630271189760e51b82149182156112eb575b50519015158152f35b909150637965db0b60e01b8114908115611308575b5090386112e2565b6301ffc9a760e01b14905038611300565b919050346102ce5760c03660031901126102ce576113356113bb565b90602435604435926001600160401b0384116105d85761137c7f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca936113b5953691016113e7565b60649591953560a4359161138f336116c1565b61139f60843583838b8a8a611bc3565b976113aa848a611e9b565b8a5196879687611d6b565b0390a351f35b600435906001600160a01b03821682036102e757565b602435906001600160a01b03821682036102e757565b9181601f840112156102e7578235916001600160401b0383116102e757602083818601950101116102e757565b60a06003198201126102e7576004356001600160a01b03811681036102e7579160243591604435906001600160401b0382116102e757611456916004016113e7565b90916064359060843590565b6001600160401b03811161147557604052565b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b0382111761147557604052565b90601f801991011681019081106001600160401b0382111761147557604052565b6001600160401b03811161147557601f01601f191660200190565b9291926114ee826114c7565b916114fc60405193846114a6565b8294818452818301116102e7578281602093846000960137010152565b9080601f830112156102e757816020611534933591016114e2565b90565b6024359081151582036102e757565b60609060031901126102e7576001600160a01b039060043582811681036102e7579160243590811681036102e7579060443590565b9181601f840112156102e7578235916001600160401b0383116102e7576020808501948460051b0101116102e757565b9060a06003198301126102e7576001600160401b036004358181116102e757836115d79160040161157b565b939093926024358381116102e757826115f29160040161157b565b939093926044359182116102e7576114569160040161157b565b9080601f830112156102e7578135906001600160401b038211611475578160051b60405193602093611640858401876114a6565b855283808601928201019283116102e7578301905b828210611663575050505090565b81358152908301908301611655565b60005b8381106116855750506000910152565b8181015183820152602001611675565b604091602082526116b58151809281602086015260208686019101611672565b601f01601f1916010190565b6001600160a01b031660008181527f3412d5605ac6cd444957cedb533e5dacad6378b4bc819ebe3652188a665066d5602090815260408083205490939192917fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc19160ff1615611731575050505050565b61173a90612182565b8451916117468361148b565b604283528483019360603686378351156118a157603085538351906001918210156118a15790607860218601536041915b818311611833575050506117f15761077c9385936117db936117cc6048946107c89951988576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8b978801528251928391603789019101611672565b010360288101855201836114a6565b5162461bcd60e51b815291829160048301611695565b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f8116601081101561188d576f181899199a1a9b1b9c1cb0b131b232b360811b901a6118638588612171565b5360041c92801561187957600019019190611777565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b6001600160a01b031660008181527fdae2aa361dfd1ca020a396615627d436107c35eff9fe7738a3512819782d7069602090815260408083205490939192916000805160206122918339815191529160ff1615611913575050505050565b61191c90612182565b8451916119288361148b565b604283528483019360603686378351156118a157603085538351906001918210156118a15790607860218601536041915b8183116119ae575050506117f15761077c9385936117db936117cc6048946107c89951988576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8b978801528251928391603789019101611672565b909192600f8116601081101561188d576f181899199a1a9b1b9c1cb0b131b232b360811b901a6119de8588612171565b5360041c92801561187957600019019190611959565b60008181526020918183526040938483209060018060a01b031690818452845260ff858420541615611a27575050505050565b611a3090612182565b845191611a3c8361148b565b604283528483019360603686378351156118a157603085538351906001918210156118a15790607860218601536041915b818311611ac2575050506117f15761077c9385936117db936117cc6048946107c89951988576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8b978801528251928391603789019101611672565b909192600f8116601081101561188d576f181899199a1a9b1b9c1cb0b131b232b360811b901a611af28588612171565b5360041c92801561187957600019019190611a6d565b9060009180835282602052604083209160018060a01b03169182845260205260ff604084205416611b3857505050565b80835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b3393604051a4565b6000526001602052604060002054600181119081611b9a575090565b905042101590565b908060209392818452848401376000828201840152601f01601f1916010190565b94611bf9611c1294959293604051968795602087019960018060a01b03168a52604087015260a0606087015260c0860191611ba2565b91608084015260a083015203601f1981018352826114a6565b51902090565b9190808252602080920192916000805b838210611c3757505050505090565b9091929394853560018060a01b0381168091036102f4578152830194830193929160010190611c28565b969294909695919560405196611c85602092838a019a60a08c5260c08b0191611c18565b601f19898203810160408b0152888252976001600160fb1b0381116102e7579089969495939897929160051b80928a830137019380888601878703606089015252604085019460408260051b82010195836000925b848410611d0257505050505050611c129550608084015260a0830152039081018352826114a6565b9193969850919398999496603f198282030184528935601e19843603018112156102e75783018681019190356001600160401b0381116102e75780360383136102e757611d5488928392600195611ba2565b9b0194019401918b98969394919a9997959a611cda565b929093611d99926080959897969860018060a01b03168552602085015260a0604085015260a0840191611ba2565b9460608201520152565b15611daa57565b60405162461bcd60e51b815260206004820152602360248201527f54696d656c6f636b436f6e74726f6c6c65723a206c656e677468206d69736d616044820152620e8c6d60eb1b6064820152608490fd5b6000198114611e0a5760010190565b634e487b7160e01b600052601160045260246000fd5b9190811015611e305760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036102e75790565b9190811015611e305760051b81013590601e19813603018212156102e75701908135916001600160401b0383116102e75760200182360381136102e7579190565b90611eb3826000526001602052604060002054151590565b611f2e576002548110611eda57420190814211611e0a576000526001602052604060002055565b60405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a20696e73756666696369656e746044820152652064656c617960d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602f60248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e20616c60448201526e1c9958591e481cd8da19591d5b1959608a1b6064820152608490fd5b611534949260609260018060a01b0316825260208201528160408201520191611ba2565b90926000938493826040519384928337810185815203925af13d15612059573d611fd8816114c7565b90611fe660405192836114a6565b8152600060203d92013e5b15611ff857565b60405162461bcd60e51b815260206004820152603360248201527f54696d656c6f636b436f6e74726f6c6c65723a20756e6465726c79696e6720746044820152721c985b9cd858dd1a5bdb881c995d995c9d1959606a1b6064820152608490fd5b611ff1565b1561206557565b60405162461bcd60e51b815260206004820152602a60248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e206973604482015269206e6f7420726561647960b01b6064820152608490fd5b6120c96120ce91611b7e565b61205e565b8015908115612134575b50156120e057565b60405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a206d697373696e6720646570656044820152656e64656e637960d01b6064820152608490fd5b61214d9150600052600160205260016040600020541490565b386120d8565b61215f6120c982611b7e565b60005260016020526001604060002055565b908151811015611e30570160200190565b60405190606082018281106001600160401b0382111761147557604052602a8252602082016040368237825115611e3057603090538151600190811015611e3057607860218401536029905b8082116122225750506121de5790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f8116601081101561227b576f181899199a1a9b1b9c1cb0b131b232b360811b901a6122518486612171565b5360041c9180156122665760001901906121ce565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fdfed8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63a26469706673582212207f805d3e918c4805e07c9dc4dba61dc42894670c3fde922a6cf18227bec00f2264736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancel(bytes32)": {
        "details": "Cancel an operation. Requirements: - the caller must have the 'canceller' role."
      },
      "execute(address,uint256,bytes,bytes32,bytes32)": {
        "details": "Execute an (ready) operation containing a single transaction. Emits a {CallExecuted} event. Requirements: - the caller must have the 'executor' role."
      },
      "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)": {
        "details": "Execute an (ready) operation containing a batch of transactions. Emits one {CallExecuted} event per transaction in the batch. Requirements: - the caller must have the 'executor' role."
      },
      "getMinDelay()": {
        "details": "Returns the minimum delay for an operation to become valid. This value can be changed by executing an operation that calls `updateDelay`."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTimestamp(bytes32)": {
        "details": "Returns the timestamp at with an operation becomes ready (0 for unset operations, 1 for done operations)."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "hashOperation(address,uint256,bytes,bytes32,bytes32)": {
        "details": "Returns the identifier of an operation containing a single transaction."
      },
      "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)": {
        "details": "Returns the identifier of an operation containing a batch of transactions."
      },
      "isOperation(bytes32)": {
        "details": "Returns whether an id correspond to a registered operation. This includes both Pending, Ready and Done operations."
      },
      "isOperationDone(bytes32)": {
        "details": "Returns whether an operation is done or not."
      },
      "isOperationPending(bytes32)": {
        "details": "Returns whether an operation is pending or not."
      },
      "isOperationReady(bytes32)": {
        "details": "Returns whether an operation is ready or not."
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155Receiver-onERC1155BatchReceived}."
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155Receiver-onERC1155Received}."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "schedule(address,uint256,bytes,bytes32,bytes32,uint256)": {
        "details": "Schedule an operation containing a single transaction. Emits a {CallScheduled} event. Requirements: - the caller must have the 'proposer' role."
      },
      "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)": {
        "details": "Schedule an operation containing a batch of transactions. Emits one {CallScheduled} event per transaction in the batch. Requirements: - the caller must have the 'proposer' role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateDelay(uint256)": {
        "details": "Changes the minimum timelock duration for future operations. Emits a {MinDelayChange} event. Requirements: - the caller must be the timelock itself. This can only be achieved by scheduling and later executing an operation where the timelock is the target and the data is the ABI-encoded call to this function."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4783,
        "contract": "contracts/HATTimelockController.sol:HATTimelockController",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4778_storage)"
      },
      {
        "astId": 5303,
        "contract": "contracts/HATTimelockController.sol:HATTimelockController",
        "label": "_timestamps",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 5305,
        "contract": "contracts/HATTimelockController.sol:HATTimelockController",
        "label": "_minDelay",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4778_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4778_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)4778_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4775,
            "contract": "contracts/HATTimelockController.sol:HATTimelockController",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4777,
            "contract": "contracts/HATTimelockController.sol:HATTimelockController",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}