{
  "address": "0x90506a402433dA64E293A9d483142a60cE27925d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_merkleTreeIPFSRef",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "merkleTreeIPFSRef",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "MerkleTreeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "VaultPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "VaultResumed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIERS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "addVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTierFromShares",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTiersToRedeemFromShares",
      "outputs": [
        {
          "internalType": "bool[3]",
          "name": "tiers",
          "type": "bool[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "getVaultId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "pauseVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "pausedVaults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "hatVaults",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "pids",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "redeemMultipleFromShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "hatVaults",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "pids",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8[]",
          "name": "tiers",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "proofs",
          "type": "bytes32[][]"
        }
      ],
      "name": "redeemMultipleFromTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "redeemSingleFromShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "redeemSingleFromTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "resumeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokensRedeemed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_merkleTreeIPFSRef",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "updateTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "vaultsRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd82dee9c989019b0012b449d3dd23c62b764e3623593ed44128d18834e4574d7",
  "receipt": {
    "to": null,
    "from": "0x1885B7c7a3AE1F35BA71C0392C13153A95c4914f",
    "contractAddress": "0x90506a402433dA64E293A9d483142a60cE27925d",
    "transactionIndex": 186,
    "gasUsed": "2521215",
    "logsBloom": "0x
    "blockHash": "0x089acf09921e33dad1af71c07510f9ca579f828c0f00da1f954084ddd9645395",
    "transactionHash": "0xd82dee9c989019b0012b449d3dd23c62b764e3623593ed44128d18834e4574d7",
    "logs": [
      {
        "transactionIndex": 186,
        "blockNumber": 5558685,
        "transactionHash": "0xd82dee9c989019b0012b449d3dd23c62b764e3623593ed44128d18834e4574d7",
        "address": "0x90506a402433dA64E293A9d483142a60cE27925d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001885b7c7a3ae1f35ba71c0392c13153a95c4914f"
        ],
        "data": "0x",
        "logIndex": 367,
        "blockHash": "0x089acf09921e33dad1af71c07510f9ca579f828c0f00da1f954084ddd9645395"
      },
      {
        "transactionIndex": 186,
        "blockNumber": 5558685,
        "transactionHash": "0xd82dee9c989019b0012b449d3dd23c62b764e3623593ed44128d18834e4574d7",
        "address": "0x90506a402433dA64E293A9d483142a60cE27925d",
        "topics": [
          "0x0321d29aa78655def372c63c55cdf9813510b8e8f5263d109dc5554a405b4ed8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000660198240000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 368,
        "blockHash": "0x089acf09921e33dad1af71c07510f9ca579f828c0f00da1f954084ddd9645395"
      }
    ],
    "blockNumber": 5558685,
    "cumulativeGasUsed": "29680851",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    1711380516
  ],
  "numDeployments": 4,
  "solcInputHash": "e2dd19fbd28890679930fe6b1d01ee82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_merkleTreeIPFSRef\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"merkleTreeIPFSRef\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"MerkleTreeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"VaultPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"VaultResumed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTierFromShares\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTiersToRedeemFromShares\",\"outputs\":[{\"internalType\":\"bool[3]\",\"name\":\"tiers\",\"type\":\"bool[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getVaultId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"pauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pausedVaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"hatVaults\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"redeemMultipleFromShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"hatVaults\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"tiers\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"proofs\",\"type\":\"bytes32[][]\"}],\"name\":\"redeemMultipleFromTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"redeemSingleFromShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"redeemSingleFromTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"resumeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensRedeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_merkleTreeIPFSRef\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"updateTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vaultsRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply()\":{\"details\":\"Returns thze total tokens minted so far.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateTree(string,bytes32,uint256)\":{\"details\":\"Update the merkle tree root only after  the deadline for minting has been reached.\",\"params\":{\"_deadline\":\"number of days to the next minting deadline.\",\"_merkleTreeIPFSRef\":\"new merkle tree ipfs reference.\",\"_root\":\"new merkle tree root to use for verifying.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nft/HATVaultsNFT.sol\":\"HATVaultsNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/interfaces/IHATVaultsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IHATVaultsData {\\n    \\n    function getTotalShares(uint256 _pid) external view returns (uint256 totalShares);\\n\\n    function getShares(uint256 _pid, address _user) external view returns (uint256 shares);\\n}\\n\",\"keccak256\":\"0x57f15b8f365e629dbf00096311db54274db0462be30cffc7653c23a824853f96\",\"license\":\"MIT\"},\"contracts/nft/HATVaultsNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../interfaces/IHATVaultsData.sol\\\";\\n\\n/*\\nAn NFT contract that mints specail tokens for each vault of\\nthe HATVaults system.\\n@note: Thoroughout the whole contract, the HATVaults address \\n       should always be the wrapper contract, not the actual\\n       HATVaults contract\\n*/\\ncontract HATVaultsNFT is ERC1155, Ownable {\\n    using Strings for uint256;\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public root;\\n    Counters.Counter public totalSupplyCounter;\\n    uint256 public deadline;\\n\\n    uint256 public constant HUNDRED_PERCENT = 10000;\\n    uint256 public constant TIERS = 3;\\n\\n    mapping(bytes32 => bool) public pausedVaults;\\n    mapping(bytes32 => bool) public vaultsRegistered;\\n    mapping(uint256 => mapping(address => bool)) public tokensRedeemed;\\n\\n    mapping(uint256 => string) public uris;\\n\\n    event MerkleTreeChanged(string merkleTreeIPFSRef, bytes32 root, uint256 deadline);\\n    event VaultPaused(address indexed hatVaults, uint256 indexed pid);\\n    event VaultResumed(address indexed hatVaults, uint256 indexed pid);\\n\\n    modifier notPaused(address hatVaults, uint256 pid) {\\n        require(!pausedVaults[keccak256(abi.encodePacked(hatVaults, pid))], \\\"Vault paused\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _merkleTreeIPFSRef,\\n        bytes32 _root,\\n        uint256 _deadline\\n    // solhint-disable-next-line func-visibility\\n    ) ERC1155(\\\"\\\") {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp < _deadline, \\\"Deadline already passed\\\");\\n        root = _root;\\n        deadline = _deadline;\\n        emit MerkleTreeChanged(_merkleTreeIPFSRef, _root, _deadline);\\n    }\\n\\n    function addVault(address hatVaults, uint256 pid, string memory _uri) external onlyOwner {\\n        require(!vaultsRegistered[getVaultId(hatVaults, pid)], \\\"Vault already exists\\\");\\n        vaultsRegistered[getVaultId(hatVaults, pid)] = true;\\n        for(uint8 i = 1; i <= TIERS; i++) {\\n            uris[getTokenId(hatVaults, pid, i)] = string(abi.encodePacked(_uri, Strings.toString(i)));\\n        }\\n    }\\n\\n    function pauseVault(address hatVaults, uint256 pid) external onlyOwner {\\n        pausedVaults[keccak256(abi.encodePacked(hatVaults, pid))] = true;\\n        emit VaultPaused(hatVaults, pid);\\n    }\\n\\n\\n    function resumeVault(address hatVaults, uint256 pid) external onlyOwner {\\n        pausedVaults[keccak256(abi.encodePacked(hatVaults, pid))] = false;\\n        emit VaultResumed(hatVaults, pid);\\n    }\\n\\n    /**\\n     * @dev Update the merkle tree root only after \\n     * the deadline for minting has been reached.\\n     * @param _merkleTreeIPFSRef new merkle tree ipfs reference.\\n     * @param _root new merkle tree root to use for verifying.\\n     * @param _deadline number of days to the next minting deadline.\\n     */\\n    function updateTree(string memory _merkleTreeIPFSRef, bytes32 _root, uint256 _deadline) external onlyOwner {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp > deadline, \\\"Minting deadline was not reached\\\");\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp < _deadline, \\\"New deadline already passed\\\");\\n        root = _root;\\n        deadline = _deadline;\\n        emit MerkleTreeChanged(_merkleTreeIPFSRef, _root, _deadline);\\n    }\\n\\n    function redeemMultipleFromTree(\\n        address[] calldata hatVaults,\\n        uint256[] calldata pids,\\n        address account,\\n        uint8[] calldata tiers,\\n        bytes32[][] calldata proofs\\n    ) external {\\n        uint256 arraysLength = hatVaults.length;\\n        require(arraysLength == pids.length, \\\"Arrays lengths must match\\\");\\n        require(arraysLength == tiers.length, \\\"Arrays lengths must match\\\");\\n        require(arraysLength == proofs.length, \\\"Arrays lengths must match\\\");\\n        for (uint256 i = 0; i < arraysLength; i++) {\\n            redeemSingleFromTree(hatVaults[i], pids[i], account, tiers[i], proofs[i]);\\n        }\\n    }\\n\\n    function redeemSingleFromTree(\\n        address hatVaults,\\n        uint256 pid,\\n        address account,\\n        uint8 tier,\\n        bytes32[] calldata proof\\n    ) public notPaused(hatVaults, pid) {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp < deadline, \\\"Minting deadline passed\\\");\\n        require(_verify(proof, _leaf(hatVaults, pid, account, tier)), \\\"Invalid merkle proof\\\");\\n        _mintTokens(hatVaults, pid, account, tier);\\n    }\\n\\n    function redeemMultipleFromShares(\\n        address[] calldata hatVaults,\\n        uint256[] calldata pids,\\n        address account\\n    ) external {\\n        uint256 arraysLength = hatVaults.length;\\n        require(arraysLength == pids.length, \\\"Arrays lengths must match\\\");\\n        for (uint256 i = 0; i < arraysLength; i++) {\\n            redeemSingleFromShares(hatVaults[i], pids[i], account);\\n        }\\n    }\\n\\n    function redeemSingleFromShares(\\n        address hatVaults,\\n        uint256 pid,\\n        address account\\n    ) public {\\n        uint8 tier = getTierFromShares(hatVaults, pid, account);\\n        if (tier != 0) {\\n            _mintTokens(hatVaults, pid, account, tier);\\n        } \\n    }\\n\\n    function _mintTokens(\\n        address hatVaults,\\n        uint256 pid,\\n        address account,\\n        uint8 tier\\n    ) internal {\\n        require(vaultsRegistered[getVaultId(hatVaults, pid)], \\\"Token does not exist\\\");\\n        for(uint8 i = 1; i <= tier; i++) {\\n            if (!tokensRedeemed[getTokenId(hatVaults, pid, i)][account]) {\\n                tokensRedeemed[getTokenId(hatVaults, pid, i)][account] = true;\\n                _mint(account, getTokenId(hatVaults, pid, i));\\n            }\\n        }\\n    }\\n\\n    function _leaf(address _hatVaults, uint256 _pid, address _account, uint8 _tier) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_hatVaults, _pid, _account, _tier));\\n    }\\n\\n    function _verify(bytes32[] calldata proof, bytes32 leaf) internal view returns (bool) {\\n        return MerkleProof.verifyCalldata(proof, root, leaf);\\n    }\\n\\n    function _mint(address to, uint256 id) internal {\\n        totalSupplyCounter.increment();\\n        super._mint(to, id, 1, \\\"\\\");\\n    }\\n\\n    function getTierFromShares(\\n        address hatVaults,\\n        uint256 pid,\\n        address account\\n    ) public view notPaused(hatVaults, pid) returns(uint8) {\\n        uint256 shares = IHATVaultsData(hatVaults).getShares(pid, account);\\n        uint256 totalShares = IHATVaultsData(hatVaults).getTotalShares(pid);\\n        require(totalShares != 0, \\\"Pool is empty\\\");\\n        uint16[3] memory tierPercents = [10, 100, 1500];\\n        uint8 tier = 0;\\n\\n        for(uint8 i = 0; i < tierPercents.length; i++) {\\n            if (shares < totalShares * tierPercents[i] / HUNDRED_PERCENT) {\\n                break;\\n            }\\n            tier++;\\n        }\\n\\n        return tier;\\n    }\\n\\n    function getTiersToRedeemFromShares(\\n        address hatVaults,\\n        uint256 pid,\\n        address account\\n    ) external view returns(bool[3] memory tiers) {\\n        require(vaultsRegistered[getVaultId(hatVaults, pid)], \\\"Token does not exist\\\");\\n        for(uint8 i = 1; i <= getTierFromShares(hatVaults, pid, account); i++) {\\n            if (!tokensRedeemed[getTokenId(hatVaults, pid, i)][account]) {\\n                tiers[i - 1] = true;\\n            }\\n        }\\n    }\\n\\n    function isEligible(\\n        address hatVaults,\\n        uint256 pid,\\n        address account\\n    ) external view returns(bool) {\\n        uint8 tier = getTierFromShares(hatVaults, pid, account);\\n        return tier != 0 && (vaultsRegistered[getVaultId(hatVaults, pid)] && !tokensRedeemed[getTokenId(hatVaults, pid, tier)][account]);\\n    }\\n\\n    function getTokenId(\\n        address hatVaults,\\n        uint256 pid,\\n        uint8 tier\\n    ) public pure returns(uint256) {\\n        return uint256(keccak256(abi.encodePacked(hatVaults, pid, tier)));\\n    }\\n\\n    function getVaultId(\\n        address hatVaults,\\n        uint256 pid\\n    ) public pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(hatVaults, pid));\\n    }\\n\\n    /**\\n        @dev Returns thze total tokens minted so far.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return totalSupplyCounter.current();\\n    }\\n\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\n        return uris[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x6f4b8c2663cfebb526cb9b4e4434788386b9eb6b832897f62fd7083f7870ae5e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60406080815234620002485762002e12803803806200001e816200024d565b9283398101606082820312620002485781516001600160401b039190828111620002485783019181601f84011215620002485782519381851162000232576020601f1994620000748287601f8a0116016200024d565b96808852828801958382840101116200024857858362000095930162000273565b818101519187015187519093818301908111828210176200023257885260008091526002546001908181811c9116801562000227575b848210146200021357601f8111620001e7575b5050600281905560038054336001600160a01b0319821681179092558951926001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09084a383421015620001a757506080937f0321d29aa78655def372c63c55cdf9813510b8e8f5263d109dc5554a405b4ed8969383601f936200018a9895600455826006558a51988997606089525180958160608b01528a8a019062000273565b8601528885015201168101030190a151612b799081620002998239f35b60649162461bcd60e51b82526004820152601760248201527f446561646c696e6520616c7265616479207061737365640000000000000000006044820152fd5b60028352601f848420910160051c8101905b818110620002085750620000de565b8381558201620001f9565b634e487b7160e01b83526022600452602483fd5b90607f1690620000cb565b634e487b7160e01b600052604160045260246000fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200023257604052565b60005b838110620002875750506000910152565b81810151838201526020016200027656fe6080604052600436101561001257600080fd5b60003560e01c8062fdd58e14611d4d57806301ffc9a714611cdf57806302524936146119f45780630e89341c146119b45780631253c546146119b457806318160ddd146119655780631963658514611983578063204a875a14611965578063230ad5cc146119345780632335570b1461171c57806329dcb0cf146116fe5780632eb2c2d6146113cb5780633917dac51461129757806339731d911461126057806339efae52146112315780634e1273f41461108f5780636e748f97146110735780636ed93dd014611056578063715018a614610ff45780637c7cd78514610f525780638da5cb5b14610f29578063a22cb46514610e45578063a943840a14610da9578063c9e7d50a14610d5c578063ceb120fa14610c2f578063d01f593214610881578063db833f00146107e2578063df773e34146107cb578063e591ed8914610728578063e985e9c5146106d2578063ebf0c717146106b4578063f242432a14610442578063f2fde38b146103775763f9beb7401461019157600080fd5b346103725760a0366003190112610372576101aa611d74565b6024356101b5611d8a565b6064359160ff83168303610372576084356001600160401b038111610372576101e2903690600401611db6565b604051606087901b6001600160601b0319166020808301918252603483018690529793929161021e81605481015b03601f198101835282611e9e565b5190206000526007875261023a60ff60406000205416156124dd565b6006544210156103335790604051878101906001600160601b0319808660601b1683528660348301528760601b16605482015260ff60f81b8860f81b1660688201526049815261028981611e83565b5190209160045492916000915b8083106102ed57505050036102b1576102af9450612589565b005b60405162461bcd60e51b815260048101869052601460248201527324b73b30b634b21036b2b935b63290383937b7b360611b6044820152606490fd5b9091926102fb8483856124b9565b35908181101561032057600052895261031960406000205b93612181565b9190610296565b9060005289526103196040600020610313565b60405162461bcd60e51b8152600481018890526017602482015276135a5b9d1a5b99c8191958591b1a5b99481c185cdcd959604a1b6044820152606490fd5b600080fd5b3461037257602036600319011261037257610390611d74565b6103986120a4565b6001600160a01b039081169081156103ee5760009160035491816001600160601b0360a01b84161760035560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b346103725760a03660031901126103725761045b611d74565b610463611da0565b906064356044356084356001600160401b03811161037257610489903690600401612029565b6001600160a01b0393841693338514801561068b575b6104a8906121b1565b85166104b5811515612214565b6104be83612427565b506104c884612427565b5082600052602095600087526040600020866000528752846040600020546104f28282101561226e565b856000526000895260406000208860005289520360406000205583600052600087526040600020826000528752604060002061052f8682546122cd565b90558186604051868152878a8201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260403392a43b61056b57005b6105af93600087946040519687958694859363f23a6e6160e01b9b8c865233600487015260248601526044850152606484015260a0608484015260a4830190611e09565b03925af16000918161065c575b506106325750506001906105ce612343565b6308c379a0146105fd575b506105e057005b60405162461bcd60e51b8152806105f9600482016123d2565b0390fd5b610605612361565b908161061157506105d9565b6105f960405192839262461bcd60e51b845260048401526024830190611e09565b6001600160e01b0319161490506102af5760405162461bcd60e51b8152806105f9600482016122fa565b61067d919250843d8611610684575b6106758183611e9e565b8101906122da565b90846105bc565b503d61066b565b508460005260016020526040600020336000526020526104a860ff60406000205416905061049f565b34610372576000366003190112610372576020600454604051908152f35b34610372576040366003190112610372576106eb611d74565b6106f3611da0565b9060018060a01b03809116600052600160205260406000209116600052602052602060ff604060002054166040519015158152f35b346103725761073636611f65565b916107428383836128b2565b60ff81161515928361075c575b6020846040519015158152f35b9091925061076a8184612b14565b600052600860205260ff604060002054169283610791575b5050506020915082808061074f565b61079b9350612ad3565b600052600960205260406000209060018060a01b0316600052602052602060ff6040600020541615828080610782565b34610372576102af6107dc36611f65565b91612518565b346103725760403660031901126103725760006107fd611d74565b6024356108086120a4565b604051606083901b6001600160601b0319166020820190815260348201839052906108368160548101610210565b519020835260076020526040808420805460ff1916600117905551916001600160a01b03167f57847ecb0caf57ab272aebf4d12c2e00b717d17e11280577d5302fd2f6a901ae8484a3f35b346103725760603660031901126103725761089a611d74565b6044356001600160401b038111610372576108b9903690600401612029565b906108c26120a4565b6108ce60243582612b14565b600052600860205260ff60406000205416610bf3576108ef60243582612b14565b60005260086020526040600020600160ff198254161790556001905b60ff821692600384116102af57600093807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008181811015610be4575b5050600a906d04ee2d6d415b85acef810000000080821015610bd7575b50662386f26fc1000080821015610bca575b506305f5e10080821015610bbd575b5061271080821015610bb0575b50606480821015610ba3575b501015610b99575b600a602160018701966109b38861200e565b976109c1604051998a611e9e565b8089526109d0601f199161200e565b013660208a01378701015b60001901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304908115610a0a57600a906109db565b505091610a48602060405180968651610a2881858501868b01611de6565b8201610a3c82518093868085019101611de6565b01038087520185611e9e565b610a558160243584612ad3565b600052600a60205260406000208451946001600160401b038611610b8357610a7d8254611e2e565b601f8111610b3f575b50602090601f8711600114610ad057958091610abf959697600092610ac5575b50508160011b916000199060031b1c191617905561245c565b9061090b565b015190508780610aa6565b908260005260206000209160005b601f1989168110610b275750918791600193610abf979899601f19811610610b0e575b505050811b01905561245c565b015160001960f88460031b161c19169055878080610b01565b91926020600181928685015181550194019201610ade565b826000526020600020601f880160051c810160208910610b7c575b601f830160051c82018110610b70575050610a86565b60008155600101610b5a565b5080610b5a565b634e487b7160e01b600052604160045260246000fd5b93600101936109a1565b6002910496019587610999565b600491049601958761098d565b6008910496019587610980565b6010910496019587610971565b602091049601958761095f565b60409750049050600a87610942565b60405162461bcd60e51b81526020600482015260146024820152735661756c7420616c72656164792065786973747360601b6044820152606490fd5b34610372576060366003190112610372576004356001600160401b03811161037257610c5f903690600401612029565b6024359060443590610c6f6120a4565b600654421115610d185781421015610cd35782610cc3927f0321d29aa78655def372c63c55cdf9813510b8e8f5263d109dc5554a405b4ed89460045580600655604051938493606085526060850190611e09565b91602084015260408301520390a1005b60405162461bcd60e51b815260206004820152601b60248201527f4e657720646561646c696e6520616c72656164792070617373656400000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f4d696e74696e6720646561646c696e6520776173206e6f7420726561636865646044820152fd5b3461037257604036600319011261037257610d75611da0565b600435600052600960205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b34610372576040366003190112610372576000610dc4611d74565b602435610dcf6120a4565b604051606083901b6001600160601b031916602082019081526034820183905290610dfd8160548101610210565b519020835260076020526040808420805460ff1916905551916001600160a01b03167f5e8526ee3954b37e3817ddd2a2af5028e0bd006511f190d1deeb43d15d0a18cd8484a3f35b3461037257604036600319011261037257610e5e611d74565b60243590811515809203610372576001600160a01b031690338214610ed257336000526001602052604060002082600052602052604060002060ff1981541660ff83161790556040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b60405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608490fd5b34610372576000366003190112610372576003546040516001600160a01b039091168152602090f35b34610372576060366003190112610372576001600160401b0360043581811161037257610f83903690600401611db6565b9160243590811161037257610f9c903690600401611db6565b90610fa5611d8a565b90610fb183861461246d565b60005b858110610fbd57005b80610fea84610fd8610fd3610fef958b8b6124b9565b6124c9565b610fe38489886124b9565b3590612518565b612181565b610fb4565b346103725760003660031901126103725761100d6120a4565b600380546001600160a01b0319811690915560405160009182906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b346103725760003660031901126103725760206040516127108152f35b3461037257600036600319011261037257602060405160038152f35b34610372576040366003190112610372576004356001600160401b038082116103725736602383011215610372578160040135906110cc82611f99565b926110da6040519485611e9e565b82845260209260248486019160051b8301019136831161037257602401905b828210611212575050506024359081116103725761111b903690600401611fb0565b82518151036111bb5782519261113084611f99565b9361113e6040519586611e9e565b80855261114d601f1991611f99565b01368486013760005b81518110156111a05761119b9061118b6001600160a01b03611178838661219d565b5116611184838761219d565b51906120fc565b611195828861219d565b52612181565b611156565b5050506111b7604051928284938452830190612070565b0390f35b60405162461bcd60e51b815260048101839052602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608490fd5b81356001600160a01b03811681036103725781529084019084016110f9565b3461037257604036600319011261037257602061125861124f611d74565b60243590612b14565b604051908152f35b3461037257606036600319011261037257611279611d74565b6044359060ff82168203610372576020916112589160243590612ad3565b34610372576112a536611f65565b9190604051926112b484611e68565b60603685376112c38284612b14565b6000526020926008845260ff916112e08360406000205416612546565b60019384805b61131d575b5050505050604051918293906000945b6003861061130857606085f35b825115158152948301949181019181016112fb565b908291856113318695848a989c9b9c6128b2565b168682169081116113c157611347828487612ad3565b600090815260098b5260408082206001600160a01b03871683528c52902054871615611384575b506113789061245c565b909192939796976112e6565b909450600019018581116113ab578694856113a48861137894168b612ac2565b529061136e565b634e487b7160e01b600052601160045260246000fd5b50509695966112eb565b346103725760031960a036820112610372576113e5611d74565b906113ee611da0565b906001600160401b039060443582811161037257611410903690600401611fb0565b60643583811161037257611428903690600401611fb0565b9260843590811161037257611441903690600401612029565b6001600160a01b039586169590929033871480156116d5575b611463906121b1565b825185510361167f5785169261147a841515612214565b60005b8351811015611513578061149461150e928661219d565b5161149f828961219d565b5190806000526020906000825260406000208c6000528252826040600020546114ca8282101561226e565b82600052600084528d60406000209060005284520360406000205560005260008152604060002090886000525261150760406000209182546122cd565b9055612181565b61147d565b509094939291938287604051604081527f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb611551604083018a612070565b9180830360208201528061156633948b612070565b0390a43b61157057005b60006020946115d16115c2976115b294604051998a988997889663bc197c8160e01b9e8f89523360048a0152602489015260a0604489015260a4880190612070565b9084878303016064880152612070565b91848303016084850152611e09565b03925af16000918161165f575b5061163757505060016115ef612343565b6308c379a014611600575b6105e057005b611608612361565b8061161357506115fa565b60405162461bcd60e51b8152602060048201529081906105f9906024830190611e09565b6001600160e01b031916146102af5760405162461bcd60e51b8152806105f9600482016122fa565b61167891925060203d8111610684576106758183611e9e565b90836115de565b60405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608490fd5b5086600052600160205260406000203360005260205261146360ff60406000205416905061145a565b34610372576000366003190112610372576020600654604051908152f35b346103725761172a36611f65565b604051606084901b6001600160601b03191660208083019182526034830185905292939161175b8160548101610210565b5190206000526007825260ff906117798260406000205416156124dd565b60018060a01b038095169460405190633ae05cff60e11b825282600483015260249516858201528381604481895afa9182156118f7578491600093611903575b5085604051809881936310bfff0b60e31b835260048301525afa9485156118f7576000956118c8575b50841580159061189457604051956117f987611e68565b600a87526064858801526105dc6040880152600095865b85881660038110156118855761182961ffff918b612ac2565b51168360001904811185166118705761271090840204851061185d576118516118579161245c565b9761245c565b96611810565b9650505050509092505b60405191168152f35b82634e487b7160e01b60005260116004526000fd5b50965050505050909250611867565b60405162461bcd60e51b815260048101859052600d818701526c506f6f6c20697320656d70747960981b6044820152606490fd5b9094508281813d83116118f0575b6118e08183611e9e565b81010312610372575193856117e2565b503d6118d6565b6040513d6000823e3d90fd5b8281939294503d831161192d575b61191b8183611e9e565b810103126103725783905191876117b9565b503d611911565b34610372576020366003190112610372576004356000526008602052602060ff604060002054166040519015158152f35b34610372576000366003190112610372576020600554604051908152f35b34610372576020366003190112610372576004356000526007602052602060ff604060002054166040519015158152f35b3461037257602036600319011261037257600435600052600a6020526111b76119e06040600020611ebf565b604051918291602083526020830190611e09565b346103725760a0366003190112610372576004356001600160401b03811161037257611a24903690600401611db6565b906024356001600160401b03811161037257611a44903690600401611db6565b611a4c611d8a565b6064356001600160401b03811161037257611a6b903690600401611db6565b90956084356001600160401b03811161037257611a8c903690600401611db6565b949092611a9a82841461246d565b611aa581841461246d565b611ab086841461246d565b60005b838110611abc57005b808a611ae68285611adf828f8f98610fd3611ad9918e8e946124b9565b986124b9565b35936124b9565b3560ff811681036103725789831015611cc957601e19883603018360051b8901351215610372578260051b88013588016001600160401b0381351161037257803560051b3603602082011361037257604051606086901b6001600160601b031916602082019081526034820185905290611b638160548101610210565b5190206000526007602052611b8060ff60406000205416156124dd565b600654421015611c8a5760405160208101906001600160601b03198760601b1682528460348201526001600160601b03198c60601b16605482015260ff60f81b8460f81b16606882015260498152611bd781611e83565b519020600454916000905b80358210611c4057505003611c045788610fea92611bff95612589565b611ab3565b60405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21036b2b935b63290383937b7b360611b6044820152606490fd5b9091611c51838335602085016124b9565b359081811015611c7657600052602052611c7060406000205b92612181565b90611be2565b90600052602052611c706040600020611c6a565b60405162461bcd60e51b8152602060048201526017602482015276135a5b9d1a5b99c8191958591b1a5b99481c185cdcd959604a1b6044820152606490fd5b634e487b7160e01b600052603260045260246000fd5b346103725760203660031901126103725760043563ffffffff60e01b811680910361037257602090636cdb3d1360e11b8114908115611d3c575b8115611d2b575b506040519015158152f35b6301ffc9a760e01b14905082611d20565b6303a24d0760e21b81149150611d19565b34610372576040366003190112610372576020611258611d6b611d74565b602435906120fc565b600435906001600160a01b038216820361037257565b604435906001600160a01b038216820361037257565b602435906001600160a01b038216820361037257565b9181601f84011215610372578235916001600160401b038311610372576020808501948460051b01011161037257565b60005b838110611df95750506000910152565b8181015183820152602001611de9565b90602091611e2281518092818552858086019101611de6565b601f01601f1916010190565b90600182811c92168015611e5e575b6020831014611e4857565b634e487b7160e01b600052602260045260246000fd5b91607f1691611e3d565b606081019081106001600160401b03821117610b8357604052565b608081019081106001600160401b03821117610b8357604052565b90601f801991011681019081106001600160401b03821117610b8357604052565b9060405191826000825492611ed384611e2e565b908184526001948581169081600014611f425750600114611eff575b5050611efd92500383611e9e565b565b9093915060005260209081600020936000915b818310611f2a575050611efd93508201013880611eef565b85548884018501529485019487945091830191611f12565b915050611efd94506020925060ff191682840152151560051b8201013880611eef565b6060906003190112610372576001600160a01b03600435818116810361037257916024359160443590811681036103725790565b6001600160401b038111610b835760051b60200190565b81601f8201121561037257803591611fc783611f99565b92611fd56040519485611e9e565b808452602092838086019260051b820101928311610372578301905b828210611fff575050505090565b81358152908301908301611ff1565b6001600160401b038111610b8357601f01601f191660200190565b81601f82011215610372578035906120408261200e565b9261204e6040519485611e9e565b8284526020838301011161037257816000926020809301838601378301015290565b90815180825260208080930193019160005b828110612090575050505090565b835185529381019392810192600101612082565b6003546001600160a01b031633036120b857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160a01b031690811561212957600052600060205260406000209060005260205260406000205490565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b6064820152608490fd5b60001981146113ab5760010190565b805115611cc95760200190565b8051821015611cc95760209160051b010190565b156121b857565b60405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526d195c881bdc88185c1c1c9bdd995960921b6064820152608490fd5b1561221b57565b60405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b1561227557565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608490fd5b919082018092116113ab57565b9081602091031261037257516001600160e01b0319811681036103725790565b60809060208152602860208201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b60608201520190565b60009060033d1161235057565b905060046000803e60005160e01c90565b600060443d106123be57604051600319913d83016004833e81516001600160401b03918282113d6024840111176123c1578184019485519384116123c9573d850101602084870101116123c157506123be92910160200190611e9e565b90565b949350505050565b50949350505050565b60809060208152603460208201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60608201520190565b60405190604082018281106001600160401b03821117610b8357604052600182526020368184013761245882612190565b5290565b60ff1660ff81146113ab5760010190565b1561247457565b60405162461bcd60e51b815260206004820152601960248201527f417272617973206c656e67746873206d757374206d61746368000000000000006044820152606490fd5b9190811015611cc95760051b0190565b356001600160a01b03811681036103725790565b156124e457565b60405162461bcd60e51b815260206004820152600c60248201526b15985d5b1d081c185d5cd95960a21b6044820152606490fd5b916125248183856128b2565b9160ff8316612534575b50505050565b61253d93612589565b3880808061252e565b1561254d57565b60405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b90916125958383612b14565b9060009182526020906008825260ff946040946125b6878787205416612546565b60015b87891688821611156125d057505050505050505050565b806125dd89928585612ad3565b875260098087528888206001600160a01b038716808a5290885289892054909190841615612618575b50506126119061245c565b90506125b9565b90919250612627838686612ad3565b885286528787208188528652878720805460ff1916600117905561264c828585612ad3565b6005805460010190558851916001600160401b0388840181811185821017612850578b5289845281156128645761268283612427565b508a5190818c0190811182821017612850576001916126ab918d528281528a3681830137612190565b52818952888852898920818a5288528989208054906001820180921161283c57918a8a7fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628f989796958f909585965560018151938885528401523392a4873b612715575b50612606565b90919293508951888163f23a6e6160e01b93848252818d8161275d60049a338c84015260249a848c85015260448401526001606484015260a0608484015260a4830190611e09565b03925af18a918161281d575b506127e857505060019061277b612343565b6308c379a0146127b3575b5061279a575061261188915b90388061270f565b875162461bcd60e51b81529081906105f99082016123d2565b6127bb612361565b90816127c75750612786565b8a5162461bcd60e51b81528085018a90529182916105f99190830190611e09565b6001600160e01b03191603905061280457506126118891612792565b875162461bcd60e51b81529081906105f99082016122fa565b6128359192508a3d8c11610684576106758183611e9e565b9038612769565b634e487b7160e01b8b52601160045260248bfd5b634e487b7160e01b8b52604160045260248bfd5b8a5162461bcd60e51b8152600481018a9052602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b60408051606083901b6001600160601b03191660208083019182526034830186905295969493916128e68160548101610210565b5190209560009687526007865260ff96612905888583205416156124dd565b60018060a01b0380931692845195633ae05cff60e11b8752600491818389015260249416848801528887604481885afa968715612ab8579089918498612a83575b50848751809781936310bfff0b60e31b8352868301525afa938415612a79578294612a46575b50831594851595612a15578060646105dc92519a6129898c611e68565b600a8c528b0152890152819782985b8a8a166003811015612a06576129b161ffff9184612ac2565b51168660001904811188166129f3576127109087020488106129e5576129d96129df9161245c565b9961245c565b98612998565b985050505050505050915090565b5050634e487b7160e01b83525060119052fd5b50985050505050505050915090565b5162461bcd60e51b8152908101889052600d818401526c506f6f6c20697320656d70747960981b6044820152606490fd5b9093508781813d8311612a72575b612a5e8183611e9e565b81010312612a6e5751923861296c565b5080fd5b503d612a54565b85513d84823e3d90fd5b8281939299503d8311612ab1575b612a9b8183611e9e565b81010312612aad578890519638612946565b8280fd5b503d612a91565b86513d85823e3d90fd5b906003811015611cc95760051b0190565b916040519160208301936001600160601b03199060601b168452603483015260ff60f81b9060f81b16605482015260358152612b0e81611e68565b51902090565b60405160609190911b6001600160601b031916602082019081526034820192909252612b0e816054810161021056fea2646970667358221220e5dcb37e454255597a4582f57df206bdda23751a1c36d3db67c59a9c7f62371064736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8062fdd58e14611d4d57806301ffc9a714611cdf57806302524936146119f45780630e89341c146119b45780631253c546146119b457806318160ddd146119655780631963658514611983578063204a875a14611965578063230ad5cc146119345780632335570b1461171c57806329dcb0cf146116fe5780632eb2c2d6146113cb5780633917dac51461129757806339731d911461126057806339efae52146112315780634e1273f41461108f5780636e748f97146110735780636ed93dd014611056578063715018a614610ff45780637c7cd78514610f525780638da5cb5b14610f29578063a22cb46514610e45578063a943840a14610da9578063c9e7d50a14610d5c578063ceb120fa14610c2f578063d01f593214610881578063db833f00146107e2578063df773e34146107cb578063e591ed8914610728578063e985e9c5146106d2578063ebf0c717146106b4578063f242432a14610442578063f2fde38b146103775763f9beb7401461019157600080fd5b346103725760a0366003190112610372576101aa611d74565b6024356101b5611d8a565b6064359160ff83168303610372576084356001600160401b038111610372576101e2903690600401611db6565b604051606087901b6001600160601b0319166020808301918252603483018690529793929161021e81605481015b03601f198101835282611e9e565b5190206000526007875261023a60ff60406000205416156124dd565b6006544210156103335790604051878101906001600160601b0319808660601b1683528660348301528760601b16605482015260ff60f81b8860f81b1660688201526049815261028981611e83565b5190209160045492916000915b8083106102ed57505050036102b1576102af9450612589565b005b60405162461bcd60e51b815260048101869052601460248201527324b73b30b634b21036b2b935b63290383937b7b360611b6044820152606490fd5b9091926102fb8483856124b9565b35908181101561032057600052895261031960406000205b93612181565b9190610296565b9060005289526103196040600020610313565b60405162461bcd60e51b8152600481018890526017602482015276135a5b9d1a5b99c8191958591b1a5b99481c185cdcd959604a1b6044820152606490fd5b600080fd5b3461037257602036600319011261037257610390611d74565b6103986120a4565b6001600160a01b039081169081156103ee5760009160035491816001600160601b0360a01b84161760035560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b346103725760a03660031901126103725761045b611d74565b610463611da0565b906064356044356084356001600160401b03811161037257610489903690600401612029565b6001600160a01b0393841693338514801561068b575b6104a8906121b1565b85166104b5811515612214565b6104be83612427565b506104c884612427565b5082600052602095600087526040600020866000528752846040600020546104f28282101561226e565b856000526000895260406000208860005289520360406000205583600052600087526040600020826000528752604060002061052f8682546122cd565b90558186604051868152878a8201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260403392a43b61056b57005b6105af93600087946040519687958694859363f23a6e6160e01b9b8c865233600487015260248601526044850152606484015260a0608484015260a4830190611e09565b03925af16000918161065c575b506106325750506001906105ce612343565b6308c379a0146105fd575b506105e057005b60405162461bcd60e51b8152806105f9600482016123d2565b0390fd5b610605612361565b908161061157506105d9565b6105f960405192839262461bcd60e51b845260048401526024830190611e09565b6001600160e01b0319161490506102af5760405162461bcd60e51b8152806105f9600482016122fa565b61067d919250843d8611610684575b6106758183611e9e565b8101906122da565b90846105bc565b503d61066b565b508460005260016020526040600020336000526020526104a860ff60406000205416905061049f565b34610372576000366003190112610372576020600454604051908152f35b34610372576040366003190112610372576106eb611d74565b6106f3611da0565b9060018060a01b03809116600052600160205260406000209116600052602052602060ff604060002054166040519015158152f35b346103725761073636611f65565b916107428383836128b2565b60ff81161515928361075c575b6020846040519015158152f35b9091925061076a8184612b14565b600052600860205260ff604060002054169283610791575b5050506020915082808061074f565b61079b9350612ad3565b600052600960205260406000209060018060a01b0316600052602052602060ff6040600020541615828080610782565b34610372576102af6107dc36611f65565b91612518565b346103725760403660031901126103725760006107fd611d74565b6024356108086120a4565b604051606083901b6001600160601b0319166020820190815260348201839052906108368160548101610210565b519020835260076020526040808420805460ff1916600117905551916001600160a01b03167f57847ecb0caf57ab272aebf4d12c2e00b717d17e11280577d5302fd2f6a901ae8484a3f35b346103725760603660031901126103725761089a611d74565b6044356001600160401b038111610372576108b9903690600401612029565b906108c26120a4565b6108ce60243582612b14565b600052600860205260ff60406000205416610bf3576108ef60243582612b14565b60005260086020526040600020600160ff198254161790556001905b60ff821692600384116102af57600093807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008181811015610be4575b5050600a906d04ee2d6d415b85acef810000000080821015610bd7575b50662386f26fc1000080821015610bca575b506305f5e10080821015610bbd575b5061271080821015610bb0575b50606480821015610ba3575b501015610b99575b600a602160018701966109b38861200e565b976109c1604051998a611e9e565b8089526109d0601f199161200e565b013660208a01378701015b60001901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304908115610a0a57600a906109db565b505091610a48602060405180968651610a2881858501868b01611de6565b8201610a3c82518093868085019101611de6565b01038087520185611e9e565b610a558160243584612ad3565b600052600a60205260406000208451946001600160401b038611610b8357610a7d8254611e2e565b601f8111610b3f575b50602090601f8711600114610ad057958091610abf959697600092610ac5575b50508160011b916000199060031b1c191617905561245c565b9061090b565b015190508780610aa6565b908260005260206000209160005b601f1989168110610b275750918791600193610abf979899601f19811610610b0e575b505050811b01905561245c565b015160001960f88460031b161c19169055878080610b01565b91926020600181928685015181550194019201610ade565b826000526020600020601f880160051c810160208910610b7c575b601f830160051c82018110610b70575050610a86565b60008155600101610b5a565b5080610b5a565b634e487b7160e01b600052604160045260246000fd5b93600101936109a1565b6002910496019587610999565b600491049601958761098d565b6008910496019587610980565b6010910496019587610971565b602091049601958761095f565b60409750049050600a87610942565b60405162461bcd60e51b81526020600482015260146024820152735661756c7420616c72656164792065786973747360601b6044820152606490fd5b34610372576060366003190112610372576004356001600160401b03811161037257610c5f903690600401612029565b6024359060443590610c6f6120a4565b600654421115610d185781421015610cd35782610cc3927f0321d29aa78655def372c63c55cdf9813510b8e8f5263d109dc5554a405b4ed89460045580600655604051938493606085526060850190611e09565b91602084015260408301520390a1005b60405162461bcd60e51b815260206004820152601b60248201527f4e657720646561646c696e6520616c72656164792070617373656400000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f4d696e74696e6720646561646c696e6520776173206e6f7420726561636865646044820152fd5b3461037257604036600319011261037257610d75611da0565b600435600052600960205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b34610372576040366003190112610372576000610dc4611d74565b602435610dcf6120a4565b604051606083901b6001600160601b031916602082019081526034820183905290610dfd8160548101610210565b519020835260076020526040808420805460ff1916905551916001600160a01b03167f5e8526ee3954b37e3817ddd2a2af5028e0bd006511f190d1deeb43d15d0a18cd8484a3f35b3461037257604036600319011261037257610e5e611d74565b60243590811515809203610372576001600160a01b031690338214610ed257336000526001602052604060002082600052602052604060002060ff1981541660ff83161790556040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b60405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608490fd5b34610372576000366003190112610372576003546040516001600160a01b039091168152602090f35b34610372576060366003190112610372576001600160401b0360043581811161037257610f83903690600401611db6565b9160243590811161037257610f9c903690600401611db6565b90610fa5611d8a565b90610fb183861461246d565b60005b858110610fbd57005b80610fea84610fd8610fd3610fef958b8b6124b9565b6124c9565b610fe38489886124b9565b3590612518565b612181565b610fb4565b346103725760003660031901126103725761100d6120a4565b600380546001600160a01b0319811690915560405160009182906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b346103725760003660031901126103725760206040516127108152f35b3461037257600036600319011261037257602060405160038152f35b34610372576040366003190112610372576004356001600160401b038082116103725736602383011215610372578160040135906110cc82611f99565b926110da6040519485611e9e565b82845260209260248486019160051b8301019136831161037257602401905b828210611212575050506024359081116103725761111b903690600401611fb0565b82518151036111bb5782519261113084611f99565b9361113e6040519586611e9e565b80855261114d601f1991611f99565b01368486013760005b81518110156111a05761119b9061118b6001600160a01b03611178838661219d565b5116611184838761219d565b51906120fc565b611195828861219d565b52612181565b611156565b5050506111b7604051928284938452830190612070565b0390f35b60405162461bcd60e51b815260048101839052602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608490fd5b81356001600160a01b03811681036103725781529084019084016110f9565b3461037257604036600319011261037257602061125861124f611d74565b60243590612b14565b604051908152f35b3461037257606036600319011261037257611279611d74565b6044359060ff82168203610372576020916112589160243590612ad3565b34610372576112a536611f65565b9190604051926112b484611e68565b60603685376112c38284612b14565b6000526020926008845260ff916112e08360406000205416612546565b60019384805b61131d575b5050505050604051918293906000945b6003861061130857606085f35b825115158152948301949181019181016112fb565b908291856113318695848a989c9b9c6128b2565b168682169081116113c157611347828487612ad3565b600090815260098b5260408082206001600160a01b03871683528c52902054871615611384575b506113789061245c565b909192939796976112e6565b909450600019018581116113ab578694856113a48861137894168b612ac2565b529061136e565b634e487b7160e01b600052601160045260246000fd5b50509695966112eb565b346103725760031960a036820112610372576113e5611d74565b906113ee611da0565b906001600160401b039060443582811161037257611410903690600401611fb0565b60643583811161037257611428903690600401611fb0565b9260843590811161037257611441903690600401612029565b6001600160a01b039586169590929033871480156116d5575b611463906121b1565b825185510361167f5785169261147a841515612214565b60005b8351811015611513578061149461150e928661219d565b5161149f828961219d565b5190806000526020906000825260406000208c6000528252826040600020546114ca8282101561226e565b82600052600084528d60406000209060005284520360406000205560005260008152604060002090886000525261150760406000209182546122cd565b9055612181565b61147d565b509094939291938287604051604081527f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb611551604083018a612070565b9180830360208201528061156633948b612070565b0390a43b61157057005b60006020946115d16115c2976115b294604051998a988997889663bc197c8160e01b9e8f89523360048a0152602489015260a0604489015260a4880190612070565b9084878303016064880152612070565b91848303016084850152611e09565b03925af16000918161165f575b5061163757505060016115ef612343565b6308c379a014611600575b6105e057005b611608612361565b8061161357506115fa565b60405162461bcd60e51b8152602060048201529081906105f9906024830190611e09565b6001600160e01b031916146102af5760405162461bcd60e51b8152806105f9600482016122fa565b61167891925060203d8111610684576106758183611e9e565b90836115de565b60405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608490fd5b5086600052600160205260406000203360005260205261146360ff60406000205416905061145a565b34610372576000366003190112610372576020600654604051908152f35b346103725761172a36611f65565b604051606084901b6001600160601b03191660208083019182526034830185905292939161175b8160548101610210565b5190206000526007825260ff906117798260406000205416156124dd565b60018060a01b038095169460405190633ae05cff60e11b825282600483015260249516858201528381604481895afa9182156118f7578491600093611903575b5085604051809881936310bfff0b60e31b835260048301525afa9485156118f7576000956118c8575b50841580159061189457604051956117f987611e68565b600a87526064858801526105dc6040880152600095865b85881660038110156118855761182961ffff918b612ac2565b51168360001904811185166118705761271090840204851061185d576118516118579161245c565b9761245c565b96611810565b9650505050509092505b60405191168152f35b82634e487b7160e01b60005260116004526000fd5b50965050505050909250611867565b60405162461bcd60e51b815260048101859052600d818701526c506f6f6c20697320656d70747960981b6044820152606490fd5b9094508281813d83116118f0575b6118e08183611e9e565b81010312610372575193856117e2565b503d6118d6565b6040513d6000823e3d90fd5b8281939294503d831161192d575b61191b8183611e9e565b810103126103725783905191876117b9565b503d611911565b34610372576020366003190112610372576004356000526008602052602060ff604060002054166040519015158152f35b34610372576000366003190112610372576020600554604051908152f35b34610372576020366003190112610372576004356000526007602052602060ff604060002054166040519015158152f35b3461037257602036600319011261037257600435600052600a6020526111b76119e06040600020611ebf565b604051918291602083526020830190611e09565b346103725760a0366003190112610372576004356001600160401b03811161037257611a24903690600401611db6565b906024356001600160401b03811161037257611a44903690600401611db6565b611a4c611d8a565b6064356001600160401b03811161037257611a6b903690600401611db6565b90956084356001600160401b03811161037257611a8c903690600401611db6565b949092611a9a82841461246d565b611aa581841461246d565b611ab086841461246d565b60005b838110611abc57005b808a611ae68285611adf828f8f98610fd3611ad9918e8e946124b9565b986124b9565b35936124b9565b3560ff811681036103725789831015611cc957601e19883603018360051b8901351215610372578260051b88013588016001600160401b0381351161037257803560051b3603602082011361037257604051606086901b6001600160601b031916602082019081526034820185905290611b638160548101610210565b5190206000526007602052611b8060ff60406000205416156124dd565b600654421015611c8a5760405160208101906001600160601b03198760601b1682528460348201526001600160601b03198c60601b16605482015260ff60f81b8460f81b16606882015260498152611bd781611e83565b519020600454916000905b80358210611c4057505003611c045788610fea92611bff95612589565b611ab3565b60405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21036b2b935b63290383937b7b360611b6044820152606490fd5b9091611c51838335602085016124b9565b359081811015611c7657600052602052611c7060406000205b92612181565b90611be2565b90600052602052611c706040600020611c6a565b60405162461bcd60e51b8152602060048201526017602482015276135a5b9d1a5b99c8191958591b1a5b99481c185cdcd959604a1b6044820152606490fd5b634e487b7160e01b600052603260045260246000fd5b346103725760203660031901126103725760043563ffffffff60e01b811680910361037257602090636cdb3d1360e11b8114908115611d3c575b8115611d2b575b506040519015158152f35b6301ffc9a760e01b14905082611d20565b6303a24d0760e21b81149150611d19565b34610372576040366003190112610372576020611258611d6b611d74565b602435906120fc565b600435906001600160a01b038216820361037257565b604435906001600160a01b038216820361037257565b602435906001600160a01b038216820361037257565b9181601f84011215610372578235916001600160401b038311610372576020808501948460051b01011161037257565b60005b838110611df95750506000910152565b8181015183820152602001611de9565b90602091611e2281518092818552858086019101611de6565b601f01601f1916010190565b90600182811c92168015611e5e575b6020831014611e4857565b634e487b7160e01b600052602260045260246000fd5b91607f1691611e3d565b606081019081106001600160401b03821117610b8357604052565b608081019081106001600160401b03821117610b8357604052565b90601f801991011681019081106001600160401b03821117610b8357604052565b9060405191826000825492611ed384611e2e565b908184526001948581169081600014611f425750600114611eff575b5050611efd92500383611e9e565b565b9093915060005260209081600020936000915b818310611f2a575050611efd93508201013880611eef565b85548884018501529485019487945091830191611f12565b915050611efd94506020925060ff191682840152151560051b8201013880611eef565b6060906003190112610372576001600160a01b03600435818116810361037257916024359160443590811681036103725790565b6001600160401b038111610b835760051b60200190565b81601f8201121561037257803591611fc783611f99565b92611fd56040519485611e9e565b808452602092838086019260051b820101928311610372578301905b828210611fff575050505090565b81358152908301908301611ff1565b6001600160401b038111610b8357601f01601f191660200190565b81601f82011215610372578035906120408261200e565b9261204e6040519485611e9e565b8284526020838301011161037257816000926020809301838601378301015290565b90815180825260208080930193019160005b828110612090575050505090565b835185529381019392810192600101612082565b6003546001600160a01b031633036120b857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160a01b031690811561212957600052600060205260406000209060005260205260406000205490565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b6064820152608490fd5b60001981146113ab5760010190565b805115611cc95760200190565b8051821015611cc95760209160051b010190565b156121b857565b60405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526d195c881bdc88185c1c1c9bdd995960921b6064820152608490fd5b1561221b57565b60405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b1561227557565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608490fd5b919082018092116113ab57565b9081602091031261037257516001600160e01b0319811681036103725790565b60809060208152602860208201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b60608201520190565b60009060033d1161235057565b905060046000803e60005160e01c90565b600060443d106123be57604051600319913d83016004833e81516001600160401b03918282113d6024840111176123c1578184019485519384116123c9573d850101602084870101116123c157506123be92910160200190611e9e565b90565b949350505050565b50949350505050565b60809060208152603460208201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60608201520190565b60405190604082018281106001600160401b03821117610b8357604052600182526020368184013761245882612190565b5290565b60ff1660ff81146113ab5760010190565b1561247457565b60405162461bcd60e51b815260206004820152601960248201527f417272617973206c656e67746873206d757374206d61746368000000000000006044820152606490fd5b9190811015611cc95760051b0190565b356001600160a01b03811681036103725790565b156124e457565b60405162461bcd60e51b815260206004820152600c60248201526b15985d5b1d081c185d5cd95960a21b6044820152606490fd5b916125248183856128b2565b9160ff8316612534575b50505050565b61253d93612589565b3880808061252e565b1561254d57565b60405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b90916125958383612b14565b9060009182526020906008825260ff946040946125b6878787205416612546565b60015b87891688821611156125d057505050505050505050565b806125dd89928585612ad3565b875260098087528888206001600160a01b038716808a5290885289892054909190841615612618575b50506126119061245c565b90506125b9565b90919250612627838686612ad3565b885286528787208188528652878720805460ff1916600117905561264c828585612ad3565b6005805460010190558851916001600160401b0388840181811185821017612850578b5289845281156128645761268283612427565b508a5190818c0190811182821017612850576001916126ab918d528281528a3681830137612190565b52818952888852898920818a5288528989208054906001820180921161283c57918a8a7fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628f989796958f909585965560018151938885528401523392a4873b612715575b50612606565b90919293508951888163f23a6e6160e01b93848252818d8161275d60049a338c84015260249a848c85015260448401526001606484015260a0608484015260a4830190611e09565b03925af18a918161281d575b506127e857505060019061277b612343565b6308c379a0146127b3575b5061279a575061261188915b90388061270f565b875162461bcd60e51b81529081906105f99082016123d2565b6127bb612361565b90816127c75750612786565b8a5162461bcd60e51b81528085018a90529182916105f99190830190611e09565b6001600160e01b03191603905061280457506126118891612792565b875162461bcd60e51b81529081906105f99082016122fa565b6128359192508a3d8c11610684576106758183611e9e565b9038612769565b634e487b7160e01b8b52601160045260248bfd5b634e487b7160e01b8b52604160045260248bfd5b8a5162461bcd60e51b8152600481018a9052602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b60408051606083901b6001600160601b03191660208083019182526034830186905295969493916128e68160548101610210565b5190209560009687526007865260ff96612905888583205416156124dd565b60018060a01b0380931692845195633ae05cff60e11b8752600491818389015260249416848801528887604481885afa968715612ab8579089918498612a83575b50848751809781936310bfff0b60e31b8352868301525afa938415612a79578294612a46575b50831594851595612a15578060646105dc92519a6129898c611e68565b600a8c528b0152890152819782985b8a8a166003811015612a06576129b161ffff9184612ac2565b51168660001904811188166129f3576127109087020488106129e5576129d96129df9161245c565b9961245c565b98612998565b985050505050505050915090565b5050634e487b7160e01b83525060119052fd5b50985050505050505050915090565b5162461bcd60e51b8152908101889052600d818401526c506f6f6c20697320656d70747960981b6044820152606490fd5b9093508781813d8311612a72575b612a5e8183611e9e565b81010312612a6e5751923861296c565b5080fd5b503d612a54565b85513d84823e3d90fd5b8281939299503d8311612ab1575b612a9b8183611e9e565b81010312612aad578890519638612946565b8280fd5b503d612a91565b86513d85823e3d90fd5b906003811015611cc95760051b0190565b916040519160208301936001600160601b03199060601b168452603483015260ff60f81b9060f81b16605482015260358152612b0e81611e68565b51902090565b60405160609190911b6001600160601b031916602082019081526034820192909252612b0e816054810161021056fea2646970667358221220e5dcb37e454255597a4582f57df206bdda23751a1c36d3db67c59a9c7f62371064736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply()": {
        "details": "Returns thze total tokens minted so far."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateTree(string,bytes32,uint256)": {
        "details": "Update the merkle tree root only after  the deadline for minting has been reached.",
        "params": {
          "_deadline": "number of days to the next minting deadline.",
          "_merkleTreeIPFSRef": "new merkle tree ipfs reference.",
          "_root": "new merkle tree root to use for verifying."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6358,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6364,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6366,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 5155,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 27390,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "root",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 27393,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "totalSupplyCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Counter)10208_storage"
      },
      {
        "astId": 27395,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "deadline",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 27405,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "pausedVaults",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 27409,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "vaultsRegistered",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 27415,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "tokensRedeemed",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 27419,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "uris",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)10208_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 10207,
            "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}