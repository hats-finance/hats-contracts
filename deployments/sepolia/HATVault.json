{
  "address": "0x22Ba5c53585B1cEb914bEbCc15533fc3E633Ad05",
  "abi": [
    {
      "inputs": [],
      "name": "AmountCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountOfSharesMustBeMoreThanMinimalAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotTransferToAnotherUserWithActiveWithdrawRequest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotTransferToSelf",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotUnpauseDestroyedVault",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositSlippageProtection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DuplicatedRewardController",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintSlippageProtection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyClaimsManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyFeeSetter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRegistryOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedeemMoreThanMax",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedeemSlippageProtection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SystemInEmergencyPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotStartedYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawSlippageProtection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawalFeeTooBig",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRewardController",
          "name": "_newRewardController",
          "type": "address"
        }
      ],
      "name": "AddRewardController",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_depositPause",
          "type": "bool"
        }
      ],
      "name": "SetDepositPause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "SetVaultDescription",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_withdrawPaused",
          "type": "bool"
        }
      ],
      "name": "SetWithdrawPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "SetWithdrawalFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "VaultDestroyed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "VaultPayout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "VaultStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawEnableTime",
          "type": "uint256"
        }
      ],
      "name": "WithdrawRequest",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_UINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WITHDRAWAL_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMAL_AMOUNT_OF_SHARES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRewardController",
          "name": "_rewardController",
          "type": "address"
        }
      ],
      "name": "addRewardController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimsManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minShares",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositPause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destroyVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimsManager",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "contract IRewardController[]",
              "name": "rewardControllers",
              "type": "address[]"
            },
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isPaused",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "descriptionHash",
              "type": "string"
            }
          ],
          "internalType": "struct IHATVault.VaultInitParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "makePayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxAssets",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeemAndFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdrawAndFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minAssets",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minAssets",
          "type": "uint256"
        }
      ],
      "name": "redeemAndClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeemAndClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IHATVaultsRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardControllers",
      "outputs": [
        {
          "internalType": "contract IRewardController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_depositPause",
          "type": "bool"
        }
      ],
      "name": "setDepositPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "setVaultDescription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_withdrawPaused",
          "type": "bool"
        }
      ],
      "name": "setWithdrawPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxShares",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxShares",
          "type": "uint256"
        }
      ],
      "name": "withdrawAndClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdrawAndClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawEnableStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcd10535764975dd9c094f3bc4f4110e6d1af276e1e10d22b0e69685b1d68308d",
  "receipt": {
    "to": null,
    "from": "0x1885B7c7a3AE1F35BA71C0392C13153A95c4914f",
    "contractAddress": "0x22Ba5c53585B1cEb914bEbCc15533fc3E633Ad05",
    "transactionIndex": 132,
    "gasUsed": "3134882",
    "logsBloom": "0x
    "blockHash": "0xd8c6ea6eaef741f424c51751c3d6ecece681f15dca62e8206f49b7449114aa45",
    "transactionHash": "0xcd10535764975dd9c094f3bc4f4110e6d1af276e1e10d22b0e69685b1d68308d",
    "logs": [],
    "blockNumber": 5558674,
    "cumulativeGasUsed": "16247264",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "e2dd19fbd28890679930fe6b1d01ee82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AmountCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountOfSharesMustBeMoreThanMinimalAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotTransferToAnotherUserWithActiveWithdrawRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotTransferToSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotUnpauseDestroyedVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositSlippageProtection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicatedRewardController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintSlippageProtection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyClaimsManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyFeeSetter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRegistryOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemMoreThanMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemSlippageProtection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SystemInEmergencyPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotStartedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawSlippageProtection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalFeeTooBig\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRewardController\",\"name\":\"_newRewardController\",\"type\":\"address\"}],\"name\":\"AddRewardController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_depositPause\",\"type\":\"bool\"}],\"name\":\"SetDepositPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"SetVaultDescription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_withdrawPaused\",\"type\":\"bool\"}],\"name\":\"SetWithdrawPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VaultDestroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"VaultPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VaultStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawEnableTime\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAWAL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMAL_AMOUNT_OF_SHARES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardController\",\"name\":\"_rewardController\",\"type\":\"address\"}],\"name\":\"addRewardController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimsManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minShares\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimsManager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IRewardController[]\",\"name\":\"rewardControllers\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"descriptionHash\",\"type\":\"string\"}],\"internalType\":\"struct IHATVault.VaultInitParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"makePayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeemAndFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdrawAndFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAssets\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAssets\",\"type\":\"uint256\"}],\"name\":\"redeemAndClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeemAndClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IHATVaultsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardControllers\",\"outputs\":[{\"internalType\":\"contract IRewardController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_depositPause\",\"type\":\"bool\"}],\"name\":\"setDepositPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"setVaultDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withdrawPaused\",\"type\":\"bool\"}],\"name\":\"setWithdrawPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"name\":\"withdrawAndClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawAndClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawEnableStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Hats.finance\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"See {IERC4626-asset}. \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4626-convertToAssets}. \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4626-convertToShares}. \"},\"decimals()\":{\"details\":\"Decimals are read from the underlying asset in the constructor and cached. If this fails (e.g., the asset has not been created yet), the cached value is set to a default obtained by `super.decimals()` (which depends on inheritance but is most likely 18). Override this function in order to set a guaranteed hardcoded value. See {IERC20Metadata-decimals}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mint(uint256,address)\":{\"details\":\"See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"previewDeposit(uint256)\":{\"details\":\"See {IERC4626-previewDeposit}. \"},\"previewMint(uint256)\":{\"details\":\"See {IERC4626-previewMint}. \"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"See {IERC4626-totalAssets}. \"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"VERSION\":{\"return\":\"The vault's version\",\"returns\":{\"_0\":\"The vault's version\"}},\"claimsManager\":{\"return\":\"The registry's address\",\"returns\":{\"_0\":\"The registry's address\"}},\"registry\":{\"return\":\"The registry's address\",\"returns\":{\"_0\":\"The registry's address\"}}},\"title\":\"A Hats.finance vault which holds the funds for a specific project's bug bounties\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"VERSION()\":{\"notice\":\"Returns the vault's version\"},\"addRewardController(address)\":{\"notice\":\"See {IHATVault-addRewardController}. \"},\"claimsManager()\":{\"notice\":\"Returns the vault's registry\"},\"deposit(uint256,address)\":{\"notice\":\"See {IHATVault-deposit}. \"},\"deposit(uint256,address,uint256)\":{\"notice\":\"See {IHATVault-deposit}. \"},\"destroyVault()\":{\"notice\":\"See {IHATVault-destroyVault}. \"},\"emergencyWithdraw(address)\":{\"notice\":\"See {IHATVault-emergencyWithdraw}. \"},\"initialize(address,(string,string,address[],address,address,bool,string))\":{\"notice\":\"See {IHATVault-initialize}. \"},\"makePayout(uint256)\":{\"notice\":\"See {IHATVault-approveClaim}. \"},\"maxDeposit(address)\":{\"notice\":\"See {IERC4626Upgradeable-maxDeposit}. \"},\"maxMint(address)\":{\"notice\":\"See {IERC4626Upgradeable-maxMint}. \"},\"maxRedeem(address)\":{\"notice\":\"See {IERC4626Upgradeable-maxRedeem}. \"},\"maxWithdraw(address)\":{\"notice\":\"See {IERC4626Upgradeable-maxWithdraw}. \"},\"mint(uint256,address,uint256)\":{\"notice\":\"See {IHATVault-mint}. \"},\"previewRedeem(uint256)\":{\"notice\":\"See {IERC4626Upgradeable-previewRedeem}. \"},\"previewRedeemAndFee(uint256)\":{\"notice\":\"See {IHATVault-previewRedeemAndFee}. \"},\"previewWithdraw(uint256)\":{\"notice\":\"See {IERC4626Upgradeable-previewWithdraw}. \"},\"previewWithdrawAndFee(uint256)\":{\"notice\":\"See {IHATVault-previewWithdrawAndFee}. \"},\"redeem(uint256,address,address)\":{\"notice\":\"See {IHATVault-redeem}. \"},\"redeem(uint256,address,address,uint256)\":{\"notice\":\"See {IHATVault-redeem}. \"},\"redeemAndClaim(uint256,address,address)\":{\"notice\":\"See {IHATVault-redeemAndClaim}. \"},\"redeemAndClaim(uint256,address,address,uint256)\":{\"notice\":\"See {IHATVault-redeemAndClaim}. \"},\"registry()\":{\"notice\":\"Returns the vault's registry\"},\"setDepositPause(bool)\":{\"notice\":\"See {IHATVault-setDepositPause}. \"},\"setVaultDescription(string)\":{\"notice\":\"See {IHATVault-setVaultDescription}. \"},\"setWithdrawPaused(bool)\":{\"notice\":\"See {IHATVault-setWithdrawPaused}. \"},\"setWithdrawalFee(uint256)\":{\"notice\":\"See {IHATVault-setWithdrawalFee}. \"},\"startVault()\":{\"notice\":\"See {IHATVault-destroyVault}. \"},\"withdraw(uint256,address,address)\":{\"notice\":\"See {IHATVault-withdraw}. \"},\"withdraw(uint256,address,address,uint256)\":{\"notice\":\"See {IHATVault-withdraw}. \"},\"withdrawAndClaim(uint256,address,address)\":{\"notice\":\"See {IHATVault-withdrawAndClaim}. \"},\"withdrawAndClaim(uint256,address,address,uint256)\":{\"notice\":\"See {IHATVault-withdrawAndClaim}. \"},\"withdrawRequest()\":{\"notice\":\"See {IHATVault-withdrawRequest}. \"}},\"notice\":\"The HATVault can be deposited into in a permissionless manner using the vault\\u2019s native token. Anyone can deposit the vault's native token into the vault and  recieve shares for it. Shares represent the user's relative part in the vault, and when a bounty is paid out, users lose part of their deposits (based on percentage paid), but keep their share of the vault. Users also receive rewards for their deposits, which can be claimed at any time. To withdraw previously deposited tokens, a user must first send a withdraw request, and the withdrawal will be made available after a pending period. Withdrawals are not permitted during safety periods or while there is an  active claim for a bounty payout. This project is open-source and can be found at: https://github.com/hats-finance/hats-contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HATVault.sol\":\"HATVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626Upgradeable is IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x8177581667dcba94ed9eaf94aa2f4fbf5f9b908a40c98bf0de4578a92a5a47fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../../../interfaces/IERC4626Upgradeable.sol\\\";\\nimport \\\"../../../utils/math/MathUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * CAUTION: When the vault is empty or nearly empty, deposits are at high risk of being stolen through frontrunning with\\n * a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * _Available since v4.7._\\n */\\nabstract contract ERC4626Upgradeable is Initializable, ERC20Upgradeable, IERC4626Upgradeable {\\n    using MathUpgradeable for uint256;\\n\\n    IERC20Upgradeable private _asset;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    function __ERC4626_init(IERC20Upgradeable asset_) internal onlyInitializing {\\n        __ERC4626_init_unchained(asset_);\\n    }\\n\\n    function __ERC4626_init_unchained(IERC20Upgradeable asset_) internal onlyInitializing {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _decimals = success ? assetDecimals : super.decimals();\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(IERC20Upgradeable asset_) private view returns (bool, uint8) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\\n            abi.encodeWithSelector(IERC20MetadataUpgradeable.decimals.selector)\\n        );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are read from the underlying asset in the constructor and cached. If this fails (e.g., the asset\\n     * has not been created yet), the cached value is set to a default obtained by `super.decimals()` (which depends on\\n     * inheritance but is most likely 18). Override this function in order to set a guaranteed hardcoded value.\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals() public view virtual override(IERC20MetadataUpgradeable, ERC20Upgradeable) returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual override returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual override returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(uint256 assets) public view virtual override returns (uint256 shares) {\\n        return _convertToShares(assets, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256 assets) {\\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(address) public view virtual override returns (uint256) {\\n        return _isVaultCollateralized() ? type(uint256).max : 0;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual override returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, MathUpgradeable.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\\n        require(assets <= maxDeposit(receiver), \\\"ERC4626: deposit more than max\\\");\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}.\\n     *\\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\\n     * In this case, the shares will be minted without requiring any assets to be deposited.\\n     */\\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        require(assets <= maxWithdraw(owner), \\\"ERC4626: withdraw more than max\\\");\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     *\\n     * Will revert if assets > 0, totalSupply > 0 and totalAssets = 0. That corresponds to a case where any asset\\n     * would represent an infinite amount of shares.\\n     */\\n    function _convertToShares(uint256 assets, MathUpgradeable.Rounding rounding) internal view virtual returns (uint256 shares) {\\n        uint256 supply = totalSupply();\\n        return\\n            (assets == 0 || supply == 0)\\n                ? _initialConvertToShares(assets, rounding)\\n                : assets.mulDiv(supply, totalAssets(), rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) to apply when the vault is empty.\\n     *\\n     * NOTE: Make sure to keep this function consistent with {_initialConvertToAssets} when overriding it.\\n     */\\n    function _initialConvertToShares(\\n        uint256 assets,\\n        MathUpgradeable.Rounding /*rounding*/\\n    ) internal view virtual returns (uint256 shares) {\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, MathUpgradeable.Rounding rounding) internal view virtual returns (uint256 assets) {\\n        uint256 supply = totalSupply();\\n        return\\n            (supply == 0) ? _initialConvertToAssets(shares, rounding) : shares.mulDiv(totalAssets(), supply, rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) to apply when the vault is empty.\\n     *\\n     * NOTE: Make sure to keep this function consistent with {_initialConvertToShares} when overriding it.\\n     */\\n    function _initialConvertToAssets(\\n        uint256 shares,\\n        MathUpgradeable.Rounding /*rounding*/\\n    ) internal view virtual returns (uint256 assets) {\\n        return shares;\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reenterancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20Upgradeable.safeTransferFrom(_asset, caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20Upgradeable.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Checks if vault is \\\"healthy\\\" in the sense of having assets backing the circulating shares.\\n     */\\n    function _isVaultCollateralized() private view returns (bool) {\\n        return totalAssets() > 0 || totalSupply() == 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc7ab3e2a24a5013a9ff2544ba279817cfe72d30e342dc1a1f826cd84a7bdb567\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/HATVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./tokenlock/TokenLockFactory.sol\\\";\\nimport \\\"./interfaces/IHATVault.sol\\\";\\nimport \\\"./interfaces/IHATClaimsManager.sol\\\";\\nimport \\\"./interfaces/IRewardController.sol\\\";\\nimport \\\"./HATVaultsRegistry.sol\\\";\\n\\n/** @title A Hats.finance vault which holds the funds for a specific project's\\n* bug bounties\\n* @author Hats.finance\\n* @notice The HATVault can be deposited into in a permissionless manner using\\n* the vault\\u2019s native token.\\n*\\n* Anyone can deposit the vault's native token into the vault and \\n* recieve shares for it. Shares represent the user's relative part in the\\n* vault, and when a bounty is paid out, users lose part of their deposits\\n* (based on percentage paid), but keep their share of the vault.\\n* Users also receive rewards for their deposits, which can be claimed at any\\n* time.\\n* To withdraw previously deposited tokens, a user must first send a withdraw\\n* request, and the withdrawal will be made available after a pending period.\\n* Withdrawals are not permitted during safety periods or while there is an \\n* active claim for a bounty payout.\\n*\\n* This project is open-source and can be found at:\\n* https://github.com/hats-finance/hats-contracts\\n*/\\ncontract HATVault is IHATVault, ERC4626Upgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using MathUpgradeable for uint256;\\n\\n    string public constant VERSION = \\\"3.0\\\";\\n    uint256 public constant MAX_UINT = type(uint256).max;\\n    uint256 public constant HUNDRED_PERCENT = 1e4;\\n    uint256 public constant MAX_WITHDRAWAL_FEE = 2e2; // Max fee is 2%\\n    uint256 public constant MINIMAL_AMOUNT_OF_SHARES = 1e3; // to reduce rounding errors, the number of shares is either 0, or > than this number\\n\\n    address public claimsManager;\\n    IHATVaultsRegistry public registry;\\n\\n    // Time of when withdrawal period starts for every user that has an\\n    // active withdraw request. (time when last withdraw request pending \\n    // period ended, or 0 if last action was deposit or withdraw)\\n    mapping(address => uint256) public withdrawEnableStartTime;\\n    IRewardController[] public rewardControllers;\\n    uint256 public withdrawalFee;\\n    bool public vaultStarted;\\n    bool public depositPause;\\n    bool public withdrawPaused;\\n    bool private _isEmergencyWithdraw;\\n    bool private _vaultDestroyed;\\n\\n    modifier onlyClaimsManager() {\\n        if (claimsManager != _msgSender()) revert OnlyClaimsManager();\\n        _;\\n    }\\n\\n    modifier onlyRegistryOwner() {\\n        if (registry.owner() != _msgSender()) revert OnlyRegistryOwner();\\n        _;\\n    }\\n\\n    modifier onlyFeeSetter() {\\n        if (registry.feeSetter() != msg.sender) revert OnlyFeeSetter();\\n        _;\\n    }\\n\\n    /** @notice See {IHATVault-initialize}. */\\n    function initialize(address _claimsManager, IHATVault.VaultInitParams calldata _params) external initializer {\\n        __ERC20_init(string.concat(\\\"Hats Vault \\\", _params.name), string.concat(\\\"HAT\\\", _params.symbol));\\n        __ERC4626_init(IERC20MetadataUpgradeable(address(_params.asset)));\\n        __ReentrancyGuard_init();\\n        _transferOwnership(_params.owner);\\n        for (uint256 i = 0; i < _params.rewardControllers.length;) { \\n            _addRewardController(_params.rewardControllers[i]);\\n            unchecked { ++i; }\\n        }\\n        claimsManager = _claimsManager;\\n        depositPause = _params.isPaused;\\n        registry = IHATVaultsRegistry(_msgSender());\\n        emit SetVaultDescription(_params.descriptionHash);\\n    }\\n\\n    /** @notice See {IHATVault-approveClaim}. */\\n    function makePayout(uint256 _amount) external onlyClaimsManager {\\n        IERC20(asset()).safeTransfer(address(_msgSender()), _amount);\\n        emit VaultPayout(_amount);\\n    }\\n\\n    /** @notice See {IHATVault-setWithdrawPaused}. */\\n    function setWithdrawPaused(bool _withdrawPaused) external onlyClaimsManager {\\n        withdrawPaused = _withdrawPaused;\\n        emit SetWithdrawPaused(_withdrawPaused);\\n    }\\n\\n    /** @notice See {IHATVault-destroyVault}. */\\n    function startVault() external onlyClaimsManager {\\n        vaultStarted = true;\\n        emit VaultStarted();\\n    }\\n\\n    /** @notice See {IHATVault-destroyVault}. */\\n    function destroyVault() external onlyClaimsManager {\\n        depositPause = true;\\n        _vaultDestroyed = true;\\n        emit VaultDestroyed();\\n    }\\n\\n    /** @notice See {IHATVault-addRewardController}. */\\n    function addRewardController(IRewardController _rewardController) external onlyRegistryOwner {\\n        _addRewardController(_rewardController);\\n    }\\n\\n    /** @notice See {IHATVault-setDepositPause}. */\\n    function setDepositPause(bool _depositPause) external onlyOwner {\\n        if (_vaultDestroyed)\\n            revert CannotUnpauseDestroyedVault();\\n        depositPause = _depositPause;\\n        emit SetDepositPause(_depositPause);\\n    }\\n\\n    /** @notice See {IHATVault-setVaultDescription}. */\\n    function setVaultDescription(string calldata _descriptionHash) external onlyRegistryOwner {\\n        emit SetVaultDescription(_descriptionHash);\\n    }\\n\\n    /** @notice See {IHATVault-setWithdrawalFee}. */\\n    function setWithdrawalFee(uint256 _fee) external onlyFeeSetter {\\n        if (_fee > MAX_WITHDRAWAL_FEE) revert WithdrawalFeeTooBig();\\n        withdrawalFee = _fee;\\n        emit SetWithdrawalFee(_fee);\\n    }\\n\\n    /* -------------------------------------------------------------------------------- */\\n\\n\\n    /* ---------------------------------- Vault --------------------------------------- */\\n\\n    /** @notice See {IHATVault-withdrawRequest}. */\\n    function withdrawRequest() external nonReentrant {\\n        // set the withdrawEnableStartTime time to be withdrawRequestPendingPeriod from now\\n        // solhint-disable-next-line not-rely-on-time\\n        uint256 _withdrawEnableStartTime = block.timestamp + registry.getWithdrawRequestPendingPeriod();\\n        address msgSender = _msgSender();\\n        withdrawEnableStartTime[msgSender] = _withdrawEnableStartTime;\\n        emit WithdrawRequest(msgSender, _withdrawEnableStartTime);\\n    }\\n\\n    /** @notice See {IHATVault-withdrawAndClaim}. */\\n    function withdrawAndClaim(uint256 assets, address receiver, address owner) external returns (uint256 shares) {\\n        shares = withdraw(assets, receiver, owner);\\n        _claimRewards(owner);\\n    }\\n\\n    /** @notice See {IHATVault-redeemAndClaim}. */\\n    function redeemAndClaim(uint256 shares, address receiver, address owner) external returns (uint256 assets) {\\n        assets = redeem(shares, receiver, owner);\\n        _claimRewards(owner);\\n    }\\n\\n    /** @notice See {IHATVault-emergencyWithdraw}. */\\n    function emergencyWithdraw(address receiver) external returns (uint256 assets) {\\n        _isEmergencyWithdraw = true;\\n        address msgSender = _msgSender();\\n        assets = redeem(balanceOf(msgSender), receiver, msgSender);\\n        _isEmergencyWithdraw = false;\\n    }\\n\\n    /** @notice See {IHATVault-withdraw}. */\\n    function withdraw(uint256 assets, address receiver, address owner) \\n        public override(IHATVault, ERC4626Upgradeable) virtual returns (uint256) {\\n        (uint256 _shares, uint256 _fee) = previewWithdrawAndFee(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, _shares, _fee);\\n\\n        return _shares;\\n    }\\n\\n    /** @notice See {IHATVault-redeem}. */\\n    function redeem(uint256 shares, address receiver, address owner) \\n        public override(IHATVault, ERC4626Upgradeable) virtual returns (uint256) {\\n        (uint256 _assets, uint256 _fee) = previewRedeemAndFee(shares);\\n        _withdraw(_msgSender(), receiver, owner, _assets, shares, _fee);\\n\\n        return _assets;\\n    }\\n\\n    /** @notice See {IHATVault-deposit}. */\\n    function deposit(uint256 assets, address receiver) public override(IHATVault, ERC4626Upgradeable) virtual returns (uint256) {\\n        return super.deposit(assets, receiver);\\n    }\\n\\n    /** @notice See {IHATVault-withdraw}. */\\n    function withdraw(uint256 assets, address receiver, address owner, uint256 maxShares) public virtual returns (uint256) {\\n        uint256 shares = withdraw(assets, receiver, owner);\\n        if (shares > maxShares) revert WithdrawSlippageProtection();\\n        return shares;\\n    }\\n\\n    /** @notice See {IHATVault-redeem}. */\\n    function redeem(uint256 shares, address receiver, address owner, uint256 minAssets) public virtual returns (uint256) {\\n        uint256 assets = redeem(shares, receiver, owner);\\n        if (assets < minAssets) revert RedeemSlippageProtection();\\n        return assets;\\n    }\\n\\n    /** @notice See {IHATVault-withdrawAndClaim}. */\\n    function withdrawAndClaim(uint256 assets, address receiver, address owner, uint256 maxShares) external returns (uint256 shares) {\\n        shares = withdraw(assets, receiver, owner, maxShares);\\n        _claimRewards(owner);\\n    }\\n\\n    /** @notice See {IHATVault-redeemAndClaim}. */\\n    function redeemAndClaim(uint256 shares, address receiver, address owner, uint256 minAssets) external returns (uint256 assets) {\\n        assets = redeem(shares, receiver, owner, minAssets);\\n        _claimRewards(owner);\\n    }\\n\\n    /** @notice See {IHATVault-deposit}. */\\n    function deposit(uint256 assets, address receiver, uint256 minShares) external virtual returns (uint256) {\\n        uint256 shares = deposit(assets, receiver);\\n        if (shares < minShares) revert DepositSlippageProtection();\\n        return shares;\\n    }\\n\\n    /** @notice See {IHATVault-mint}. */\\n    function mint(uint256 shares, address receiver, uint256 maxAssets) external virtual returns (uint256) {\\n        uint256 assets = mint(shares, receiver);\\n        if (assets > maxAssets) revert MintSlippageProtection();\\n        return assets;\\n    }\\n\\n    /** @notice See {IERC4626Upgradeable-maxDeposit}. */\\n    function maxDeposit(address) public view virtual override(IERC4626Upgradeable, ERC4626Upgradeable) returns (uint256) {\\n        return depositPause ? 0 : MAX_UINT;\\n    }\\n\\n    /** @notice See {IERC4626Upgradeable-maxMint}. */\\n    function maxMint(address) public view virtual override(IERC4626Upgradeable, ERC4626Upgradeable) returns (uint256) {\\n        return depositPause ? 0 : MAX_UINT;\\n    }\\n\\n    /** @notice See {IERC4626Upgradeable-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual override(IERC4626Upgradeable, ERC4626Upgradeable) returns (uint256) {\\n        if (withdrawPaused || !_isWithdrawEnabledForUser(owner)) return 0;\\n        return previewRedeem(balanceOf(owner));\\n    }\\n\\n    /** @notice See {IERC4626Upgradeable-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual override(IERC4626Upgradeable, ERC4626Upgradeable) returns (uint256) {\\n        if (withdrawPaused || !_isWithdrawEnabledForUser(owner)) return 0;\\n        return balanceOf(owner);\\n    }\\n\\n    /** @notice See {IERC4626Upgradeable-previewWithdraw}. */\\n    function previewWithdraw(uint256 assets) public view virtual override(IERC4626Upgradeable, ERC4626Upgradeable) returns (uint256 shares) {\\n        (shares,) = previewWithdrawAndFee(assets);\\n    }\\n\\n    /** @notice See {IERC4626Upgradeable-previewRedeem}. */\\n    function previewRedeem(uint256 shares) public view virtual override(IERC4626Upgradeable, ERC4626Upgradeable) returns (uint256 assets) {\\n        (assets,) = previewRedeemAndFee(shares);\\n    }\\n\\n    /** @notice See {IHATVault-previewWithdrawAndFee}. */\\n    function previewWithdrawAndFee(uint256 assets) public view returns (uint256 shares, uint256 fee) {\\n        uint256 _withdrawalFee = withdrawalFee;\\n        fee = assets.mulDiv(_withdrawalFee, (HUNDRED_PERCENT - _withdrawalFee));\\n        shares = _convertToShares(assets + fee, MathUpgradeable.Rounding.Up);\\n    }\\n\\n    /** @notice See {IHATVault-previewRedeemAndFee}. */\\n    function previewRedeemAndFee(uint256 shares) public view returns (uint256 assets, uint256 fee) {\\n        uint256 _assetsPlusFee = _convertToAssets(shares, MathUpgradeable.Rounding.Down);\\n        fee = _assetsPlusFee.mulDiv(withdrawalFee, HUNDRED_PERCENT);\\n        unchecked { // fee will always be maximun 20% of _assetsPlusFee\\n            assets = _assetsPlusFee - fee;\\n        }\\n    }\\n\\n    /* -------------------------------------------------------------------------------- */\\n\\n    /* --------------------------------- Helpers -------------------------------------- */\\n\\n    /**\\n    * @dev Deposit funds to the vault. Can only be called if the committee had\\n    * checked in and deposits are not paused.\\n    * @param caller Caller of the action (msg.sender)\\n    * @param receiver Reciever of the shares from the deposit\\n    * @param assets Amount of vault's native token to deposit\\n    * @param shares Respective amount of shares to be received\\n    */\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal override virtual nonReentrant {\\n        if (!vaultStarted)\\n            revert VaultNotStartedYet();\\n        if (receiver == caller && withdrawEnableStartTime[receiver] != 0 ) {\\n            // clear withdraw request if caller deposits in her own account\\n            withdrawEnableStartTime[receiver] = 0;\\n        }\\n\\n        super._deposit(caller, receiver, assets, shares);\\n    }\\n\\n    // amount of shares correspond with assets + fee\\n    function _withdraw(\\n        address _caller,\\n        address _receiver,\\n        address _owner,\\n        uint256 _assets,\\n        uint256 _shares,\\n        uint256 _fee\\n    ) internal nonReentrant {\\n        if (_assets == 0) revert WithdrawMustBeGreaterThanZero();\\n        if (_caller != _owner) {\\n            _spendAllowance(_owner, _caller, _shares);\\n        }\\n\\n        _burn(_owner, _shares);\\n\\n        IERC20 _asset = IERC20(asset());\\n        if (_fee > 0) {\\n            _asset.safeTransfer(registry.owner(), _fee);\\n        }\\n        _asset.safeTransfer(_receiver, _assets);\\n\\n        emit Withdraw(_caller, _receiver, _owner, _assets, _shares);\\n    }\\n\\n    /**\\n    * @dev Claim rewards from the vault's reward controllers for the owner\\n    * @param owner The owner of the rewards to claim for\\n    */\\n    function _claimRewards(address owner) internal {\\n        for (uint256 i = 0; i < rewardControllers.length;) { \\n            rewardControllers[i].claimReward(address(this), owner);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal virtual override {\\n        if (_amount == 0) revert AmountCannotBeZero();\\n        if (_from == _to) revert CannotTransferToSelf();\\n        // deposit/mint/transfer\\n        if (_to != address(0)) {\\n            IHATVaultsRegistry _registry = registry;\\n            if (_registry.isEmergencyPaused()) revert SystemInEmergencyPause();\\n            // Cannot transfer or mint tokens to a user for which an active withdraw request exists\\n            // because then we would need to reset their withdraw request\\n            uint256 _withdrawEnableStartTime = withdrawEnableStartTime[_to];\\n            if (_withdrawEnableStartTime != 0) {\\n                // solhint-disable-next-line not-rely-on-time\\n                if (block.timestamp <= _withdrawEnableStartTime + _registry.getWithdrawRequestEnablePeriod())\\n                    revert CannotTransferToAnotherUserWithActiveWithdrawRequest();\\n            }\\n\\n            for (uint256 i = 0; i < rewardControllers.length;) { \\n                rewardControllers[i].commitUserBalance(_to, _amount, true);\\n                unchecked { ++i; }\\n            }\\n        }\\n        // withdraw/redeem/transfer\\n        if (_from != address(0)) {\\n            if (_amount > maxRedeem(_from)) revert RedeemMoreThanMax();\\n            // if all is ok and withdrawal can be made - \\n            // reset withdrawRequests[_pid][msg.sender] so that another withdrawRequest\\n            // will have to be made before next withdrawal\\n            withdrawEnableStartTime[_from] = 0;\\n\\n            if (!_isEmergencyWithdraw) {\\n                for (uint256 i = 0; i < rewardControllers.length;) { \\n                    rewardControllers[i].commitUserBalance(_from, _amount, false);\\n                    unchecked { ++i; }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _afterTokenTransfer(address, address, uint256) internal virtual override {\\n        if (totalSupply() > 0 && totalSupply() < MINIMAL_AMOUNT_OF_SHARES) {\\n          revert AmountOfSharesMustBeMoreThanMinimalAmount();\\n        }\\n    }\\n\\n    /**\\n    * @dev Checks that the given user can perform a withdraw at this time\\n    * @param _user Address of the user to check\\n    */\\n    function _isWithdrawEnabledForUser(address _user)\\n        internal view\\n        returns(bool)\\n    {\\n        IHATVaultsRegistry _registry = registry;\\n        uint256 _withdrawPeriod = _registry.getWithdrawPeriod();\\n        // disable withdraw for safetyPeriod (e.g 1 hour) after each withdrawPeriod (e.g 11 hours)\\n        // solhint-disable-next-line not-rely-on-time\\n        if (block.timestamp % (_withdrawPeriod + _registry.getSafetyPeriod()) >= _withdrawPeriod)\\n            return false;\\n        // check that withdrawRequestPendingPeriod had passed\\n        uint256 _withdrawEnableStartTime = withdrawEnableStartTime[_user];\\n        // solhint-disable-next-line not-rely-on-time\\n        return (block.timestamp >= _withdrawEnableStartTime &&\\n        // check that withdrawRequestEnablePeriod had not passed and that the\\n        // last action was withdrawRequest (and not deposit or withdraw, which\\n        // reset withdrawRequests[_user] to 0)\\n        // solhint-disable-next-line not-rely-on-time\\n            block.timestamp <= _withdrawEnableStartTime + _registry.getWithdrawRequestEnablePeriod());\\n    }\\n\\n    function _addRewardController(IRewardController _rewardController) internal {\\n        for (uint256 i = 0; i < rewardControllers.length;) { \\n            if (_rewardController == rewardControllers[i]) revert DuplicatedRewardController();\\n            unchecked { ++i; }\\n        }\\n        rewardControllers.push(_rewardController);\\n        emit AddRewardController(_rewardController);\\n    }\\n\\n    /* -------------------------------------------------------------------------------- */\\n}\\n\",\"keccak256\":\"0x574ea4cbd040841d2a1f3037bc9d2e4796e161cb32eb48db9af7e0b1b448b69f\",\"license\":\"MIT\"},\"contracts/HATVaultsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./tokenlock/TokenLockFactory.sol\\\";\\nimport \\\"./interfaces/IHATVaultsRegistry.sol\\\";\\nimport \\\"./interfaces/IHATVault.sol\\\";\\n\\n/** @title Registry to deploy Hats.finance vaults and manage shared parameters\\n * @author Hats.finance\\n * @notice Hats.finance is a proactive bounty protocol for white hat hackers and\\n * security experts, where projects, community members, and stakeholders\\n * incentivize protocol security and responsible disclosure.\\n * Hats create scalable vaults using the project\\u2019s own token. The value of the\\n * bounty increases with the success of the token and project.\\n *\\n * The owner of the registry has the permission to set time limits and bounty\\n * parameters and change vaults' info, and to set the other registry roles -\\n * fee setter and arbitrator.\\n * The arbitrator can challenge submitted claims for bounty payouts made by\\n * vaults' committees, approve them with a different bounty percentage or\\n * dismiss them.\\n * The fee setter can set the fee on withdrawals on all vaults.\\n *\\n * This project is open-source and can be found at:\\n * https://github.com/hats-finance/hats-contracts\\n *\\n * @dev New hats.finance vaults should be created through a call to {createVault}\\n * so that they are linked to the registry\\n */\\ncontract HATVaultsRegistry is IHATVaultsRegistry, Ownable {\\n    using SafeERC20 for IERC20;\\n    using Math for uint256;\\n\\n    // Used in {swapAndSend} to avoid a \\\"stack too deep\\\" error\\n    struct SwapData {\\n        uint256 amount;\\n        uint256 amountUnused;\\n        uint256 hatsReceived;\\n        uint256 totalHackerReward;\\n        uint256 governanceAmountSwapped;\\n        uint256[] hackerRewards;\\n        uint256 governanceHatReward;\\n        uint256 usedPart;\\n    }\\n\\n    uint16 public constant HUNDRED_PERCENT = 10000;\\n    // the maximum percentage of the bounty that will be converted in HATs\\n    uint16 public constant MAX_HAT_SPLIT = 2000;\\n\\n    address public hatVaultImplementation;\\n    address public hatClaimsManagerImplementation;\\n    address[] public hatVaults;\\n    \\n    // vault address => is visible\\n    mapping(address => bool) public isVaultVisible;\\n    // asset => hacker address => amount\\n    mapping(address => mapping(address => uint256)) public hackersHatReward;\\n    // asset => amount\\n    mapping(address => uint256) public governanceHatReward;\\n\\n    // PARAMETERS FOR ALL VAULTS\\n    IHATVaultsRegistry.GeneralParameters public generalParameters;\\n    ITokenLockFactory public immutable tokenLockFactory;\\n\\n    // the token into which a part of the the bounty will be swapped into\\n    IERC20 public HAT;\\n    \\n    // feeSetter sets the withdrawal fee\\n    address public feeSetter;\\n\\n    // How the bountyGovernanceHAT and bountyHackerHATVested set how to divide the hats \\n    // bounties of the vault, in percentages (out of `HUNDRED_PERCENT`)\\n    // The precentages are taken from the total bounty\\n \\n    // the default percentage of the total bounty to be swapped to HATs and sent to governance\\n    uint16 public defaultBountyGovernanceHAT;\\n    // the default percentage of the total bounty to be swapped to HATs and sent to the hacker via vesting contract\\n    uint16 public defaultBountyHackerHATVested;\\n\\n    address public defaultArbitrator;\\n\\n    bool public isEmergencyPaused;\\n    uint32 public defaultChallengePeriod;\\n    uint32 public defaultChallengeTimeOutPeriod;\\n\\n    /**\\n    * @notice initialize -\\n    * @param _hatVaultImplementation The hat vault implementation address.\\n    * @param _hatClaimsManagerImplementation The hat claims manager implementation address.\\n    * @param _hatGovernance The governance address.\\n    * @param _HAT the HAT token address\\n    * @param _bountyGovernanceHAT The default percentage of a claim's total\\n    * bounty to be swapped for HAT and sent to the governance\\n    * @param _bountyHackerHATVested The default percentage of a claim's total\\n    * bounty to be swapped for HAT and sent to a vesting contract for the hacker\\n    *   _bountyGovernanceHAT + _bountyHackerHATVested must be less\\n    *    than `HUNDRED_PERCENT`.\\n    * @param _tokenLockFactory Address of the token lock factory to be used\\n    * to create a vesting contract for the approved claim reporter.\\n    */\\n    constructor(\\n        address _hatVaultImplementation,\\n        address _hatClaimsManagerImplementation,\\n        address _hatGovernance,\\n        address _defaultArbitrator,\\n        address _HAT,\\n        uint16 _bountyGovernanceHAT,\\n        uint16 _bountyHackerHATVested,\\n        ITokenLockFactory _tokenLockFactory\\n    ) {\\n        _transferOwnership(_hatGovernance);\\n        hatVaultImplementation = _hatVaultImplementation;\\n        hatClaimsManagerImplementation = _hatClaimsManagerImplementation;\\n        HAT = IERC20(_HAT);\\n\\n        validateHATSplit(_bountyGovernanceHAT, _bountyHackerHATVested);\\n        tokenLockFactory = _tokenLockFactory;\\n        generalParameters = IHATVaultsRegistry.GeneralParameters({\\n            hatVestingDuration: 90 days,\\n            hatVestingPeriods: 90,\\n            withdrawPeriod: 11 hours,\\n            safetyPeriod: 1 hours,\\n            setMaxBountyDelay: 2 days,\\n            withdrawRequestEnablePeriod: 7 days,\\n            withdrawRequestPendingPeriod: 7 days,\\n            claimFee: 0\\n        });\\n\\n        defaultBountyGovernanceHAT = _bountyGovernanceHAT;\\n        defaultBountyHackerHATVested = _bountyHackerHATVested;\\n        defaultArbitrator = _defaultArbitrator;\\n        defaultChallengePeriod = 3 days;\\n        defaultChallengeTimeOutPeriod = 125 days;\\n        emit RegistryCreated(\\n            _hatVaultImplementation,\\n            _hatClaimsManagerImplementation,\\n            _HAT,\\n            address(_tokenLockFactory),\\n            generalParameters,\\n            _bountyGovernanceHAT,\\n            _bountyHackerHATVested,\\n            _hatGovernance,\\n            _defaultArbitrator,\\n            defaultChallengePeriod,\\n            defaultChallengeTimeOutPeriod\\n        );\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-setVaultImplementations}. */\\n    function setVaultImplementations(\\n        address _hatVaultImplementation,\\n        address _hatClaimsManagerImplementation\\n    ) external onlyOwner {\\n        hatVaultImplementation = _hatVaultImplementation;\\n        hatClaimsManagerImplementation = _hatClaimsManagerImplementation;\\n\\n        emit SetHATVaultImplementation(_hatVaultImplementation);\\n        emit SetHATClaimsManagerImplementation(_hatClaimsManagerImplementation);\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-setSwapToken}. */\\n    function setSwapToken(address _swapToken) external onlyOwner {\\n        HAT = IERC20(_swapToken);\\n        emit SetSwapToken(_swapToken);\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-setEmergencyPaused}. */\\n    function setEmergencyPaused(bool _isEmergencyPaused) external onlyOwner {\\n        isEmergencyPaused = _isEmergencyPaused;\\n        emit SetEmergencyPaused(_isEmergencyPaused);\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-logClaim}. */\\n    function logClaim(string calldata _descriptionHash) external payable {\\n        uint256 _claimFee = generalParameters.claimFee;\\n        if (_claimFee > 0) {\\n            if (msg.value < _claimFee)\\n                revert NotEnoughFeePaid();\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success,) = payable(owner()).call{value: msg.value}(\\\"\\\");\\n            if (!success) revert ClaimFeeTransferFailed();\\n        }\\n        emit LogClaim(msg.sender, _descriptionHash);\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-setDefaultHATBountySplit}. */\\n    function setDefaultHATBountySplit(\\n        uint16 _defaultBountyGovernanceHAT,\\n        uint16 _defaultBountyHackerHATVested\\n    ) external onlyOwner {\\n        validateHATSplit(_defaultBountyGovernanceHAT, _defaultBountyHackerHATVested);\\n        defaultBountyGovernanceHAT = _defaultBountyGovernanceHAT;\\n        defaultBountyHackerHATVested = _defaultBountyHackerHATVested;\\n        emit SetDefaultHATBountySplit(_defaultBountyGovernanceHAT, _defaultBountyHackerHATVested);\\n\\n    }\\n   \\n    /** @notice See {IHATVaultsRegistry-setDefaultArbitrator}. */\\n    function setDefaultArbitrator(address _defaultArbitrator) external onlyOwner {\\n        defaultArbitrator = _defaultArbitrator;\\n        emit SetDefaultArbitrator(_defaultArbitrator);\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-setDefaultChallengePeriod}. */\\n    function setDefaultChallengePeriod(uint32 _defaultChallengePeriod) external onlyOwner {\\n        validateChallengePeriod(_defaultChallengePeriod);\\n        defaultChallengePeriod = _defaultChallengePeriod;\\n        emit SetDefaultChallengePeriod(_defaultChallengePeriod);\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-setDefaultChallengeTimeOutPeriod}. */\\n    function setDefaultChallengeTimeOutPeriod(uint32 _defaultChallengeTimeOutPeriod) external onlyOwner {\\n        validateChallengeTimeOutPeriod(_defaultChallengeTimeOutPeriod);\\n        defaultChallengeTimeOutPeriod = _defaultChallengeTimeOutPeriod;\\n        emit SetDefaultChallengeTimeOutPeriod(_defaultChallengeTimeOutPeriod);\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-setFeeSetter}. */\\n    function setFeeSetter(address _feeSetter) external onlyOwner {\\n        feeSetter = _feeSetter;\\n        emit SetFeeSetter(_feeSetter);\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-setWithdrawRequestParams}. */\\n    function setWithdrawRequestParams(uint32 _withdrawRequestPendingPeriod, uint32  _withdrawRequestEnablePeriod)\\n        external \\n        onlyOwner\\n    {\\n        if (_withdrawRequestPendingPeriod > 90 days)\\n            revert WithdrawRequestPendingPeriodTooLong();\\n        if (_withdrawRequestEnablePeriod < 6 hours)\\n            revert WithdrawRequestEnabledPeriodTooShort();\\n        if (_withdrawRequestEnablePeriod > 100 days)\\n            revert WithdrawRequestEnabledPeriodTooLong();\\n        generalParameters.withdrawRequestPendingPeriod = _withdrawRequestPendingPeriod;\\n        generalParameters.withdrawRequestEnablePeriod = _withdrawRequestEnablePeriod;\\n        emit SetWithdrawRequestParams(_withdrawRequestPendingPeriod, _withdrawRequestEnablePeriod);\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-setClaimFee}. */\\n    function setClaimFee(uint256 _fee) external onlyOwner {\\n        generalParameters.claimFee = _fee;\\n        emit SetClaimFee(_fee);\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-setWithdrawSafetyPeriod}. */\\n    function setWithdrawSafetyPeriod(uint32 _withdrawPeriod, uint32 _safetyPeriod) external onlyOwner { \\n        if (_withdrawPeriod < 1 hours) revert WithdrawPeriodTooShort();\\n        if (_safetyPeriod > 6 hours) revert SafetyPeriodTooLong();\\n        generalParameters.withdrawPeriod = _withdrawPeriod;\\n        generalParameters.safetyPeriod = _safetyPeriod;\\n        emit SetWithdrawSafetyPeriod(_withdrawPeriod, _safetyPeriod);\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-setHatVestingParams}. */\\n    function setHatVestingParams(uint32 _duration, uint32 _periods) external onlyOwner {\\n        if (_duration >= 180 days) revert HatVestingDurationTooLong();\\n        if (_periods == 0) revert HatVestingPeriodsCannotBeZero();\\n        if (_duration < _periods) revert HatVestingDurationSmallerThanPeriods();\\n        generalParameters.hatVestingDuration = _duration;\\n        generalParameters.hatVestingPeriods = _periods;\\n        emit SetHatVestingParams(_duration, _periods);\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-setMaxBountyDelay}. */\\n    function setMaxBountyDelay(uint32 _delay) external onlyOwner {\\n        if (_delay < 2 days) revert DelayTooShort();\\n        generalParameters.setMaxBountyDelay = _delay;\\n        emit SetMaxBountyDelay(_delay);\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-createVault}. */\\n    function createVault(\\n        IHATVault.VaultInitParams calldata _vaultParams,\\n        IHATClaimsManager.ClaimsManagerInitParams calldata _claimsManagerParams\\n    ) external returns(address vault, address vaultClaimsManager) {\\n        vault = Clones.clone(hatVaultImplementation);\\n        vaultClaimsManager = Clones.clone(hatClaimsManagerImplementation);\\n\\n        IHATVault(vault).initialize(vaultClaimsManager, _vaultParams);\\n        IHATClaimsManager(vaultClaimsManager).initialize(IHATVault(vault), _claimsManagerParams);\\n\\n        hatVaults.push(vault);\\n\\n        emit VaultCreated(vault, vaultClaimsManager, _vaultParams, _claimsManagerParams);\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-setVaultVisibility}. */\\n    function setVaultVisibility(address _vault, bool _visible) external onlyOwner {\\n        isVaultVisible[_vault] = _visible;\\n        emit SetVaultVisibility(_vault, _visible);\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-addTokensToSwap}. */\\n    function addTokensToSwap(\\n        IERC20 _asset,\\n        address _hacker,\\n        uint256 _hackersHatReward,\\n        uint256 _governanceHatReward\\n    ) external {\\n        hackersHatReward[address(_asset)][_hacker] += _hackersHatReward;\\n        governanceHatReward[address(_asset)] += _governanceHatReward;\\n        _asset.safeTransferFrom(msg.sender, address(this), _hackersHatReward + _governanceHatReward);\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-swapAndSend}. */\\n    function swapAndSend(\\n        address _asset,\\n        address[] calldata _beneficiaries,\\n        uint256 _amountOutMinimum,\\n        address _routingContract,\\n        bytes calldata _routingPayload\\n    ) external onlyOwner {\\n        // Needed to avoid a \\\"stack too deep\\\" error\\n        SwapData memory _swapData;\\n        _swapData.hackerRewards = new uint256[](_beneficiaries.length);\\n        _swapData.governanceHatReward = governanceHatReward[_asset];\\n        _swapData.amount = _swapData.governanceHatReward;\\n        for (uint256 i = 0; i < _beneficiaries.length;) { \\n            _swapData.hackerRewards[i] = hackersHatReward[_asset][_beneficiaries[i]];\\n            hackersHatReward[_asset][_beneficiaries[i]] = 0;\\n            _swapData.amount += _swapData.hackerRewards[i]; \\n            unchecked { ++i; }\\n        }\\n        if (_swapData.amount == 0) revert AmountToSwapIsZero();\\n        IERC20 _HAT = HAT;\\n        (_swapData.hatsReceived, _swapData.amountUnused) = _swapTokenForHAT(IERC20(_asset), _swapData.amount, _amountOutMinimum, _routingContract, _routingPayload);\\n        \\n        _swapData.usedPart = (_swapData.amount - _swapData.amountUnused);\\n        _swapData.governanceAmountSwapped = _swapData.usedPart.mulDiv(_swapData.governanceHatReward, _swapData.amount);\\n        governanceHatReward[_asset]  = _swapData.amountUnused.mulDiv(_swapData.governanceHatReward, _swapData.amount);\\n\\n        for (uint256 i = 0; i < _beneficiaries.length;) {\\n            uint256 _hackerReward = _swapData.hatsReceived.mulDiv(_swapData.hackerRewards[i], _swapData.amount);\\n            uint256 _hackerAmountSwapped = _swapData.usedPart.mulDiv(_swapData.hackerRewards[i], _swapData.amount);\\n            _swapData.totalHackerReward += _hackerReward;\\n            hackersHatReward[_asset][_beneficiaries[i]] = _swapData.amountUnused.mulDiv(_swapData.hackerRewards[i], _swapData.amount);\\n            address _tokenLock;\\n            if (_hackerReward > 0) {\\n                // hacker gets her reward via vesting contract\\n                _tokenLock = tokenLockFactory.createTokenLock(\\n                    address(_HAT),\\n                    0x0000000000000000000000000000000000000000, //this address as owner, so it can do nothing.\\n                    _beneficiaries[i],\\n                    _hackerReward,\\n                    // solhint-disable-next-line not-rely-on-time\\n                    block.timestamp, //start\\n                    // solhint-disable-next-line not-rely-on-time\\n                    block.timestamp + generalParameters.hatVestingDuration, //end\\n                    generalParameters.hatVestingPeriods,\\n                    0, // no release start\\n                    0, // no cliff\\n                    false, // not revocable\\n                    true\\n                );\\n                _HAT.safeTransfer(_tokenLock, _hackerReward);\\n            }\\n            emit SwapAndSend(_beneficiaries[i], _hackerAmountSwapped, _hackerReward, _tokenLock);\\n            unchecked { ++i; }\\n        }\\n        address _owner = owner(); \\n        uint256 _amountToOwner = _swapData.hatsReceived - _swapData.totalHackerReward;\\n        _HAT.safeTransfer(_owner, _amountToOwner);\\n        emit SwapAndSend(_owner, _swapData.governanceAmountSwapped, _amountToOwner, address(0));\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-getWithdrawPeriod}. */   \\n      function getWithdrawPeriod() external view returns (uint256) {\\n        return generalParameters.withdrawPeriod;\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-getSafetyPeriod}. */   \\n    function getSafetyPeriod() external view returns (uint256) {\\n        return generalParameters.safetyPeriod;\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-getWithdrawRequestEnablePeriod}. */   \\n    function getWithdrawRequestEnablePeriod() external view returns (uint256) {\\n        return generalParameters.withdrawRequestEnablePeriod;\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-getWithdrawRequestPendingPeriod}. */   \\n    function getWithdrawRequestPendingPeriod() external view returns (uint256) {\\n        return generalParameters.withdrawRequestPendingPeriod;\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-getSetMaxBountyDelay}. */   \\n    function getSetMaxBountyDelay() external view returns (uint256) {\\n        return generalParameters.setMaxBountyDelay;\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-getNumberOfVaults}. */\\n    function getNumberOfVaults() external view returns(uint256) {\\n        return hatVaults.length;\\n    }\\n\\n    function owner() public view override(IHATVaultsRegistry, Ownable) virtual returns (address) {\\n        return Ownable.owner();\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-validateHATSplit}. */\\n    function validateHATSplit(uint16 _bountyGovernanceHAT, uint16 _bountyHackerHATVested) public pure {\\n        if (_bountyGovernanceHAT + _bountyHackerHATVested > MAX_HAT_SPLIT)\\n            revert TotalHatsSplitPercentageShouldBeUpToMaxHATSplit();\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-validateChallengePeriod}. */\\n    function validateChallengePeriod(uint32 _challengePeriod) public pure {\\n        if (_challengePeriod < 1 days) revert ChallengePeriodTooShort();\\n        if (_challengePeriod > 5 days) revert ChallengePeriodTooLong();\\n    }\\n\\n    /** @notice See {IHATVaultsRegistry-validateChallengeTimeOutPeriod}. */\\n    function validateChallengeTimeOutPeriod(uint32 _challengeTimeOutPeriod) public pure {\\n        if (_challengeTimeOutPeriod < 2 days) revert ChallengeTimeOutPeriodTooShort();\\n        if (_challengeTimeOutPeriod > 125 days) revert ChallengeTimeOutPeriodTooLong();\\n    }\\n    \\n    /**\\n    * @dev Use the given routing contract to swap the given token to HAT token\\n    * @param _asset The token to swap\\n    * @param _amount Amount of token to swap\\n    * @param _amountOutMinimum Minimum amount of HAT tokens at swap\\n    * @param _routingContract Routing contract to call for the swap\\n    * @param _routingPayload Payload to send to the _routingContract for the \\n    * swap\\n    */\\n    function _swapTokenForHAT(\\n        IERC20 _asset,\\n        uint256 _amount,\\n        uint256 _amountOutMinimum,\\n        address _routingContract,\\n        bytes calldata _routingPayload)\\n    internal\\n    returns (uint256 hatsReceived, uint256 amountUnused)\\n    {\\n        IERC20 _HAT = HAT;\\n        if (_asset == _HAT) {\\n            return (_amount, 0);\\n        }\\n\\n        IERC20(_asset).safeApprove(_routingContract, _amount);\\n        uint256 _balanceBefore = _HAT.balanceOf(address(this));\\n        uint256 _assetBalanceBefore = _asset.balanceOf(address(this));\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success,) = _routingContract.call(_routingPayload);\\n        if (!success) revert SwapFailed();\\n        hatsReceived = _HAT.balanceOf(address(this)) - _balanceBefore;\\n        amountUnused = _amount - (_assetBalanceBefore - _asset.balanceOf(address(this)));\\n        if (hatsReceived < _amountOutMinimum)\\n            revert AmountSwappedLessThanMinimum();\\n\\n        IERC20(_asset).safeApprove(address(_routingContract), 0);\\n    }\\n}\\n\",\"keccak256\":\"0x39719ac176bfd004ab48b36b873b7f142fd473716ee8eae2b79b935ad0f7a49f\",\"license\":\"MIT\"},\"contracts/interfaces/IHATClaimsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IRewardController.sol\\\";\\nimport \\\"./IHATVault.sol\\\";\\nimport \\\"./IHATVaultsRegistry.sol\\\";\\n\\n/** @title Interface for Hats.finance Vaults\\n * @author Hats.finance\\n * @notice A HATVault holds the funds for a specific project's bug bounties.\\n * Anyone can permissionlessly deposit into the HATVault using\\n * the vault\\u2019s native token. When a bug is submitted and approved, the bounty \\n * is paid out using the funds in the vault. Bounties are paid out as a\\n * percentage of the vault. The percentage is set according to the severity of\\n * the bug. Vaults have regular safety periods (typically for an hour twice a\\n * day) which are time for the committee to make decisions.\\n *\\n * In addition to the roles defined in the IHATVaultsRegistry, every HATVault \\n * has the roles:\\n * Committee - The only address which can submit a claim for a bounty payout\\n * and set the maximum bounty.\\n * User - Anyone can deposit the vault's native token into the vault and \\n * recieve shares for it. Shares represent the user's relative part in the\\n * vault, and when a bounty is paid out, users lose part of their deposits\\n * (based on percentage paid), but keep their share of the vault.\\n * Users also receive rewards for their deposits, which can be claimed at any\\n *  time.\\n * To withdraw previously deposited tokens, a user must first send a withdraw\\n * request, and the withdrawal will be made available after a pending period.\\n * Withdrawals are not permitted during safety periods or while there is an \\n * active claim for a bounty payout.\\n *\\n * Bounties are payed out distributed between a few channels, and that \\n * distribution is set upon creation (the hacker gets part in direct transfer,\\n * part in vested reward and part in vested HAT token, part gets rewarded to\\n * the committee, part gets swapped to HAT token and burned and/or sent to Hats\\n * governance).\\n *\\n * NOTE: Vaults should not use tokens which do not guarantee that the amount\\n * specified is the amount transferred\\n *\\n * This project is open-source and can be found at:\\n * https://github.com/hats-finance/hats-contracts\\n */\\ninterface IHATClaimsManager {\\n\\n    // How to divide the bounty - after deducting the part that is swapped to\\n    // HAT tokens (and then sent to governance and vested to the hacker)\\n    // values are in percentages and should add up to 100% (defined as 10000)\\n    struct BountySplit {\\n        // the percentage of reward sent to the hacker via vesting contract\\n        uint16 hackerVested;\\n        // the percentage of tokens that are sent directly to the hacker\\n        uint16 hacker;\\n        // the percentage sent to the committee\\n        uint16 committee;\\n    }\\n\\n    // How to divide a bounty for a claim that has been approved\\n    // used to keep track of payouts, amounts are in vault's native token\\n    struct ClaimBounty {\\n        uint256 hacker;\\n        uint256 hackerVested;\\n        uint256 committee;\\n        uint256 hackerHatVested;\\n        uint256 governanceHat;\\n    }\\n\\n    struct Claim {\\n        bytes32 claimId;\\n        address beneficiary;\\n        uint16 bountyPercentage;\\n        // the address of the committee at the time of the submission, so that this committee will\\n        // be paid their share of the bounty in case the committee changes before claim approval\\n        address committee;\\n        uint32 createdAt;\\n        uint32 challengedAt;\\n        uint256 bountyGovernanceHAT;\\n        uint256 bountyHackerHATVested;\\n        address arbitrator;\\n        uint32 challengePeriod;\\n        uint32 challengeTimeOutPeriod;\\n        bool arbitratorCanChangeBounty;\\n        bool arbitratorCanChangeBeneficiary;\\n    }\\n\\n    struct PendingMaxBounty {\\n        uint16 maxBounty;\\n        uint32 timestamp;\\n    }\\n\\n    /**\\n    * @notice Initialization parameters for the vault\\n    * @param name The vault's name (concatenated as \\\"Hats Vault \\\" + name)\\n    * @param symbol The vault's symbol (concatenated as \\\"HAT\\\" + symbol)\\n    * @param rewardController The reward controller for the vault\\n    * @param vestingDuration Duration of the vesting period of the vault's\\n    * token vested part of the bounty\\n    * @param vestingPeriods The number of vesting periods of the vault's token\\n    * vested part of the bounty\\n    * @param maxBounty The maximum percentage of the vault that can be paid\\n    * out as a bounty\\n    * @param bountySplit The way to split the bounty between the hacker, \\n    * hacker vested, and committee.\\n    *   Each entry is a number between 0 and `HUNDRED_PERCENT`.\\n    *   Total splits should be equal to `HUNDRED_PERCENT`.\\n    * @param bountyGovernanceHAT The HAT bounty for governance\\n    * @param bountyHackerHATVested The HAT bounty vested for the hacker\\n    * @param asset The vault's native token\\n    * @param owner The address of the vault's owner \\n    * @param committee The address of the vault's committee \\n    * @param arbitrator The address of the vault's arbitrator\\n    * @param arbitratorCanChangeBounty Can the arbitrator change a claim's bounty\\n    * @param arbitratorCanChangeBeneficiary Can the arbitrator change a claim's beneficiary\\n    * @param arbitratorCanSubmitClaims Can the arbitrator submit a claim\\n    * @param isTokenLockRevocable can the committee revoke the token lock\\n    * @dev Needed to avoid a \\\"stack too deep\\\" error\\n    */\\n    struct ClaimsManagerInitParams {\\n        uint32 vestingDuration;\\n        uint32 vestingPeriods;\\n        uint16 maxBounty;\\n        BountySplit bountySplit;\\n        uint16 bountyGovernanceHAT;\\n        uint16 bountyHackerHATVested;\\n        address owner;\\n        address committee;\\n        address arbitrator;\\n        bool arbitratorCanChangeBounty;\\n        bool arbitratorCanChangeBeneficiary;\\n        bool arbitratorCanSubmitClaims;\\n        bool isTokenLockRevocable;\\n    }\\n\\n    // Only committee\\n    error OnlyCommittee();\\n    // Active claim exists\\n    error ActiveClaimExists();\\n    // Safety period\\n    error SafetyPeriod();\\n    // Not safety period\\n    error NotSafetyPeriod();\\n    // Bounty percentage is higher than the max bounty\\n    error BountyPercentageHigherThanMaxBounty();\\n    // Only callable by arbitrator or after challenge timeout period\\n    error OnlyCallableByArbitratorOrAfterChallengeTimeOutPeriod();\\n    // No active claim exists\\n    error NoActiveClaimExists();\\n    // Claim Id specified is not the active claim Id\\n    error ClaimIdIsNotActive();\\n    // Not enough fee paid\\n    error NotEnoughFeePaid();\\n    // No pending max bounty\\n    error NoPendingMaxBounty();\\n    // Delay period for setting max bounty had not passed\\n    error DelayPeriodForSettingMaxBountyHadNotPassed();\\n    // Committee already checked in\\n    error CommitteeAlreadyCheckedIn();\\n    // Total bounty split % should be `HUNDRED_PERCENT`\\n    error TotalSplitPercentageShouldBeHundredPercent();\\n    // Vesting duration is too long\\n    error VestingDurationTooLong();\\n    // Vesting periods cannot be zero\\n    error VestingPeriodsCannotBeZero();\\n    // Vesting duration smaller than periods\\n    error VestingDurationSmallerThanPeriods();\\n    // Max bounty cannot be more than `MAX_BOUNTY_LIMIT` (unless if it is 100%)\\n    error MaxBountyCannotBeMoreThanMaxBountyLimit();\\n    // Committee bounty split cannot be more than `MAX_COMMITTEE_BOUNTY`\\n    error CommitteeBountyCannotBeMoreThanMax();\\n    // Only registry owner\\n    error OnlyRegistryOwner();\\n    // Set shares arrays must have same length\\n    error SetSharesArraysMustHaveSameLength();\\n    // Not enough user balance\\n    error NotEnoughUserBalance();\\n    // Only arbitrator or registry owner\\n    error OnlyArbitratorOrRegistryOwner();\\n    // Unchallenged claim can only be approved if challenge period is over\\n    error UnchallengedClaimCanOnlyBeApprovedAfterChallengePeriod();\\n    // Challenged claim can only be approved by arbitrator before the challenge timeout period\\n    error ChallengedClaimCanOnlyBeApprovedByArbitratorUntilChallengeTimeoutPeriod();\\n    // Claim has expired\\n    error ClaimExpired();\\n    // Challenge period is over\\n    error ChallengePeriodEnded();\\n    // Claim can be challenged only once\\n    error ClaimAlreadyChallenged();\\n    // Only callable if challenged\\n    error OnlyCallableIfChallenged();\\n    // System is in an emergency pause\\n    error SystemInEmergencyPause();\\n    // Cannot set a reward controller that was already used in the past\\n    error CannotSetToPerviousRewardController();\\n    // Payout must either be 100%, or up to the MAX_BOUNTY_LIMIT\\n    error PayoutMustBeUpToMaxBountyLimitOrHundredPercent();\\n\\n\\n    event SubmitClaim(\\n        bytes32 indexed _claimId,\\n        address _committee,\\n        address indexed _submitter,\\n        address indexed _beneficiary,\\n        uint256 _bountyPercentage,\\n        string _descriptionHash\\n    );\\n    event ChallengeClaim(bytes32 indexed _claimId);\\n    event ApproveClaim(\\n        bytes32 indexed _claimId,\\n        address _committee,\\n        address indexed _approver,\\n        address indexed _beneficiary,\\n        uint256 _bountyPercentage,\\n        address _tokenLock,\\n        ClaimBounty _claimBounty\\n    );\\n    event DismissClaim(bytes32 indexed _claimId);\\n    event SetCommittee(address indexed _committee);\\n    event SetVestingParams(\\n        uint256 _duration,\\n        uint256 _periods\\n    );\\n    event SetBountySplit(BountySplit _bountySplit);\\n    event CommitteeCheckedIn();\\n    event SetPendingMaxBounty(uint256 _maxBounty);\\n    event SetMaxBounty(uint256 _maxBounty);\\n    event SetHATBountySplit(uint256 _bountyGovernanceHAT, uint256 _bountyHackerHATVested);\\n    event SetArbitrator(address indexed _arbitrator);\\n    event SetChallengePeriod(uint256 _challengePeriod);\\n    event SetChallengeTimeOutPeriod(uint256 _challengeTimeOutPeriod);\\n    event SetArbitratorOptions(bool _arbitratorCanChangeBounty, bool _arbitratorCanChangeBeneficiary, bool _arbitratorCanSubmitClaims);\\n\\n    /**\\n    * @notice Initialize a claims manager instance\\n    * @param _vault The vault instance\\n    * @param _params The claim manager's initialization parameters\\n    * @dev See {IHATClaimsManager-ClaimsManagerInitParams} for more details\\n    * @dev Called when the vault is created in {IHATVaultsRegistry-createVault}\\n    */\\n    function initialize(IHATVault _vault, ClaimsManagerInitParams calldata _params) external;\\n\\n    /* -------------------------------------------------------------------------------- */\\n\\n    /* ---------------------------------- Claim --------------------------------------- */\\n\\n    /**\\n     * @notice Called by the committee to submit a claim for a bounty payout.\\n     * This function should be called only on a safety period, when withdrawals\\n     * are disabled, and while there's no other active claim. Cannot be called\\n     * when the registry is in an emergency pause.\\n     * Upon a call to this function by the committee the vault's withdrawals\\n     * will be disabled until the claim is approved or dismissed. Also from the\\n     * time of this call the arbitrator will have a period of \\n     * {IHATVaultsRegistry.challengePeriod} to challenge the claim.\\n     * @param _beneficiary The submitted claim's beneficiary\\n     * @param _bountyPercentage The submitted claim's bug requested reward percentage\\n     */\\n    function submitClaim(\\n        address _beneficiary, \\n        uint16 _bountyPercentage, \\n        string calldata _descriptionHash\\n    )\\n        external\\n        returns (bytes32 claimId);\\n\\n   \\n    /**\\n    * @notice Called by the arbitrator or governance to challenge a claim for a bounty\\n    * payout that had been previously submitted by the committee.\\n    * Can only be called during the challenge period after submission of the\\n    * claim.\\n    * @param _claimId The claim ID\\n    */\\n    function challengeClaim(bytes32 _claimId) external;\\n\\n    /**\\n    * @notice Approve a claim for a bounty submitted by a committee, and\\n    * pay out bounty to hacker and committee. Also transfer to the \\n    * IHATVaultsRegistry the part of the bounty that will be swapped to HAT \\n    * tokens.\\n    * If the claim had been previously challenged, this is only callable by\\n    * the arbitrator. Otherwise, callable by anyone after challengePeriod had\\n    * passed.\\n    * @param _claimId The claim ID\\n    * @param _bountyPercentage The percentage of the vault's balance that will\\n    * be sent as a bounty. This value will be ignored if the caller is not the\\n    * arbitrator.\\n    * @param _beneficiary where the bounty will be sent to. This value will be \\n    * ignored if the caller is not the arbitrator.\\n    */\\n    function approveClaim(bytes32 _claimId, uint16 _bountyPercentage, address _beneficiary)\\n        external;\\n\\n    /**\\n    * @notice Dismiss the active claim for bounty payout submitted by the\\n    * committee.\\n    * Called either by the arbitrator, or by anyone if the claim has timed out.\\n    * @param _claimId The claim ID\\n    */\\n    function dismissClaim(bytes32 _claimId) external;\\n\\n    /* -------------------------------------------------------------------------------- */\\n\\n    /* ---------------------------------- Params -------------------------------------- */\\n\\n    /**\\n    * @notice Set new committee address. Can be called by existing committee,\\n    * or by the the vault's owner in the case that the committee hadn't checked in\\n    * yet.\\n    * @param _committee The address of the new committee \\n    */\\n    function setCommittee(address _committee) external;\\n\\n    /**\\n    * @notice Called by the vault's owner to set the vesting params for the\\n    * part of the bounty that the hacker gets vested in the vault's native\\n    * token\\n    * @param _duration Duration of the vesting period. Must be smaller than\\n    * 120 days and bigger than `_periods`\\n    * @param _periods Number of vesting periods. Cannot be 0.\\n    */\\n    function setVestingParams(uint32 _duration, uint32 _periods) external;\\n\\n    /**\\n    * @notice Called by the vault's owner to set the vault token bounty split\\n    * upon an approval.\\n    * Can only be called if is no active claim and not during safety periods.\\n    * @param _bountySplit The bounty split\\n    */\\n    function setBountySplit(BountySplit calldata _bountySplit) external;\\n\\n    /**\\n    * @notice Called by the vault's committee to claim it's role.\\n    * Deposits are enabled only after committee check in.\\n    */\\n    function committeeCheckIn() external;\\n\\n    /**\\n    * @notice Called by the vault's owner to set a pending request for the\\n    * maximum percentage of the vault that can be paid out as a bounty.\\n    * Cannot be called if there is an active claim that has been submitted.\\n    * Max bounty should be less than or equal to 90% (defined as 9000).\\n    * It can also be set to 100%, but in this mode the vault will only allow\\n    * payouts of the 100%, and the vault will become inactive forever afterwards.\\n    * The pending value can be set by the owner after the time delay (of \\n    * {IHATVaultsRegistry.generalParameters.setMaxBountyDelay}) had passed.\\n    * @param _maxBounty The maximum bounty percentage that can be paid out\\n    */\\n    function setPendingMaxBounty(uint16 _maxBounty) external;\\n\\n    /**\\n    * @notice Called by the vault's owner to set the vault's max bounty to\\n    * the already pending max bounty.\\n    * Cannot be called if there are active claims that have been submitted.\\n    * Can only be called if there is a max bounty pending approval, and the\\n    * time delay since setting the pending max bounty had passed.\\n    */\\n    function setMaxBounty() external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set the vault HAT token bounty \\n    * split upon an approval.\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _bountyGovernanceHAT The HAT bounty for governance\\n    * @param _bountyHackerHATVested The HAT bounty vested for the hacker\\n    */\\n    function setHATBountySplit(\\n        uint16 _bountyGovernanceHAT,\\n        uint16 _bountyHackerHATVested\\n    ) \\n        external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set the vault arbitrator\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _arbitrator The address of vault's arbitrator\\n    */\\n    function setArbitrator(address _arbitrator) external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set the period of time after\\n    * a claim for a bounty payout has been submitted that it can be challenged\\n    * by the arbitrator.\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _challengePeriod The vault's challenge period\\n    */\\n    function setChallengePeriod(uint32 _challengePeriod) external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set the period of time after\\n    * which a claim for a bounty payout can be dismissed by anyone.\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _challengeTimeOutPeriod The vault's challenge timeout period\\n    */\\n    function setChallengeTimeOutPeriod(uint32 _challengeTimeOutPeriod)\\n        external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set whether the arbitrator\\n    * can change a claim bounty percentage and/ or beneficiary\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _arbitratorCanChangeBounty Whether the arbitrator can change a claim bounty percentage\\n    * @param _arbitratorCanChangeBeneficiary Whether the arbitrator can change a claim beneficiary\\n    */\\n    function setArbitratorOptions(\\n        bool _arbitratorCanChangeBounty,\\n        bool _arbitratorCanChangeBeneficiary,\\n        bool _arbitratorCanSubmitClaims\\n    )\\n        external;\\n\\n    /* -------------------------------------------------------------------------------- */\\n\\n    /* --------------------------------- Getters -------------------------------------- */\\n\\n    /** \\n    * @notice Returns the max bounty that can be paid from the vault in percentages out of HUNDRED_PERCENT\\n    * @return The max bounty\\n    */\\n    function maxBounty() external view returns(uint16);\\n\\n    /** \\n    * @notice Returns the vault's registry\\n    * @return The registry's address\\n    */\\n    function registry() external view returns(IHATVaultsRegistry);\\n\\n    /** \\n    * @notice Returns whether the committee has checked in\\n    * @return Whether the committee has checked in\\n    */\\n    function committeeCheckedIn() external view returns(bool);\\n\\n    /** \\n    * @notice Returns the current active claim\\n    * @return The current active claim\\n    */\\n    function getActiveClaim() external view returns(Claim memory);\\n\\n    /** \\n    * @notice Returns the vault HAT bounty split part that goes to the governance\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The vault's HAT bounty split part that goes to the governance\\n    */\\n    function getBountyGovernanceHAT() external view returns(uint16);\\n    \\n    /** \\n    * @notice Returns the vault HAT bounty split part that is vested for the hacker\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The vault's HAT bounty split part that is vested for the hacker\\n    */\\n    function getBountyHackerHATVested() external view returns(uint16);\\n\\n    /** \\n    * @notice Returns the address of the vault's arbitrator\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The address of the vault's arbitrator\\n    */\\n    function getArbitrator() external view returns(address);\\n\\n    /** \\n    * @notice Returns the period of time after a claim for a bounty payout has\\n    * been submitted that it can be challenged by the arbitrator.\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The vault's challenge period\\n    */\\n    function getChallengePeriod() external view returns(uint32);\\n\\n    /** \\n    * @notice Returns the period of time after which a claim for a bounty\\n    * payout can be dismissed by anyone.\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The vault's challenge timeout period\\n    */\\n    function getChallengeTimeOutPeriod() external view returns(uint32);\\n\\n    /** \\n    * @notice Returns the claims manager's version\\n    * @return The claims manager's version\\n    */\\n    function VERSION() external view returns(string calldata);\\n}\\n\",\"keccak256\":\"0x65002b348c94f5fcacc302fd5da474317dfbc98b52530d523931a96216cad37e\",\"license\":\"MIT\"},\"contracts/interfaces/IHATVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IRewardController.sol\\\";\\nimport \\\"./IHATVaultsRegistry.sol\\\";\\nimport \\\"./IHATClaimsManager.sol\\\";\\n\\n/** @title Interface for Hats.finance Vaults\\n * @author Hats.finance\\n * @notice A HATVault holds the funds for a specific project's bug bounties.\\n * Anyone can permissionlessly deposit into the HATVault using\\n * the vault\\u2019s native token. When a bug is submitted and approved, the bounty \\n * is paid out using the funds in the vault. Bounties are paid out as a\\n * percentage of the vault. The percentage is set according to the severity of\\n * the bug. Vaults have regular safety periods (typically for an hour twice a\\n * day) which are time for the committee to make decisions.\\n *\\n * In addition to the roles defined in the HATVaultsRegistry, every HATVault \\n * has the roles:\\n * Committee - The only address which can submit a claim for a bounty payout\\n * and set the maximum bounty.\\n * User - Anyone can deposit the vault's native token into the vault and \\n * recieve shares for it. Shares represent the user's relative part in the\\n * vault, and when a bounty is paid out, users lose part of their deposits\\n * (based on percentage paid), but keep their share of the vault.\\n * Users also receive rewards for their deposits, which can be claimed at any\\n *  time.\\n * To withdraw previously deposited tokens, a user must first send a withdraw\\n * request, and the withdrawal will be made available after a pending period.\\n * Withdrawals are not permitted during safety periods or while there is an \\n * active claim for a bounty payout.\\n *\\n * Bounties are payed out distributed between a few channels, and that \\n * distribution is set upon creation (the hacker gets part in direct transfer,\\n * part in vested reward and part in vested HAT token, part gets rewarded to\\n * the committee, part gets swapped to HAT token and burned and/or sent to Hats\\n * governance).\\n *\\n * NOTE: Vaults should not use tokens which do not guarantee that the amount\\n * specified is the amount transferred\\n *\\n * This project is open-source and can be found at:\\n * https://github.com/hats-finance/hats-contracts\\n */\\ninterface IHATVault is IERC4626Upgradeable {\\n\\n    /**\\n    * @notice Initialization parameters for the vault token\\n    * @param name The vault's name (concatenated as \\\"Hats Vault \\\" + name)\\n    * @param symbol The vault's symbol (concatenated as \\\"HAT\\\" + symbol)\\n    * @param rewardController The reward controller for the vault\\n    * @param asset The vault's native token\\n    * @param owner The address of the vault's owner \\n    * @param isPaused Whether to initialize the vault with deposits disabled\\n    * @param descriptionHash The hash of the vault's description\\n    */\\n    struct VaultInitParams {\\n        string name;\\n        string symbol;\\n        IRewardController[] rewardControllers;\\n        IERC20 asset;\\n        address owner;\\n        bool isPaused;\\n        string descriptionHash;\\n    }\\n\\n    // Only claims manager can make this call\\n    error OnlyClaimsManager();\\n    // Only registry owner\\n    error OnlyRegistryOwner();\\n    // Vault not started yet\\n    error VaultNotStartedYet();\\n    // First deposit must return at least MINIMAL_AMOUNT_OF_SHARES\\n    error AmountOfSharesMustBeMoreThanMinimalAmount();\\n    // Withdraw amount must be greater than zero\\n    error WithdrawMustBeGreaterThanZero();\\n    // Cannot mint burn or transfer 0 amount of shares\\n    error AmountCannotBeZero();\\n    // Cannot transfer shares to self\\n    error CannotTransferToSelf();\\n    // Cannot deposit to another user with withdraw request\\n    error CannotTransferToAnotherUserWithActiveWithdrawRequest();\\n    // Redeem amount cannot be more than maximum for user\\n    error RedeemMoreThanMax();\\n    // Deposit passed max slippage\\n    error DepositSlippageProtection();\\n    // Mint passed max slippage\\n    error MintSlippageProtection();\\n    // Withdraw passed max slippage\\n    error WithdrawSlippageProtection();\\n    // Redeem passed max slippage\\n    error RedeemSlippageProtection();\\n    // Cannot add the same reward controller more than once\\n    error DuplicatedRewardController();\\n    // Fee must be less than or equal to 2%\\n    error WithdrawalFeeTooBig();\\n    // System is in an emergency pause\\n    error SystemInEmergencyPause();\\n    // Only fee setter\\n    error OnlyFeeSetter();\\n    // Cannot unpasue deposits for a vault that was destroyed\\n    error CannotUnpauseDestroyedVault();\\n\\n    event AddRewardController(IRewardController indexed _newRewardController);\\n    event SetWithdrawalFee(uint256 _newFee);\\n    event VaultPayout(uint256 _amount);\\n    event SetDepositPause(bool _depositPause);\\n    event SetWithdrawPaused(bool _withdrawPaused);\\n    event VaultStarted();\\n    event VaultDestroyed();\\n    event SetVaultDescription(string _descriptionHash);\\n    event WithdrawRequest(\\n        address indexed _beneficiary,\\n        uint256 _withdrawEnableTime\\n    );\\n\\n    /**\\n    * @notice Initialize a vault token instance\\n    * @param _claimsManager The vault's claims manager\\n    * @param _params The vault token initialization parameters\\n    * @dev See {IHATVault-VaultInitParams} for more details\\n    * @dev Called when the vault token is created in {IHATVaultsRegistry-createVault}\\n    */\\n    function initialize(address _claimsManager, VaultInitParams calldata _params) external;\\n\\n    /**\\n    * @notice Adds a reward controller to the reward controllers list\\n    * @param _rewardController The reward controller to add\\n    */\\n    function addRewardController(IRewardController _rewardController) external;\\n\\n    /**\\n    * @notice Called by the vault's owner to disable all deposits to the vault\\n    * @param _depositPause Are deposits paused\\n    */\\n    function setDepositPause(bool _depositPause) external;\\n\\n    /**\\n    * @notice Called by the registry's fee setter to set the fee for \\n    * withdrawals from the vault.\\n    * @param _fee The new fee. Must be smaller than or equal to `MAX_WITHDRAWAL_FEE`\\n    */\\n    function setWithdrawalFee(uint256 _fee) external;\\n\\n    /**\\n    * @notice Make a payout out of the vault\\n    * @param _amount The amount to send out for the payout\\n    */\\n    function makePayout(uint256 _amount) external;\\n\\n    /**\\n    * @notice Called by the vault's claims manager to disable all withdrawals from the vault\\n    * @param _withdrawPaused Are withdraws paused\\n    */\\n    function setWithdrawPaused(bool _withdrawPaused) external;\\n\\n    /**\\n    * @notice Start the vault, deposits are disabled until the vault is first started\\n    */\\n    function startVault() external;\\n\\n\\n    /**\\n    * @notice Permanently disables deposits to the vault\\n    */\\n    function destroyVault() external;\\n\\n    /**\\n    * @notice Called by the registry's owner to change the description of the\\n    * vault in the Hats.finance UI\\n    * @param _descriptionHash the hash of the vault's description\\n    */\\n    function setVaultDescription(string calldata _descriptionHash) external;\\n    \\n    /** \\n    * @notice Returns the vault's version\\n    * @return The vault's version\\n    */\\n    function VERSION() external view returns(string calldata);\\n\\n    /** \\n    * @notice Returns the vault's registry\\n    * @return The registry's address\\n    */\\n    function registry() external view returns(IHATVaultsRegistry);\\n\\n    /** \\n    * @notice Returns the vault's registry\\n    * @return The registry's address\\n    */\\n    function claimsManager() external view returns(address);\\n\\n    /**\\n    * @notice Submit a request to withdraw funds from the vault.\\n    * The request will only be approved if there is no previous active\\n    * withdraw request.\\n    * The request will be pending for a period of\\n    * {HATVaultsRegistry.generalParameters.withdrawRequestPendingPeriod},\\n    * after which a withdraw will be possible for a duration of\\n    * {HATVaultsRegistry.generalParameters.withdrawRequestEnablePeriod}\\n    */\\n    function withdrawRequest() external;\\n\\n    /** \\n    * @notice Withdraw previously deposited funds from the vault and claim\\n    * the HAT reward that the user has earned.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param assets Amount of tokens to withdraw\\n    * @param receiver Address of receiver of the funds\\n    * @param owner Address of owner of the funds\\n    * @dev See {IERC4626-withdraw}.\\n    */\\n    function withdrawAndClaim(uint256 assets, address receiver, address owner)\\n        external \\n        returns (uint256 shares);\\n\\n    /** \\n    * @notice Redeem shares in the vault for the respective amount\\n    * of underlying assets and claim the HAT reward that the user has earned.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param shares Amount of shares to redeem\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds \\n    * @dev See {IERC4626-redeem}.\\n    */\\n    function redeemAndClaim(uint256 shares, address receiver, address owner)\\n        external \\n        returns (uint256 assets);\\n\\n    /** \\n    * @notice Redeem all of the user's shares in the vault for the respective amount\\n    * of underlying assets without calling the reward controller, meaning user renounces\\n    * their uncommited part of the reward.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param receiver Address of receiver of the funds \\n    */\\n    function emergencyWithdraw(address receiver) external returns (uint256 assets);\\n\\n    /** \\n    * @notice Withdraw previously deposited funds from the vault, without\\n    * transferring the accumulated rewards.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param assets Amount of tokens to withdraw\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds \\n    * @dev See {IERC4626-withdraw}.\\n    */\\n    function withdraw(uint256 assets, address receiver, address owner)\\n        external \\n        returns (uint256);\\n\\n    /** \\n    * @notice Redeem shares in the vault for the respective amount\\n    * of underlying assets, without transferring the accumulated reward.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param shares Amount of shares to redeem\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds \\n    * @dev See {IERC4626-redeem}.\\n    */\\n    function redeem(uint256 shares, address receiver, address owner)\\n        external  \\n        returns (uint256);\\n\\n    /**\\n    * @dev Deposit funds to the vault. Can only be called if the committee had\\n    * checked in and deposits are not paused, and the registry is not in an emergency pause.\\n    * @param receiver Reciever of the shares from the deposit\\n    * @param assets Amount of vault's native token to deposit\\n    * @dev See {IERC4626-deposit}.\\n    */\\n    function deposit(uint256 assets, address receiver) \\n        external\\n        returns (uint256);\\n\\n    /**\\n    * @dev Deposit funds to the vault. Can only be called if the committee had\\n    * checked in and deposits are not paused, and the registry is not in an emergency pause.\\n    * Allows to specify minimum shares to be minted for slippage protection.\\n    * @param receiver Reciever of the shares from the deposit\\n    * @param assets Amount of vault's native token to deposit\\n    * @param minShares Minimum amount of shares to minted for the assets\\n    */\\n    function deposit(uint256 assets, address receiver, uint256 minShares) \\n        external\\n        returns (uint256);\\n\\n    /**\\n    * @dev Deposit funds to the vault based on the amount of shares to mint specified.\\n    * Can only be called if the committee had checked in and deposits are not paused,\\n    * and the registry is not in an emergency pause.\\n    * Allows to specify maximum assets to be deposited for slippage protection.\\n    * @param receiver Reciever of the shares from the deposit\\n    * @param shares Amount of vault's shares to mint\\n    * @param maxAssets Maximum amount of assets to deposit for the shares\\n    */\\n    function mint(uint256 shares, address receiver, uint256 maxAssets) \\n        external\\n        returns (uint256);\\n\\n    /** \\n    * @notice Withdraw previously deposited funds from the vault, without\\n    * transferring the accumulated HAT reward.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * Allows to specify maximum shares to be burnt for slippage protection.\\n    * @param assets Amount of tokens to withdraw\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds\\n    * @param maxShares Maximum amount of shares to burn for the assets\\n    */\\n    function withdraw(uint256 assets, address receiver, address owner, uint256 maxShares)\\n        external \\n        returns (uint256);\\n\\n    /** \\n    * @notice Redeem shares in the vault for the respective amount\\n    * of underlying assets, without transferring the accumulated reward.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * Allows to specify minimum assets to be received for slippage protection.\\n    * @param shares Amount of shares to redeem\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds\\n    * @param minAssets Minimum amount of assets to receive for the shares\\n    */\\n    function redeem(uint256 shares, address receiver, address owner, uint256 minAssets)\\n        external  \\n        returns (uint256);\\n\\n    /** \\n    * @notice Withdraw previously deposited funds from the vault and claim\\n    * the HAT reward that the user has earned.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * Allows to specify maximum shares to be burnt for slippage protection.\\n    * @param assets Amount of tokens to withdraw\\n    * @param receiver Address of receiver of the funds\\n    * @param owner Address of owner of the funds\\n    * @param maxShares Maximum amount of shares to burn for the assets\\n    * @dev See {IERC4626-withdraw}.\\n    */\\n    function withdrawAndClaim(uint256 assets, address receiver, address owner, uint256 maxShares)\\n        external \\n        returns (uint256 shares);\\n\\n    /** \\n    * @notice Redeem shares in the vault for the respective amount\\n    * of underlying assets and claim the HAT reward that the user has earned.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * Allows to specify minimum assets to be received for slippage protection.\\n    * @param shares Amount of shares to redeem\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds\\n    * @param minAssets Minimum amount of assets to receive for the shares\\n    * @dev See {IERC4626-redeem}.\\n    */\\n    function redeemAndClaim(uint256 shares, address receiver, address owner, uint256 minAssets)\\n        external \\n        returns (uint256 assets);\\n\\n    /** \\n    * @notice Returns the amount of shares to be burned to give the user the exact\\n    * amount of assets requested plus cover for the fee. Also returns the amount assets\\n    * to be paid as fee.\\n    * @return shares The amount of shares to be burned to get the requested amount of assets\\n    * @return fee The amount of assets that will be paid as fee\\n    */\\n    function previewWithdrawAndFee(uint256 assets) external view returns (uint256 shares, uint256 fee);\\n\\n\\n    /** \\n    * @notice Returns the amount of assets to be sent to the user for the exact\\n    * amount of shares to redeem. Also returns the amount assets to be paid as fee.\\n    * @return assets amount of assets to be sent in exchange for the amount of shares specified\\n    * @return fee The amount of assets that will be paid as fee\\n    */\\n    function previewRedeemAndFee(uint256 shares) external view returns (uint256 assets, uint256 fee);\\n}\\n\",\"keccak256\":\"0x98e04ef364f09fb7ec4c4cb4bcc46973a98dc742b3399e82a21a8aee02f6c1b1\",\"license\":\"MIT\"},\"contracts/interfaces/IHATVaultsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./IHATVault.sol\\\";\\nimport \\\"./IHATClaimsManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/** @title Interface for the Hats.finance Vault Registry\\n * @author hats.finance\\n * @notice The Hats.finance Vault Registry is used to deploy Hats.finance\\n * vaults and manage shared parameters.\\n *\\n * Hats.finance is a proactive bounty protocol for white hat hackers and\\n * security experts, where projects, community members, and stakeholders\\n * incentivize protocol security and responsible disclosure.\\n * Hats create scalable vaults using the project\\u2019s own token. The value of the\\n * bounty increases with the success of the token and project.\\n *\\n * The owner of the registry has the permission to set time limits and bounty\\n * parameters and change vaults' info, and to set the other registry roles -\\n * fee setter and arbitrator.\\n * The arbitrator can challenge submitted claims for bounty payouts made by\\n * vaults' committees, approve them with a different bounty percentage or\\n * dismiss them.\\n * The fee setter can set the fee on withdrawals on all vaults.\\n *\\n * This project is open-source and can be found at:\\n * https://github.com/hats-finance/hats-contracts\\n *\\n * @dev New hats.finance vaults should be created through a call to {createVault}\\n * so that they are linked to the registry\\n */\\ninterface IHATVaultsRegistry {\\n\\n    // a struct with parameters for all vaults\\n    struct GeneralParameters {\\n        // vesting duration for the part of the bounty given to the hacker in HAT tokens\\n        uint32 hatVestingDuration;\\n        // vesting periods for the part of the bounty given to the hacker in HAT tokens\\n        uint32 hatVestingPeriods;\\n        // withdraw enable period. safetyPeriod starts when finished.\\n        uint32 withdrawPeriod;\\n        // withdraw disable period - time for the committee to gather and decide on actions,\\n        // withdrawals are not possible in this time. withdrawPeriod starts when finished.\\n        uint32 safetyPeriod;\\n        // period of time after withdrawRequestPendingPeriod where it is possible to withdraw\\n        // (after which withdrawals are not possible)\\n        uint32 withdrawRequestEnablePeriod;\\n        // period of time that has to pass after withdraw request until withdraw is possible\\n        uint32 withdrawRequestPendingPeriod;\\n        // period of time that has to pass after setting a pending max\\n        // bounty before it can be set as the new max bounty\\n        uint32 setMaxBountyDelay;\\n        // fee in ETH to be transferred with every logging of a claim\\n        uint256 claimFee;\\n    }\\n\\n    /**\\n     * @notice Raised on {setWithdrawSafetyPeriod} if the withdraw period to\\n     * be set is shorter than 1 hour\\n     */\\n    error WithdrawPeriodTooShort();\\n\\n    /**\\n     * @notice Raised on {setWithdrawSafetyPeriod} if the safety period to\\n     * be set is longer than 6 hours\\n     */\\n    error SafetyPeriodTooLong();\\n\\n    /**\\n     * @notice Raised on {setWithdrawRequestParams} if the withdraw request\\n     * pending period to be set is shorter than 3 months\\n     */\\n    error WithdrawRequestPendingPeriodTooLong();\\n\\n    /**\\n     * @notice Raised on {setWithdrawRequestParams} if the withdraw request\\n     * enabled period to be set is shorter than 6 hours\\n     */\\n    error WithdrawRequestEnabledPeriodTooShort();\\n\\n    /**\\n     * @notice Raised on {setWithdrawRequestParams} if the withdraw request\\n     * enabled period to be set is longer than 100 days\\n     */\\n    error WithdrawRequestEnabledPeriodTooLong();\\n\\n    /**\\n     * @notice Raised on {setHatVestingParams} if the vesting duration to be\\n     * set is longer than 180 days\\n     */\\n    error HatVestingDurationTooLong();\\n\\n    /**\\n     * @notice Raised on {setHatVestingParams} if the vesting periods to be\\n     * set is 0\\n     */\\n    error HatVestingPeriodsCannotBeZero();\\n    \\n    /**\\n     * @notice Raised on {setHatVestingParams} if the vesting duration is \\n     * smaller than the vesting periods\\n     */\\n    error HatVestingDurationSmallerThanPeriods();\\n\\n    /**\\n     * @notice Raised on {setMaxBountyDelay} if the max bounty to be set is\\n     * shorter than 2 days\\n     */\\n    error DelayTooShort();\\n\\n    /**\\n     * @notice Raised on {swapAndSend} if the amount to swap is zero\\n     */\\n    error AmountToSwapIsZero();\\n\\n    /**\\n     * @notice Raised on {swapAndSend} if the swap was not successful\\n     */\\n    error SwapFailed();\\n    // Wrong amount received\\n\\n    /**\\n     * @notice Raised on {swapAndSend} if the amount that was recieved in\\n     * the swap was less than the minimum amount specified\\n     */\\n    error AmountSwappedLessThanMinimum();\\n\\n    /**\\n     * @notice Raised on {setDefaultHATBountySplit} if the split to be set is\\n     * greater than 20% (defined as 2000)\\n     */\\n    error TotalHatsSplitPercentageShouldBeUpToMaxHATSplit();\\n\\n    /**\\n     * @notice Raised on {setDefaultChallengePeriod} if the challenge period\\n     *  to be set is shorter than 1 day\\n     */\\n    error ChallengePeriodTooShort();\\n\\n    /**\\n     * @notice Raised on {setDefaultChallengePeriod} if the challenge period\\n     *  to be set is longer than 5 days\\n     */\\n    error ChallengePeriodTooLong();\\n        \\n    /**\\n     * @notice Raised on {setDefaultChallengeTimeOutPeriod} if the challenge\\n     * timeout period to be set is shorter than 1 day\\n     */\\n    error ChallengeTimeOutPeriodTooShort();\\n\\n    /**\\n     * @notice Raised on {setDefaultChallengeTimeOutPeriod} if the challenge\\n     * timeout period to be set is longer than 125 days\\n     */\\n    error ChallengeTimeOutPeriodTooLong();\\n    \\n    /**\\n     * @notice Raised on {LogClaim} if the transaction was not sent with the\\n     * amount of ETH specified as {generalParameters.claimFee}\\n     */\\n    error NotEnoughFeePaid();\\n\\n    /**\\n     * @notice Raised on {LogClaim} if the transfer of the claim fee failed\\n     */\\n    error ClaimFeeTransferFailed();\\n\\n    /**\\n     * @notice Emitted on deployment of the registry\\n     * @param _hatVaultImplementation The HATVault implementation address\\n     * @param _hatClaimsManagerImplementation The HATClaimsManager implementation address\\n     * @param _HAT The HAT token address\\n     * @param _tokenLockFactory The token lock factory address\\n     * @param _generalParameters The registry's general parameters\\n     * @param _bountyGovernanceHAT The HAT bounty for governance\\n     * @param _bountyHackerHATVested The HAT bounty vested for the hacker\\n     * @param _hatGovernance The registry's governance\\n     * @param _defaultChallengePeriod The new default challenge period\\n     * @param _defaultChallengeTimeOutPeriod The new default challenge timeout\\n     */\\n    event RegistryCreated(\\n        address _hatVaultImplementation,\\n        address _hatClaimsManagerImplementation,\\n        address _HAT,\\n        address _tokenLockFactory,\\n        GeneralParameters _generalParameters,\\n        uint256 _bountyGovernanceHAT,\\n        uint256 _bountyHackerHATVested,\\n        address _hatGovernance,\\n        address _defaultArbitrator,\\n        uint256 _defaultChallengePeriod,\\n        uint256 _defaultChallengeTimeOutPeriod\\n    );\\n\\n    /**\\n     * @notice Emitted when a claim is logged\\n     * @param _claimer The address of the claimer\\n     * @param _descriptionHash - a hash of an ipfs encrypted file which\\n     * describes the claim.\\n     */\\n    event LogClaim(address indexed _claimer, string _descriptionHash);\\n\\n    /**\\n     * @notice Emitted when a new fee setter is set\\n     * @param _feeSetter The address of the new fee setter\\n     */\\n    event SetFeeSetter(address indexed _feeSetter);\\n\\n    /**\\n     * @notice Emitted when new withdraw request time limits are set\\n     * @param _withdrawRequestPendingPeriod Time period where the withdraw\\n     * request is pending\\n     * @param _withdrawRequestEnablePeriod Time period after the peding period\\n     * has ended during which withdrawal is enabled\\n     */\\n    event SetWithdrawRequestParams(\\n        uint256 _withdrawRequestPendingPeriod,\\n        uint256 _withdrawRequestEnablePeriod\\n    );\\n\\n    /**\\n     * @notice Emitted when a new fee for logging a claim for a bounty is set\\n     * @param _fee Claim fee in ETH to be transferred on any call of {logClaim}\\n     */\\n    event SetClaimFee(uint256 _fee);\\n\\n    /**\\n     * @notice Emitted when new durations are set for withdraw period and\\n     * safety period\\n     * @param _withdrawPeriod Amount of time during which withdrawals are\\n     * enabled, and the bounty split can be changed by the governance\\n     * @param _safetyPeriod Amount of time during which claims for bounties \\n     * can be submitted and withdrawals are disabled\\n     */\\n    event SetWithdrawSafetyPeriod(\\n        uint256 _withdrawPeriod,\\n        uint256 _safetyPeriod\\n    );\\n\\n    /**\\n     * @notice Emitted when new HAT vesting parameters are set\\n     * @param _duration The duration of the vesting period\\n     * @param _periods The number of vesting periods\\n     */\\n    event SetHatVestingParams(uint256 _duration, uint256 _periods);\\n\\n    /**\\n     * @notice Emitted when a new timelock delay for setting the\\n     * max bounty is set\\n     * @param _delay The time period for the delay\\n     */\\n    event SetMaxBountyDelay(uint256 _delay);\\n\\n    /**\\n     * @notice Emitted when the UI visibility of a vault is changed\\n     * @param _vault The address of the vault to update\\n     * @param _visible Is this vault visible in the UI\\n     */\\n    event SetVaultVisibility(address indexed _vault, bool indexed _visible);\\n\\n    /** @dev Emitted when a new vault is created\\n     * @param _vault The address of the vault to add to the registry\\n     * @param _claimsManager The address of the vault's claims manager\\n     * @param _vaultParams The vault initialization parameters\\n     * @param _claimsManagerParams The vault's claims manager initialization parameters\\n     */\\n    event VaultCreated(\\n        address indexed _vault,\\n        address indexed _claimsManager,\\n        IHATVault.VaultInitParams _vaultParams,\\n        IHATClaimsManager.ClaimsManagerInitParams _claimsManagerParams\\n    );\\n    \\n    /** @notice Emitted when a swap of vault tokens to HAT tokens is done and\\n     * the HATS tokens are sent to beneficiary through vesting contract\\n     * @param _beneficiary Address of beneficiary\\n     * @param _amountSwapped Amount of vault's native tokens that was swapped\\n     * @param _amountSent Amount of HAT tokens sent to beneficiary\\n     * @param _tokenLock Address of the token lock contract that holds the HAT\\n     * tokens (address(0) if no token lock is used)\\n     */\\n    event SwapAndSend(\\n        address indexed _beneficiary,\\n        uint256 _amountSwapped,\\n        uint256 _amountSent,\\n        address indexed _tokenLock\\n    );\\n\\n    /**\\n     * @notice Emitted when a new default HAT bounty split is set\\n     * @param _defaultBountyGovernanceHAT The new default HAT bounty part sent to governance\\n     * @param _defaultBountyHackerHATVested The new default HAT bounty part vseted for the hacker\\n     */\\n    event SetDefaultHATBountySplit(uint256 _defaultBountyGovernanceHAT, uint256 _defaultBountyHackerHATVested);\\n\\n    /**\\n     * @notice Emitted when a new default arbitrator is set\\n     * @param _defaultArbitrator The address of the new arbitrator\\n     */\\n    event SetDefaultArbitrator(address indexed _defaultArbitrator);\\n\\n    /**\\n     * @notice Emitted when a new default challenge period is set\\n     * @param _defaultChallengePeriod The new default challenge period\\n     */ \\n    event SetDefaultChallengePeriod(uint256 _defaultChallengePeriod);\\n\\n    /**\\n     * @notice Emitted when a new default challenge timeout period is set\\n     * @param _defaultChallengeTimeOutPeriod The new default challenge timeout\\n     * period\\n     */\\n    event SetDefaultChallengeTimeOutPeriod(uint256 _defaultChallengeTimeOutPeriod);\\n\\n    /** @notice Emitted when the system is put into emergency pause/unpause\\n     * @param _isEmergencyPaused Is the system in an emergency pause\\n     */\\n    event SetEmergencyPaused(bool _isEmergencyPaused);\\n\\n    /**\\n     * @notice Emitted when a new swap token is set\\n     * @param _swapToken The new swap token address\\n     */\\n    event SetSwapToken(address indexed _swapToken);\\n\\n    /**\\n     * @notice Emitted when a new HATVault implementation is set\\n     * @param _hatVaultImplementation The address of the new HATVault implementation\\n     */\\n    event SetHATVaultImplementation(address indexed _hatVaultImplementation);\\n\\n    /**\\n     * @notice Emitted when a new HATClaimsManager implementation is set\\n     * @param _hatClaimsManagerImplementation The address of the new HATClaimsManager implementation\\n     */\\n    event SetHATClaimsManagerImplementation(address indexed _hatClaimsManagerImplementation);\\n\\n    /**\\n     * @notice Called by governance to pause/unpause the system in case of an\\n     * emergency\\n     * @param _isEmergencyPaused Is the system in an emergency pause\\n     */\\n    function setEmergencyPaused(bool _isEmergencyPaused) external;\\n\\n    /**\\n     * @notice Called by governance to set a new swap token\\n     * @param _swapToken the new swap token address\\n     */\\n    function setSwapToken(address _swapToken) external;\\n\\n    /**\\n     * @notice Called by governance to set a new HATVault and HATVault implementation to be\\n     * used by the registry for creating new vaults\\n     * @param _hatVaultImplementation The address of the HATVault implementation\\n     * @param _hatClaimsManagerImplementation The address of the HATClaimsManager implementation\\n     */\\n    function setVaultImplementations(address _hatVaultImplementation, address _hatClaimsManagerImplementation) external;\\n\\n    /**\\n     * @notice Emit an event that includes the given _descriptionHash\\n     * This can be used by the claimer as evidence that she had access to the\\n     * information at the time of the call\\n     * if a {generalParameters.claimFee} > 0, the caller must send that amount\\n     * of ETH for the claim to succeed\\n     * @param _descriptionHash - a hash of an IPFS encrypted file which \\n     * describes the claim.\\n     */\\n    function logClaim(string calldata _descriptionHash) external payable;\\n\\n    /**\\n     * @notice Called by governance to set the default percentage of each claim bounty\\n     * that will be swapped for hats and sent to the governance or vested for the hacker\\n     * @param _defaultBountyGovernanceHAT The HAT bounty for governance\\n     * @param _defaultBountyHackerHATVested The HAT bounty vested for the hacker\\n     */\\n    function setDefaultHATBountySplit(\\n        uint16 _defaultBountyGovernanceHAT,\\n        uint16 _defaultBountyHackerHATVested\\n    ) \\n        external;\\n\\n    /** \\n     * @dev Check that a given hats bounty split is legal, meaning that:\\n     *   Each entry is a number between 0 and less than `MAX_HAT_SPLIT`.\\n     *   Total splits should be less than `MAX_HAT_SPLIT`.\\n     * function will revert in case the bounty split is not legal.\\n     * @param _bountyGovernanceHAT The HAT bounty for governance\\n     * @param _bountyHackerHATVested The HAT bounty vested for the hacker\\n     */\\n    function validateHATSplit(uint16 _bountyGovernanceHAT, uint16 _bountyHackerHATVested)\\n         external\\n         pure;\\n\\n    /**\\n     * @notice Called by governance to set the default arbitrator.\\n     * @param _defaultArbitrator The default arbitrator address\\n     */\\n    function setDefaultArbitrator(address _defaultArbitrator) external;\\n\\n    /**\\n     * @notice Called by governance to set the default challenge period\\n     * @param _defaultChallengePeriod The default challenge period\\n     */\\n    function setDefaultChallengePeriod(uint32 _defaultChallengePeriod) \\n        external;\\n\\n    /**\\n     * @notice Called by governance to set the default challenge timeout\\n     * @param _defaultChallengeTimeOutPeriod The Default challenge timeout\\n     */\\n    function setDefaultChallengeTimeOutPeriod(\\n        uint32 _defaultChallengeTimeOutPeriod\\n    ) \\n        external;\\n\\n    /**\\n     * @notice Check that the given challenge period is legal, meaning that it\\n     * is greater than 1 day and less than 5 days.\\n     * @param _challengePeriod The challenge period to check\\n     */\\n    function validateChallengePeriod(uint32 _challengePeriod) external pure;\\n\\n    /**\\n     * @notice Check that the given challenge timeout period is legal, meaning\\n     * that it is greater than 2 days and less than 125 days.\\n     * @param _challengeTimeOutPeriod The challenge timeout period to check\\n     */\\n    function validateChallengeTimeOutPeriod(uint32 _challengeTimeOutPeriod) external pure;\\n   \\n    /**\\n     * @notice Called by governance to set the fee setter role\\n     * @param _feeSetter Address of new fee setter\\n     */\\n    function setFeeSetter(address _feeSetter) external;\\n\\n    /**\\n     * @notice Called by governance to set time limits for withdraw requests\\n     * @param _withdrawRequestPendingPeriod Time period where the withdraw\\n     * request is pending\\n     * @param _withdrawRequestEnablePeriod Time period after the peding period\\n     * has ended during which withdrawal is enabled\\n     */\\n    function setWithdrawRequestParams(\\n        uint32 _withdrawRequestPendingPeriod,\\n        uint32  _withdrawRequestEnablePeriod\\n    )\\n        external;\\n\\n    /**\\n     * @notice Called by governance to set the fee for logging a claim for a\\n     * bounty in any vault.\\n     * @param _fee Claim fee in ETH to be transferred on any call of\\n     * {logClaim}\\n     */\\n    function setClaimFee(uint256 _fee) external;\\n\\n    /**\\n     * @notice Called by governance to set the withdraw period and safety\\n     * period, which are always interchanging.\\n     * The safety period is time that the committee can submit claims for \\n     * bounty payouts, and during which withdrawals are disabled and the\\n     * bounty split cannot be changed.\\n     * @param _withdrawPeriod Amount of time during which withdrawals are\\n     * enabled, and the bounty split can be changed by the governance. Must be\\n     * at least 1 hour.\\n     * @param _safetyPeriod Amount of time during which claims for bounties \\n     * can be submitted and withdrawals are disabled. Must be at most 6 hours.\\n     */\\n    function setWithdrawSafetyPeriod(\\n        uint32 _withdrawPeriod,\\n        uint32 _safetyPeriod\\n    ) \\n        external;\\n\\n    /**\\n     * @notice Called by governance to set vesting params for rewarding hackers\\n     * with rewardToken, for all vaults\\n     * @param _duration Duration of the vesting period. Must be less than 180\\n     * days.\\n     * @param _periods The number of vesting periods. Must be more than 0 and \\n     * less then the vesting duration.\\n     */\\n    function setHatVestingParams(uint32 _duration, uint32 _periods) external;\\n\\n    /**\\n     * @notice Called by governance to set the timelock delay for setting the\\n     * max bounty (the time between setPendingMaxBounty and setMaxBounty)\\n     * @param _delay The time period for the delay. Must be at least 2 days.\\n     */\\n    function setMaxBountyDelay(uint32 _delay) external;\\n\\n    /**\\n     * @notice Create a new vault\\n     * NOTE: Vaults should not use tokens which do not guarantee that the \\n     * amount specified is the amount transferred\\n     * @param _vaultParams The vault initialization parameters\\n     * @param _vaultParams The vault token initialization parameters\\n     * @return vault The address of the new vault\\n     */\\n    function createVault(\\n        IHATVault.VaultInitParams calldata _vaultParams,\\n        IHATClaimsManager.ClaimsManagerInitParams calldata _claimsManagerParams\\n    ) external returns(address vault, address vaultClaimsManager);\\n\\n    /**\\n     * @notice Called by governance to change the UI visibility of a vault\\n     * @param _vault The address of the vault to update\\n     * @param _visible Is this vault visible in the UI\\n     * This parameter can be used by the UI to include or exclude the vault\\n     */\\n    function setVaultVisibility(address _vault, bool _visible) external;\\n\\n    /**\\n     * @notice Transfer the part of the bounty that is supposed to be swapped\\n     * into HAT tokens from the HATVault to the registry, and keep track of\\n     * the amounts to be swapped and sent/burnt in a later transaction\\n     * @param _asset The vault's native token\\n     * @param _hacker The address of the beneficiary of the bounty\\n     * @param _hackersHatReward The amount of the vault's native token to be\\n     * swapped to HAT tokens and sent to the hacker via a vesting contract\\n     * @param _governanceHatReward The amount of the vault's native token to\\n     * be swapped to HAT tokens and sent to governance\\n     */\\n    function addTokensToSwap(\\n        IERC20 _asset,\\n        address _hacker,\\n        uint256 _hackersHatReward,\\n        uint256 _governanceHatReward\\n    ) external;\\n\\n    /**\\n     * @notice Called by governance to swap the given asset to HAT tokens and \\n     * distribute the HAT tokens: Send to governance their share and send to\\n     * beneficiaries their share through a vesting contract.\\n     * @param _asset The address of the token to be swapped to HAT tokens\\n     * @param _beneficiaries Addresses of beneficiaries\\n     * @param _amountOutMinimum Minimum amount of HAT tokens at swap\\n     * @param _routingContract Routing contract to call for the swap\\n     * @param _routingPayload Payload to send to the _routingContract for the\\n     * swap\\n     */\\n    function swapAndSend(\\n        address _asset,\\n        address[] calldata _beneficiaries,\\n        uint256 _amountOutMinimum,\\n        address _routingContract,\\n        bytes calldata _routingPayload\\n    ) external;\\n  \\n    /**\\n     * @notice Returns the withdraw enable period for all vaults. The safety\\n     * period starts when finished.\\n     * @return Withdraw enable period for all vaults\\n     */\\n    function getWithdrawPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the withdraw disable period - time for the committee to\\n     * gather and decide on actions, withdrawals are not possible in this\\n     * time. The withdraw period starts when finished.\\n     * @return Safety period for all vaults\\n     */\\n    function getSafetyPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the withdraw request enable period for all vaults -\\n     * period of time after withdrawRequestPendingPeriod where it is possible\\n     * to withdraw, and after which withdrawals are not possible.\\n     * @return Withdraw request enable period for all vaults\\n     */\\n    function getWithdrawRequestEnablePeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the withdraw request pending period for all vaults -\\n     * period of time that has to pass after withdraw request until withdraw\\n     * is possible\\n     * @return Withdraw request pending period for all vaults\\n     */\\n    function getWithdrawRequestPendingPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the set max bounty delay for all vaults - period of\\n     * time that has to pass after setting a pending max bounty before it can\\n     * be set as the new max bounty\\n     * @return Set max bounty delay for all vaults\\n     */\\n    function getSetMaxBountyDelay() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the number of vaults that have been previously created\\n     * @return The number of vaults in the registry\\n     */\\n    function getNumberOfVaults() external view returns(uint256);\\n\\n    /**\\n     * @notice Get the fee setter address\\n     * @return The address of the fee setter\\n     */\\n    function feeSetter() external view returns(address);\\n\\n    /**\\n     * @notice Get whether the system is in an emergency pause\\n     * @return Whether the system is in an emergency pause\\n     */\\n    function isEmergencyPaused() external view returns(bool);\\n\\n    /**\\n     * @notice Get the owner address\\n     * @return The address of the owner\\n     */\\n    function owner() external view returns(address);\\n\\n    /**\\n     * @notice Get the default percentage of the total bounty to be swapped to HATs and sent to governance\\n     * @return The default percentage of the total bounty to be swapped to HATs and sent to governance\\n     */\\n    function defaultBountyGovernanceHAT() external view returns(uint16);\\n\\n    /**\\n     * @notice Get the default percentage of the total bounty to be swapped to HATs and sent to the hacker via vesting contract\\n     * @return The default percentage of the total bounty to be swapped to HATs and sent to the hacker via vesting contract\\n     */\\n    function defaultBountyHackerHATVested() external view returns(uint16);\\n\\n    /**\\n     * @notice Get the default arbitrator address\\n     * @return The default arbitrator address\\n     */\\n    function defaultArbitrator() external view returns(address);\\n\\n    /**\\n     * @notice Get the default challenge period\\n     * @return The default challenge period\\n     */\\n    function defaultChallengePeriod() external view returns(uint32);\\n\\n    /**\\n     * @notice Get the default challenge time out period\\n     * @return The default challenge time out period\\n     */\\n    function defaultChallengeTimeOutPeriod() external view returns(uint32);\\n}\\n\",\"keccak256\":\"0x71f2cbbf2b35c973777713f5cf4680ecf9af466db56c1c4ca2bf08b97b55e882\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IRewardController {\\n    \\n    error EpochLengthZero();\\n    // Not enough rewards to transfer to user\\n    error NotEnoughRewardsToTransferToUser();\\n\\n    event RewardControllerCreated(\\n        address _rewardToken,\\n        address _governance,\\n        uint256 _startBlock,\\n        uint256 _epochLength,\\n        uint256[24] _epochRewardPerBlock\\n    );\\n    event SetEpochRewardPerBlock(uint256[24] _epochRewardPerBlock);\\n    event SetAllocPoint(address indexed _vault, uint256 _prevAllocPoint, uint256 _allocPoint);\\n    event VaultUpdated(address indexed _vault, uint256 _rewardPerShare, uint256 _lastProcessedVaultUpdate);\\n    event UserBalanceCommitted(address indexed _vault, address indexed _user, uint256 _unclaimedReward, uint256 _rewardDebt);\\n    event ClaimReward(address indexed _vault, address indexed _user, uint256 _amount);\\n\\n    /**\\n     * @notice Initializes the reward controller\\n     * @param _rewardToken The address of the ERC20 token to be distributed as rewards\\n     * @param _governance The hats governance address, to be given ownership of the reward controller\\n     * @param _startRewardingBlock The block number from which to start rewarding\\n     * @param _epochLength The length of a rewarding epoch\\n     * @param _epochRewardPerBlock The reward per block for each of the 24 epochs\\n     */\\n    function initialize(\\n        address _rewardToken,\\n        address _governance,\\n        uint256 _startRewardingBlock,\\n        uint256 _epochLength,\\n        uint256[24] calldata _epochRewardPerBlock\\n    ) external;\\n\\n    /**\\n     * @notice Called by the owner to set the allocation points for a vault, meaning the\\n     * vault's relative share of the total rewards\\n     * @param _vault The address of the vault\\n     * @param _allocPoint The allocation points for the vault\\n     */\\n    function setAllocPoint(address _vault, uint256 _allocPoint) external;\\n\\n    /**\\n    * @notice Update the vault's reward per share, not more then once per block\\n    * @param _vault The vault's address\\n    */\\n    function updateVault(address _vault) external;\\n\\n    /**\\n    * @notice Called by the owner to set reward per epoch\\n    * Reward can only be set for epochs which have not yet started\\n    * @param _epochRewardPerBlock reward per block for each epoch\\n    */\\n    function setEpochRewardPerBlock(uint256[24] calldata _epochRewardPerBlock) external;\\n\\n    /**\\n    * @notice Called by the vault to update a user claimable reward after deposit or withdraw.\\n    * This call should never revert.\\n    * @param _user The user address to updare rewards for\\n    * @param _sharesChange The user of shared the user deposited or withdrew\\n    * @param _isDeposit Whether user deposited or withdrew\\n    */\\n    function commitUserBalance(address _user, uint256 _sharesChange, bool _isDeposit) external;\\n    /**\\n    * @notice Transfer to the specified user their pending share of rewards.\\n    * @param _vault The vault address\\n    * @param _user The user address to claim for\\n    */\\n    function claimReward(address _vault, address _user) external;\\n\\n    /**\\n    * @notice Calculate rewards for a vault by iterating over the history of totalAllocPoints updates,\\n    * and sum up all rewards periods from vault.lastRewardBlock until current block number.\\n    * @param _vault The vault address\\n    * @param _fromBlock The block from which to start calculation\\n    * @return reward The amount of rewards for the vault\\n    */\\n    function getVaultReward(address _vault, uint256 _fromBlock) external view returns(uint256 reward);\\n\\n    /**\\n    * @notice Calculate the amount of rewards a user can claim for having contributed to a specific vault\\n    * @param _vault The vault address\\n    * @param _user The user for which the reward is calculated\\n    */\\n    function getPendingReward(address _vault, address _user) external view returns (uint256);\\n\\n    /**\\n    * @notice Called by the owner to transfer any tokens held in this contract to the owner\\n    * @param _token The token to sweep\\n    * @param _amount The amount of token to sweep\\n    */\\n    function sweepToken(IERC20Upgradeable _token, uint256 _amount) external;\\n\\n}\\n\",\"keccak256\":\"0x6eceb6516497db7ea79c8f571b03359ec1e53489222c9fffd60aa2f4496e0d23\",\"license\":\"MIT\"},\"contracts/tokenlock/ITokenLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITokenLock {\\n\\n    // -- Value Transfer --\\n\\n    function release() external;\\n\\n    function withdrawSurplus(uint256 _amount) external;\\n\\n    function sweepToken(IERC20 _token) external;\\n\\n    function revoke() external;\\n\\n    // -- Balances --\\n\\n    function currentBalance() external view returns (uint256);\\n\\n    // -- Time & Periods --\\n\\n    function currentTime() external view returns (uint256);\\n\\n    function duration() external view returns (uint256);\\n\\n    function sinceStartTime() external view returns (uint256);\\n\\n    function amountPerPeriod() external view returns (uint256);\\n\\n    function periodDuration() external view returns (uint256);\\n\\n    function currentPeriod() external view returns (uint256);\\n\\n    function passedPeriods() external view returns (uint256);\\n\\n    // -- Locking & Release Schedule --\\n\\n    function availableAmount() external view returns (uint256);\\n\\n    function vestedAmount() external view returns (uint256);\\n\\n    function releasableAmount() external view returns (uint256);\\n\\n    function totalOutstandingAmount() external view returns (uint256);\\n\\n    function surplusAmount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0fc3b0dac2deeb7a7486aa2828d1bee2e0b9d0e9ced2e30d66bd3a0960801681\",\"license\":\"MIT\"},\"contracts/tokenlock/ITokenLockFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./ITokenLock.sol\\\";\\n\\ninterface ITokenLockFactory {\\n    // -- Factory --\\n    function setMasterCopy(address _masterCopy) external;\\n\\n    function createTokenLock(\\n        address _token,\\n        address _owner,\\n        address _beneficiary,\\n        uint256 _managedAmount,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _periods,\\n        uint256 _releaseStartTime,\\n        uint256 _vestingCliffTime,\\n        bool _revocable,\\n        bool _canDelegate\\n    ) external returns(address contractAddress);\\n}\\n\",\"keccak256\":\"0xcdf2d751b898857cb41277b6757c1f817d5e4eba506fbaa7cb5e13a86078be10\",\"license\":\"MIT\"},\"contracts/tokenlock/TokenLockFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./ITokenLockFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\n/**\\n * @title TokenLockFactory\\n *  a factory of TokenLock contracts.\\n *\\n * This contract receives funds to make the process of creating TokenLock contracts\\n * easier by distributing them the initial tokens to be managed.\\n */\\ncontract TokenLockFactory is ITokenLockFactory, Ownable {\\n    // -- Errors --\\n\\n    error MasterCopyCannotBeZero();\\n\\n    // -- State --\\n\\n    address public masterCopy;\\n    mapping(address => uint256) public nonce;\\n\\n    // -- Events --\\n\\n    event MasterCopyUpdated(address indexed masterCopy);\\n\\n    event TokenLockCreated(\\n        address indexed contractAddress,\\n        bytes32 indexed initHash,\\n        address indexed beneficiary,\\n        address token,\\n        uint256 managedAmount,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 periods,\\n        uint256 releaseStartTime,\\n        uint256 vestingCliffTime,\\n        bool revocable,\\n        bool canDelegate\\n    );\\n\\n    /**\\n     * Constructor.\\n     * @param _masterCopy Address of the master copy to use to clone proxies\\n     * @param _governance Owner of the factory\\n     */\\n    constructor(address _masterCopy, address _governance) {\\n        _setMasterCopy(_masterCopy);\\n        _transferOwnership(_governance);\\n    }\\n\\n    // -- Factory --\\n    /**\\n     * @notice Creates and fund a new token lock wallet using a minimum proxy\\n     * @param _token token to time lock\\n     * @param _owner Address of the contract owner\\n     * @param _beneficiary Address of the beneficiary of locked tokens\\n     * @param _managedAmount Amount of tokens to be managed by the lock contract\\n     * @param _startTime Start time of the release schedule\\n     * @param _endTime End time of the release schedule\\n     * @param _periods Number of periods between start time and end time\\n     * @param _releaseStartTime Override time for when the releases start\\n     * @param _revocable Whether the contract is revocable\\n     * @param _canDelegate Whether the contract should call delegate\\n     */\\n    function createTokenLock(\\n        address _token,\\n        address _owner,\\n        address _beneficiary,\\n        uint256 _managedAmount,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _periods,\\n        uint256 _releaseStartTime,\\n        uint256 _vestingCliffTime,\\n        bool _revocable,\\n        bool _canDelegate\\n    ) external override returns(address contractAddress) {\\n        // Create contract using a minimal proxy and call initializer\\n        bytes memory initializer = abi.encodeWithSignature(\\n            \\\"initialize(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool)\\\",\\n            _owner,\\n            _beneficiary,\\n            _token,\\n            _managedAmount,\\n            _startTime,\\n            _endTime,\\n            _periods,\\n            _releaseStartTime,\\n            _vestingCliffTime,\\n            _revocable,\\n            _canDelegate\\n        );\\n\\n        contractAddress = _deployProxyPrivate(initializer,\\n        _beneficiary,\\n        _token,\\n        _managedAmount,\\n        _startTime,\\n        _endTime,\\n        _periods,\\n        _releaseStartTime,\\n        _vestingCliffTime,\\n        _revocable,\\n        _canDelegate);\\n    }\\n\\n    /**\\n     * @notice Sets the masterCopy bytecode to use to create clones of TokenLock contracts\\n     * @param _masterCopy Address of contract bytecode to factory clone\\n     */\\n    function setMasterCopy(address _masterCopy) external override onlyOwner {\\n        _setMasterCopy(_masterCopy);\\n    }\\n\\n    function _setMasterCopy(address _masterCopy) internal {\\n        if (_masterCopy == address(0))\\n            revert MasterCopyCannotBeZero();\\n        masterCopy = _masterCopy;\\n        emit MasterCopyUpdated(_masterCopy);\\n    }\\n\\n    // This private function is to handle stack too deep issue\\n    function _deployProxyPrivate(\\n        bytes memory _initializer,\\n        address _beneficiary,\\n        address _token,\\n        uint256 _managedAmount,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _periods,\\n        uint256 _releaseStartTime,\\n        uint256 _vestingCliffTime,\\n        bool _revocable,\\n        bool _canDelegate\\n    ) private returns (address contractAddress) {\\n\\n        contractAddress = Clones.cloneDeterministic(masterCopy, keccak256(abi.encodePacked(msg.sender, nonce[msg.sender]++, _initializer)));\\n\\n        Address.functionCall(contractAddress, _initializer);\\n\\n        emit TokenLockCreated(\\n            contractAddress,\\n            keccak256(_initializer),\\n            _beneficiary,\\n            _token,\\n            _managedAmount,\\n            _startTime,\\n            _endTime,\\n            _periods,\\n            _releaseStartTime,\\n            _vestingCliffTime,\\n            _revocable,\\n            _canDelegate\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x14e5d85d9ed563be70a8ee8e95576dc2dafbfcedb780eaae62852c8e4c5490a7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576137bf908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c806301e1d1141461190b57806306fdde031461186557806307a2d13a14611828578063095ea7b3146118025780630a28a477146117e45780630ecdd7e3146111bb57806318160ddd1461119d5780631eb08ba91461117457806323b872dd1461113c5780632ec6f2681461111d5780632f3ffb9f146110f6578063313ce567146110d257806337d151391461105d578063380e687a14610f9357806338d52e0f14610f6a5780633950935114610f19578063402d267d146106485780634872363314610edf5780634cdad50614610eb85780635d1c236d14610e5c5780636ba2b14814610df85780636e22558d14610dd15780636e553f6514610dab5780636ed93dd014610d8e5780636ff1c9bc14610d3657806370a0823114610cfc578063715018a614610c9a5780637778114514610c225780637901808b14610c025780637b10399914610bd9578063836a104014610b9e57806386d192e514610b155780638bc7e8c414610af75780638da5cb5b14610ace57806394bf804d14610aa857806395827fdd14610a8957806395d89b41146109c15780639f40a7b3146109a5578063a318c1a414610989578063a417e00c146108a9578063a457c2d714610802578063a9059cbb146107d1578063ac1e502514610701578063b3d7f6b9146106bf578063b460af94146106a6578063ba0876521461068d578063bc157ac114610651578063c63d75b614610648578063c6e6f592146103d6578063c9e555291461062a578063ce96cb7714610607578063cee73a76146105e3578063d0855293146105bd578063d905777e14610592578063da80764a14610537578063db3835bc1461051a578063dd62ed3e146104c9578063e448504114610418578063e5b5019a146103fb578063eb6ed330146103df578063ef8b30f7146103d6578063f2fde38b14610347578063f4d0fb991461031d5763ffa1ad74146102dd57600080fd5b3461000e57600036600319011261000e576103196040516102fd81611aee565b60038152620332e360ec1b602082015260405191829182611926565b0390f35b3461000e57602036600319011261000e57604061033b60043561319c565b82519182526020820152f35b3461000e57602036600319011261000e5761036061196f565b610368611b45565b6001600160a01b038116156103825761038090611b9d565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b5061000e611a58565b3461000e57600036600319011261000e57602060405160c88152f35b3461000e57600036600319011261000e5760206040516000198152f35b3461000e57602036600319011261000e576004356001600160a01b03808216820361000e5780602060049260fc541660405193848092638da5cb5b60e01b82525afa9182156104bd5760009261048d575b503391160361047b576103809061366c565b60405163d61d1ac760e01b8152600490fd5b6104af91925060203d81116104b6575b6104a78183611b24565b81019061299c565b9083610469565b503d61049d565b6040513d6000823e3d90fd5b3461000e57604036600319011261000e576104e261196f565b6104ea611985565b9060018060a01b038091166000526034602052604060002091166000526020526020604060002054604051908152f35b3461000e57600036600319011261000e5760206040516103e88152f35b3461000e57602036600319011261000e5760043560fe5481101561000e5760fe6000527f54075df80ec1ae6ac9100e1fd0ebf3246c17f5c933137af392011f4c5f61513a01546040516001600160a01b039091168152602090f35b3461000e57602036600319011261000e5760206105b56105b061196f565b613103565b604051908152f35b3461000e5760206105dd6105b56105d3366119f9565b9391908491612a11565b916131c9565b3461000e57600036600319011261000e57602060ff61010054166040519015158152f35b3461000e57602036600319011261000e5760206105b561062561196f565b6130b3565b3461000e57602036600319011261000e57604061033b600435613143565b5061000e6119d4565b3461000e5761066961066236611a2e565b9291612e1d565b90811061067b57602090604051908152f35b604051633a81aa0160e21b8152600490fd5b3461000e5760206105b56106a0366119f9565b91612c59565b3461000e5760206105b56106b9366119f9565b91612a11565b3461000e57602036600319011261000e57602060043560355480156000146106ea5750604051908152f35b6106fc916106f6612212565b906124e1565b6105b5565b3461000e57602036600319011261000e5760fc546040516321f3cfbd60e21b815260048035926001600160a01b0391602091849190829085165afa9182156104bd576000926107b1575b503391160361079f5760c8811161078d576020817f3aa4413905e8f015896ec5880bdde24088ccb19b578f9fcf6800354d5320d4af9260ff55604051908152a1005b6040516369b91bc760e01b8152600490fd5b604051637155bb1960e01b8152600490fd5b6107ca91925060203d81116104b6576104a78183611b24565b908361074b565b3461000e57604036600319011261000e576107f76107ed61196f565b6024359033611c4a565b602060405160018152f35b3461000e57604036600319011261000e5761081b61196f565b60243590336000526034602052604060002060018060a01b03821660005260205260406000205491808310610856576107f792039033612078565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b3461000e57602036600319011261000e576004356001600160401b0380821161000e573660238301121561000e57816004013590811161000e57366024828401011161000e5760fc54604051638da5cb5b60e01b8152906001600160a01b03906020908390600490829085165afa9182156104bd57600092610969575b503391160361047b577ff4c65ddb6aed78463fc27d79ccd85368bb0ecd80bd763b891a8b64ef41ac750b916109646024926040519384930183612681565b0390a1005b61098291925060203d81116104b6576104a78183611b24565b9084610926565b3461000e5760206105b561099c3661199b565b9291909161304b565b3461000e5760206105b56109b83661199b565b92919091613072565b3461000e57600036600319011261000e5760405160006037546109e381611bed565b80845290600190818116908115610a625750600114610a19575b61031984610a0d81860382611b24565b60405191829182611926565b60376000908152925060008051602061376a8339815191525b828410610a4a575050508101602001610a0d826109fd565b80546020858701810191909152909301928101610a32565b60ff191660208087019190915292151560051b85019092019250610a0d91508390506109fd565b3461000e5760206105dd6105b5610a9f3661199b565b9181959361304b565b3461000e57604036600319011261000e5760206105b5610ac6611985565b60043561227e565b3461000e57600036600319011261000e576097546040516001600160a01b039091168152602090f35b3461000e57600036600319011261000e57602060ff54604051908152f35b3461000e57602036600319011261000e5760043580151580910361000e57610b3b611b45565b6101009081549060ff8260201c16610b8c577f0653e29fcca730c396a6099e174293ae6bd435437a5de4f8c461f7b5dc9e58f29260209261ff008360081b169061ff001916179055604051908152a1005b604051636672a1bf60e01b8152600490fd5b3461000e57610bb6610baf36611a2e565b929161227e565b908111610bc857602090604051908152f35b6040516236770d60e11b8152600490fd5b3461000e57600036600319011261000e5760fc546040516001600160a01b039091168152602090f35b3461000e5760206105dd6105b5610c18366119f9565b9391908491612c59565b3461000e57602036600319011261000e5760fb54600435906001600160a01b039081163303610c885781610c7f7fc3a2650cfd093d0ba08de42894980c682f794c015f26d04e9cda92d011312f25936020933390606554166127d8565b604051908152a1005b60405163079ce54760e11b8152600490fd5b3461000e57600036600319011261000e57610cb3611b45565b609780546001600160a01b0319811690915560405160009182906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b3461000e57602036600319011261000e576001600160a01b03610d1d61196f565b1660005260336020526020604060002054604051908152f35b3461000e57602036600319011261000e576020610d5161196f565b63ff0000001990610d806101009163010000008484541617835533600052603385523390604060002054612c59565b918154169055604051908152f35b3461000e57600036600319011261000e5760206040516127108152f35b3461000e57604036600319011261000e5760206105b5610dc9611985565b600435612e1d565b3461000e57600036600319011261000e57602060ff6101005460081c166040519015158152f35b3461000e57600036600319011261000e5760fb546001600160a01b03163303610c885761010064010000010064ff0000ff001982541617905560006040517f04940f74eb6244e64526bffe836d78b42b1f36a45f75f3ed5b8f2716a4651cff8282a1f35b3461000e57600036600319011261000e5760fb546001600160a01b03163303610c8857610100600160ff1982541617905560006040517f59760ad83ef06d1a0bc439d8b39a42a870493f0cd3bc3d53bbd3e7c6991f494f8282a1f35b3461000e57602036600319011261000e576020610ed660043561319c565b50604051908152f35b3461000e57602036600319011261000e576001600160a01b03610f0061196f565b1660005260fd6020526020604060002054604051908152f35b3461000e57604036600319011261000e576107f7610f3561196f565b336000526034602052604060002060018060a01b038216600052602052610f63602435604060002054611c27565b9033612078565b3461000e57600036600319011261000e576065546040516001600160a01b039091168152602090f35b3461000e57600036600319011261000e57610fac6129bb565b60fc54604051631dea4ae760e11b81526020918290829060049082906001600160a01b03165afa9081156104bd5760009161102e575b5061100e7f17040713250ec5f668a1c39e7939900e78558350dbaff0ebef34268dfa8ea4ac9142611c27565b913360005260fd8152826040600020556040519283523392a2600160c955005b90508181813d8311611056575b6110458183611b24565b8101031261000e575161100e610fe2565b503d61103b565b3461000e57602036600319011261000e5760043580151580910361000e5760fb546001600160a01b03163303610c885760207f0c9d958d6d9b28dd2ce2cf1657da7198a26be282f12b5aa48c1aa512b13bb44391610100805462ff00008360101b169062ff00001916179055604051908152a1005b3461000e57600036600319011261000e57602060ff60655460a01c16604051908152f35b3461000e57600036600319011261000e57602060ff6101005460101c166040519015158152f35b3461000e5760206105dd6105b56111333661199b565b91819593613072565b3461000e57606036600319011261000e576107f761115861196f565b611160611985565b6044359161116f83338361217a565b611c4a565b3461000e57600036600319011261000e5760fb546040516001600160a01b039091168152602090f35b3461000e57600036600319011261000e576020603554604051908152f35b3461000e5760031960403682011261000e576111d561196f565b906001600160401b036024351161000e5760e0906024353603011261000e5760005460ff8160081c16158080916117d7575b80156117c0575b156117645760ff198216600117600055602b9260239282611752575b5061127461123d6004602435018061261a565b9590866040519788926a02430ba39902b30bab63a160ad1b602085015284840137810160008382015203600b810187520185611b24565b6112b961128a602480350160243560040161261a565b9490856040519687926212105560ea1b6020850152848401378101600083820152036003810186520184611b24565b6112d360ff60005460081c166112ce816126a9565b6126a9565b83516001600160401b03811161164c576112ee603654611bed565b601f81116116f1575b50602094601f821160011461166d57948192939495600092611662575b50508160011b916000199060031b1c1916176036555b82516001600160401b03811161164c57611345603754611bed565b601f81116115df575b506020601f821160011461156d5781929394600092611562575b50508160011b916000199060031b1c1916176037555b6001600160a01b0391602435606401358381169081900361000e576113f69060ff60005460081c16906113b0826126a9565b6113b9826126a9565b6113c281612748565b901561155a575b6065549060ff60a01b9060a01b16906affffffffffffffffffffff60a81b1617176065556112ce816126a9565b600160c95560846024350135838116810361000e57916114168493611b9d565b6024356044019060005b61142f8360243560040161264c565b9050811015611485576114478360243560040161264c565b82101561146f578160051b013590858216820361000e5761146960019261366c565b01611420565b634e487b7160e01b600052603260045260246000fd5b5082846bffffffffffffffffffffffff60a01b92168260fb54161760fb5560a460243501359182151580930361000e5761ff009261010090815490851995869160081b169116179055339060fc54161760fc557ff4c65ddb6aed78463fc27d79ccd85368bb0ecd80bd763b891a8b64ef41ac750b61150d60c46024350160243560040161261a565b9061151d60405192839283612681565b0390a161152657005b600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b5060126113c9565b015190508480611368565b601f19821690603760005260008051602061376a8339815191529160005b8181106115c7575095836001959697106115ae575b505050811b0160375561137e565b015160001960f88460031b161c191690558480806115a0565b9192602060018192868b01518155019401920161158b565b6037600052601f820160051c60008051602061376a833981519152019060208310611636575b601f0160051c60008051602061376a83398151915201905b81811061162a575061134e565b6000815560010161161d565b60008051602061376a8339815191529150611605565b634e487b7160e01b600052604160045260246000fd5b015190508580611314565b601f1982169560366000527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b89160005b8881106116d9575083600195969798106116c0575b505050811b0160365561132a565b015160001960f88460031b161c191690558580806116b2565b9192602060018192868501518155019401920161169d565b60366000527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b8601f830160051c81016020841061174b575b601f830160051c8201811061173f5750506112f7565b60008155600101611729565b5080611729565b61ffff1916610101176000558461122a565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561120e5750600160ff83161461120e565b50600160ff831610611207565b3461000e57602036600319011261000e576020610ed6600435613143565b3461000e57604036600319011261000e576107f761181e61196f565b6024359033612078565b3461000e57602036600319011261000e57602060043560355480156000146118535750604051908152f35b6106fc9161185f612212565b90612596565b3461000e57600036600319011261000e57604051600060365461188781611bed565b80845290600190818116908115610a6257506001146118b05761031984610a0d81860382611b24565b6036600090815292507f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b85b8284106118f3575050508101602001610a0d826109fd565b805460208587018101919091529093019281016118db565b3461000e57600036600319011261000e5760206105b5612212565b6020808252825181830181905290939260005b82811061195b57505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501611939565b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b608090600319011261000e57600435906001600160a01b0390602435828116810361000e5791604435908116810361000e579060643590565b503461000e57602036600319011261000e576119ee61196f565b5060206105b5613099565b606090600319011261000e57600435906001600160a01b0390602435828116810361000e5791604435908116810361000e5790565b606090600319011261000e57600435906024356001600160a01b038116810361000e579060443590565b503461000e57602036600319011261000e57602060043560355481158015611a9c575b15611a895750604051908152f35b906106fc91611a96612212565b91612596565b508015611a7b565b60fe5481101561146f5760fe6000527f54075df80ec1ae6ac9100e1fd0ebf3246c17f5c933137af392011f4c5f61513a0190600090565b6001600160401b03811161164c57604052565b604081019081106001600160401b0382111761164c57604052565b60a081019081106001600160401b0382111761164c57604052565b90601f801991011681019081106001600160401b0382111761164c57604052565b6097546001600160a01b03163303611b5957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6097549060018060a01b0380911691826bffffffffffffffffffffffff60a01b821617609755167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b90600182811c92168015611c1d575b6020831014611c0757565b634e487b7160e01b600052602260045260246000fd5b91607f1691611bfc565b91908201809211611c3457565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03939092909184841691908215612025578516948515611fd4578115611fc257858314611fb0578060fc541693604093845195630a43443160e21b875260209060049782818a81855afa908115611f6857600091611f83575b50611f73578960005260fd8252878288600020549283611eea575b5050505060005b60fe54811015611d455784611ce082611aa4565b90549060031b1c1690813b1561000e5787516344d18cd960e01b81528b8a820152876024820152600081606481836001978860448401525af18015611d3a57611d2b575b5001611ccc565b611d3490611adb565b38611d24565b89513d6000823e3d90fd5b509290939197949596611d5790613103565b8211611eda578360005260fd835260008681205560ff6101005460181c1615611e46575b5082600052603382528460002054818110611df457908060008051602061374a8339815191529392856000526033845203866000205584600052856000208181540190558551908152a36035548015159081611de8575b50611ddb575050565b516302dab21760e21b8152fd5b6103e891501038611dd2565b855162461bcd60e51b8152808801849052602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b9195936000979195975b60fe54811015611ecd5783611e6482611aa4565b90549060031b1c1690813b1561000e576000809260648c51809581936344d18cd960e01b83528b8d8401528d60248401528160448401525af1918215611ec257600192611eb3575b5001611e50565b611ebc90611adb565b38611eac565b8a513d6000823e3d90fd5b5093959150959338611d7b565b855163232b212d60e11b81528790fd5b895163f4bde09760e01b815292839182905afa908115611f6857600091611f36575b50611f1691611c27565b421115611f265738878282611cc5565b855163144229c360e01b81528790fd5b908382813d8311611f61575b611f4c8183611b24565b81010312611f5e575051611f16611f0c565b80fd5b503d611f42565b88513d6000823e3d90fd5b8651635ed0818960e01b81528890fd5b611fa39150833d8511611fa9575b611f9b8183611b24565b810190612890565b38611caa565b503d611f91565b604051636d6c4ee560e11b8152600490fd5b60405163d11b25af60e01b8152600490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b0390811691821561212957169182156120d95760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260348252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b9060018060a01b03808316600052603460205260406000209082166000526020526040600020549260001984036121b2575b50505050565b8084106121cd576121c4930391612078565b388080806121ac565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b6065546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa9081156104bd57600091612250575090565b906020823d8211612276575b8161226960209383611b24565b81010312611f5e57505190565b3d915061225c565b90612287613099565b821161249c57603554806124845750815b6122a06129bb565b60ff610100541615612472576001600160a01b0382811692903384148061245b575b612446575b606554169160409182519361232660209586926000808584016323b872dd60e01b81523360248601523060448601528c60648601526064855261230985611b09565b612311612857565b94519082855af1612320612709565b91612907565b80519081612426575b50505084156123e257816123429161325b565b61234e81603554611c27565b60355583600052603383528160002081815401905583600060008051602061374a833981519152858551858152a360355480151590816123d6575b506123c557907fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7918151938685528401523392a3600160c95590565b81516302dab21760e21b8152600490fd5b6103e891501038612389565b825162461bcd60e51b815260048101859052601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b8261243e93612439938301019101612890565b6128a8565b83388061232f565b8360005260fd602052600060408120556122c7565b508360005260fd60205260406000205415156122c2565b604051632fda1ca360e01b8152600490fd5b61249690612490612212565b846124e1565b91612298565b60405162461bcd60e51b815260206004820152601b60248201527f455243343632363a206d696e74206d6f7265207468616e206d617800000000006044820152606490fd5b91906124ee828285612596565b92821561250b57096124fd5790565b60018101809111611c345790565b634e487b7160e01b600052601260045260246000fd5b90919060001983820983820291828083109203948286039260009614612589576127109183831115612585577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e919596500990828211900360fc1b910360041c170290565b8680fd5b5050506127109192500490565b91600019828409928281029283808610950394808603951461260c578483111561000e578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b50508092501561250b570490565b903590601e198136030182121561000e57018035906001600160401b03821161000e5760200191813603831361000e57565b903590601e198136030182121561000e57018035906001600160401b03821161000e57602001918160051b3603831361000e57565b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b156126b057565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b3d15612743573d906001600160401b03821161164c5760405191612737601f8201601f191660200184611b24565b82523d6000602084013e565b606090565b90604051602081019063313ce56760e01b825260048152604081018181106001600160401b0382111761164c576040525160009384928392916001600160a01b03165afa612794612709565b90806127cc575b6127a5575b508190565b6020818051810103126127c8576020015160ff81116127a0576001925060ff1690565b8280fd5b5060208151101561279b565b60405163a9059cbb60e01b602082019081526001600160a01b039384166024830152604480830195909552938152919290608083016001600160401b0381118482101761164c576128359460009283926040521692612311612857565b805180612840575050565b81602080612439936128559501019101612890565b565b6040519061286482611aee565b602082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020830152565b9081602091031261000e5751801515810361000e5790565b156128af57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b91929015612969575081511561291b575090565b3b156129245790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561297c5750805190602001fd5b60405162461bcd60e51b81529081906129989060048301611926565b0390fd5b9081602091031261000e57516001600160a01b038116810361000e5790565b600260c954146129cc57600260c955565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b919091612a1d81613143565b919093612a286129bb565b8115612c47576001600160a01b038481169490919033869003612c37575b8515612be85786612a56916133f4565b60008581526020906033825260409586822054898110612b99578990898452603385520387832055603554898082039182603555848b60008051602061374a833981519152888d51868152a314159081612b8d575b50612b7c579188918594938796606554169181612af4575b505060008051602061372a8339815191529584612adf926127d8565b865195865285015216923392a4600160c95590565b91935091939495506004848760fc54168a5192838092638da5cb5b60e01b82525afa918215612b7157958b94612b4a829795612adf958c9560008051602061372a8339815191529c9b91612b54575b50836127d8565b9250819750612ac3565b612b6b9150883d8a116104b6576104a78183611b24565b38612b43565b8951903d90823e3d90fd5b86516302dab21760e21b8152600490fd5b6103e891501038612aab565b875162461bcd60e51b815260048101859052602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b612c4287338361217a565b612a46565b604051630fbf08cb60e21b8152600490fd5b919091612c658161319c565b919093612c706129bb565b8415612c47576001600160a01b038481169490919033869003612e0d575b8515612be85783612c9e916133f4565b6000928584526020936033855260409586822054838110612dbe578390898452603388520387832055603554838082039182603555848b60008051602061374a8339815191528b8d51868152a314159081612db2575b50612b7c5790889185606554169181612d3d575b505083929160008051602061372a8339815191529594612d27926127d8565b85519488865285015216923392a4600160c95590565b909192506004878760fc54168a5192838092638da5cb5b60e01b82525afa918215612b715793612d8e612d27948d948998979460008051602061372a8339815191529b9a9591612d9b5750836127d8565b9250949581939450612d08565b612b6b91508c8d3d106104b6576104a78183611b24565b6103e891501038612cf4565b875162461bcd60e51b815260048101889052602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b612e1884338361217a565b612c8e565b90612e26613099565b82116130065760355482158015612ffe575b15612fe55750815b612e486129bb565b60ff610100541615612472576001600160a01b03828116929033841480612fce575b612fb9575b60655416604091825191612eb060209384926000808584016323b872dd60e01b81523360248601523060448601528a60648601526064855261230985611b09565b80519081612f9e575b5050508415612f5b5785612ecc9161325b565b612ed885603554611c27565b60355583600052603381528160002085815401905583600060008051602061374a833981519152838551898152a36035548015159081612f4f575b506123c55790847fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79282519485528401523392a3600160c95590565b6103e891501038612f13565b50606491519062461bcd60e51b82526004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b82612fb193612439938301019101612890565b813880612eb9565b8360005260fd60205260006040812055612e6f565b508360005260fd6020526040600020541515612e6a565b612ff890612ff1612212565b9084612596565b91612e40565b508015612e38565b60405162461bcd60e51b815260206004820152601e60248201527f455243343632363a206465706f736974206d6f7265207468616e206d617800006044820152606490fd5b906130569291612a11565b9081116130605790565b60405163ad5f70f360e01b8152600490fd5b9061307d9291612c59565b9081106130875790565b604051632e1a5a5360e21b8152600490fd5b6101005460081c60ff16156130ad57600090565b60001990565b60ff6101005460101c1680156130f3575b6130ed576001600160a01b03166000908152603360205260409020546130e99061319c565b5090565b50600090565b506130fd816134ee565b156130c4565b60ff6101005460101c168015613133575b6130ed576001600160a01b031660009081526033602052604090205490565b5061313d816134ee565b15613114565b60ff5461271090808203918211611c3457613169916131629184612596565b8092611c27565b60355481158015613194575b1561317e575091565b906131919161318b612212565b916124e1565b91565b508015613175565b603554806131b857505b6131b260ff5482612521565b80910391565b6131c49161185f612212565b6131a6565b6000915b60fe54831015613256576131e083611aa4565b90546001600160a01b03949160031b1c8416803b1561000e57600080916044604097885194859384926324a9e3c160e11b84523060048501528a1660248401525af1801561324b5760019394955061323c575b500191906131cd565b61324590611adb565b38613233565b85513d6000823e3d90fd5b915050565b91908015611fc2576001600160a01b03928316928315611fb0578060fc541691604091825193630a43443160e21b8552602060049581818881865afa908115613335576000916133d7575b506133c7578760005260fd81528585600020549283613349575b5050505060005b60fe5481101561334057816132db82611aa4565b90549060031b1c1690813b1561000e5784516344d18cd960e01b81528887820152846024820152600081606481836001978860448401525af1801561333557613326575b50016132c7565b61332f90611adb565b3861331f565b86513d6000823e3d90fd5b50505050509050565b829087519283809263f4bde09760e01b82525afa91821561333557600092613396575b505061337791611c27565b42111561338757388085816132c0565b50505163144229c360e01b8152fd5b81819392933d83116133c0575b6133ad8183611b24565b81010312611f5e5750516133773861336c565b503d6133a3565b8451635ed0818960e01b81528690fd5b6133ee9150823d8411611fa957611f9b8183611b24565b386132a6565b9190918215611fc2576001600160a01b03818116918215611fb05761341890613103565b84116134dc5760009382855260fd602052604091858381205560ff6101005460181c1615613449575b505050509050565b855b60fe548110156134cb57868261346083611aa4565b90549060031b1c16803b156134c757819060648751809481936344d18cd960e01b83528b60048401528960248401528160448401525af180156134bd5790600192916134ae575b500161344b565b6134b790611adb565b386134a7565b85513d8a823e3d90fd5b5080fd5b505050505090508038808080613441565b60405163232b212d60e11b8152600490fd5b60fc54604080516302ea7f2560e41b81526001600160a01b0392831693919260209290918381600481895afa90811561324b5760009161363f575b50845163eeb3388760e01b815284816004818a5afa801561333557600090613610575b613557915082611c27565b801561250b5742061015613606571660005260fd8152816000205490814210159384613585575b5050505090565b83959450819060049394519384809263f4bde09760e01b82525afa9485156135fc57506000946135c9575b5050916135bd9192611c27565b4211153880808061357e565b81813d83116135f5575b6135dd8183611b24565b810103126135f1575192506135bd386135b0565b8380fd5b503d6135d3565b513d6000823e3d90fd5b5050505050600090565b8582813d8311613638575b6136258183611b24565b81010312611f5e5750613557905161354c565b503d61361b565b908482813d8311613665575b6136558183611b24565b81010312611f5e57505138613529565b503d61364b565b60fe5460005b8181106136ea57506801000000000000000081101561164c5780600161369b920160fe55611aa4565b81546001600160a01b0360039290921b82811b8019909216929094169384901b161790556040517fcd6999167b4b18e50d7046fa427cd31c7106b4e945bcaa6f9efb4ecd3b7d122a90600090a2565b6136f381611aa4565b905460039190911b1c6001600160a01b039081169084161461371757600101613672565b6040516314ebaef760e31b8152600490fdfefbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8dbddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31aea26469706673582212202713a9790a181af3e78bc5c5394f63e2d80aa2bfcb88d91948f030c190cb004c64736f6c63430008100033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806301e1d1141461190b57806306fdde031461186557806307a2d13a14611828578063095ea7b3146118025780630a28a477146117e45780630ecdd7e3146111bb57806318160ddd1461119d5780631eb08ba91461117457806323b872dd1461113c5780632ec6f2681461111d5780632f3ffb9f146110f6578063313ce567146110d257806337d151391461105d578063380e687a14610f9357806338d52e0f14610f6a5780633950935114610f19578063402d267d146106485780634872363314610edf5780634cdad50614610eb85780635d1c236d14610e5c5780636ba2b14814610df85780636e22558d14610dd15780636e553f6514610dab5780636ed93dd014610d8e5780636ff1c9bc14610d3657806370a0823114610cfc578063715018a614610c9a5780637778114514610c225780637901808b14610c025780637b10399914610bd9578063836a104014610b9e57806386d192e514610b155780638bc7e8c414610af75780638da5cb5b14610ace57806394bf804d14610aa857806395827fdd14610a8957806395d89b41146109c15780639f40a7b3146109a5578063a318c1a414610989578063a417e00c146108a9578063a457c2d714610802578063a9059cbb146107d1578063ac1e502514610701578063b3d7f6b9146106bf578063b460af94146106a6578063ba0876521461068d578063bc157ac114610651578063c63d75b614610648578063c6e6f592146103d6578063c9e555291461062a578063ce96cb7714610607578063cee73a76146105e3578063d0855293146105bd578063d905777e14610592578063da80764a14610537578063db3835bc1461051a578063dd62ed3e146104c9578063e448504114610418578063e5b5019a146103fb578063eb6ed330146103df578063ef8b30f7146103d6578063f2fde38b14610347578063f4d0fb991461031d5763ffa1ad74146102dd57600080fd5b3461000e57600036600319011261000e576103196040516102fd81611aee565b60038152620332e360ec1b602082015260405191829182611926565b0390f35b3461000e57602036600319011261000e57604061033b60043561319c565b82519182526020820152f35b3461000e57602036600319011261000e5761036061196f565b610368611b45565b6001600160a01b038116156103825761038090611b9d565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b5061000e611a58565b3461000e57600036600319011261000e57602060405160c88152f35b3461000e57600036600319011261000e5760206040516000198152f35b3461000e57602036600319011261000e576004356001600160a01b03808216820361000e5780602060049260fc541660405193848092638da5cb5b60e01b82525afa9182156104bd5760009261048d575b503391160361047b576103809061366c565b60405163d61d1ac760e01b8152600490fd5b6104af91925060203d81116104b6575b6104a78183611b24565b81019061299c565b9083610469565b503d61049d565b6040513d6000823e3d90fd5b3461000e57604036600319011261000e576104e261196f565b6104ea611985565b9060018060a01b038091166000526034602052604060002091166000526020526020604060002054604051908152f35b3461000e57600036600319011261000e5760206040516103e88152f35b3461000e57602036600319011261000e5760043560fe5481101561000e5760fe6000527f54075df80ec1ae6ac9100e1fd0ebf3246c17f5c933137af392011f4c5f61513a01546040516001600160a01b039091168152602090f35b3461000e57602036600319011261000e5760206105b56105b061196f565b613103565b604051908152f35b3461000e5760206105dd6105b56105d3366119f9565b9391908491612a11565b916131c9565b3461000e57600036600319011261000e57602060ff61010054166040519015158152f35b3461000e57602036600319011261000e5760206105b561062561196f565b6130b3565b3461000e57602036600319011261000e57604061033b600435613143565b5061000e6119d4565b3461000e5761066961066236611a2e565b9291612e1d565b90811061067b57602090604051908152f35b604051633a81aa0160e21b8152600490fd5b3461000e5760206105b56106a0366119f9565b91612c59565b3461000e5760206105b56106b9366119f9565b91612a11565b3461000e57602036600319011261000e57602060043560355480156000146106ea5750604051908152f35b6106fc916106f6612212565b906124e1565b6105b5565b3461000e57602036600319011261000e5760fc546040516321f3cfbd60e21b815260048035926001600160a01b0391602091849190829085165afa9182156104bd576000926107b1575b503391160361079f5760c8811161078d576020817f3aa4413905e8f015896ec5880bdde24088ccb19b578f9fcf6800354d5320d4af9260ff55604051908152a1005b6040516369b91bc760e01b8152600490fd5b604051637155bb1960e01b8152600490fd5b6107ca91925060203d81116104b6576104a78183611b24565b908361074b565b3461000e57604036600319011261000e576107f76107ed61196f565b6024359033611c4a565b602060405160018152f35b3461000e57604036600319011261000e5761081b61196f565b60243590336000526034602052604060002060018060a01b03821660005260205260406000205491808310610856576107f792039033612078565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b3461000e57602036600319011261000e576004356001600160401b0380821161000e573660238301121561000e57816004013590811161000e57366024828401011161000e5760fc54604051638da5cb5b60e01b8152906001600160a01b03906020908390600490829085165afa9182156104bd57600092610969575b503391160361047b577ff4c65ddb6aed78463fc27d79ccd85368bb0ecd80bd763b891a8b64ef41ac750b916109646024926040519384930183612681565b0390a1005b61098291925060203d81116104b6576104a78183611b24565b9084610926565b3461000e5760206105b561099c3661199b565b9291909161304b565b3461000e5760206105b56109b83661199b565b92919091613072565b3461000e57600036600319011261000e5760405160006037546109e381611bed565b80845290600190818116908115610a625750600114610a19575b61031984610a0d81860382611b24565b60405191829182611926565b60376000908152925060008051602061376a8339815191525b828410610a4a575050508101602001610a0d826109fd565b80546020858701810191909152909301928101610a32565b60ff191660208087019190915292151560051b85019092019250610a0d91508390506109fd565b3461000e5760206105dd6105b5610a9f3661199b565b9181959361304b565b3461000e57604036600319011261000e5760206105b5610ac6611985565b60043561227e565b3461000e57600036600319011261000e576097546040516001600160a01b039091168152602090f35b3461000e57600036600319011261000e57602060ff54604051908152f35b3461000e57602036600319011261000e5760043580151580910361000e57610b3b611b45565b6101009081549060ff8260201c16610b8c577f0653e29fcca730c396a6099e174293ae6bd435437a5de4f8c461f7b5dc9e58f29260209261ff008360081b169061ff001916179055604051908152a1005b604051636672a1bf60e01b8152600490fd5b3461000e57610bb6610baf36611a2e565b929161227e565b908111610bc857602090604051908152f35b6040516236770d60e11b8152600490fd5b3461000e57600036600319011261000e5760fc546040516001600160a01b039091168152602090f35b3461000e5760206105dd6105b5610c18366119f9565b9391908491612c59565b3461000e57602036600319011261000e5760fb54600435906001600160a01b039081163303610c885781610c7f7fc3a2650cfd093d0ba08de42894980c682f794c015f26d04e9cda92d011312f25936020933390606554166127d8565b604051908152a1005b60405163079ce54760e11b8152600490fd5b3461000e57600036600319011261000e57610cb3611b45565b609780546001600160a01b0319811690915560405160009182906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b3461000e57602036600319011261000e576001600160a01b03610d1d61196f565b1660005260336020526020604060002054604051908152f35b3461000e57602036600319011261000e576020610d5161196f565b63ff0000001990610d806101009163010000008484541617835533600052603385523390604060002054612c59565b918154169055604051908152f35b3461000e57600036600319011261000e5760206040516127108152f35b3461000e57604036600319011261000e5760206105b5610dc9611985565b600435612e1d565b3461000e57600036600319011261000e57602060ff6101005460081c166040519015158152f35b3461000e57600036600319011261000e5760fb546001600160a01b03163303610c885761010064010000010064ff0000ff001982541617905560006040517f04940f74eb6244e64526bffe836d78b42b1f36a45f75f3ed5b8f2716a4651cff8282a1f35b3461000e57600036600319011261000e5760fb546001600160a01b03163303610c8857610100600160ff1982541617905560006040517f59760ad83ef06d1a0bc439d8b39a42a870493f0cd3bc3d53bbd3e7c6991f494f8282a1f35b3461000e57602036600319011261000e576020610ed660043561319c565b50604051908152f35b3461000e57602036600319011261000e576001600160a01b03610f0061196f565b1660005260fd6020526020604060002054604051908152f35b3461000e57604036600319011261000e576107f7610f3561196f565b336000526034602052604060002060018060a01b038216600052602052610f63602435604060002054611c27565b9033612078565b3461000e57600036600319011261000e576065546040516001600160a01b039091168152602090f35b3461000e57600036600319011261000e57610fac6129bb565b60fc54604051631dea4ae760e11b81526020918290829060049082906001600160a01b03165afa9081156104bd5760009161102e575b5061100e7f17040713250ec5f668a1c39e7939900e78558350dbaff0ebef34268dfa8ea4ac9142611c27565b913360005260fd8152826040600020556040519283523392a2600160c955005b90508181813d8311611056575b6110458183611b24565b8101031261000e575161100e610fe2565b503d61103b565b3461000e57602036600319011261000e5760043580151580910361000e5760fb546001600160a01b03163303610c885760207f0c9d958d6d9b28dd2ce2cf1657da7198a26be282f12b5aa48c1aa512b13bb44391610100805462ff00008360101b169062ff00001916179055604051908152a1005b3461000e57600036600319011261000e57602060ff60655460a01c16604051908152f35b3461000e57600036600319011261000e57602060ff6101005460101c166040519015158152f35b3461000e5760206105dd6105b56111333661199b565b91819593613072565b3461000e57606036600319011261000e576107f761115861196f565b611160611985565b6044359161116f83338361217a565b611c4a565b3461000e57600036600319011261000e5760fb546040516001600160a01b039091168152602090f35b3461000e57600036600319011261000e576020603554604051908152f35b3461000e5760031960403682011261000e576111d561196f565b906001600160401b036024351161000e5760e0906024353603011261000e5760005460ff8160081c16158080916117d7575b80156117c0575b156117645760ff198216600117600055602b9260239282611752575b5061127461123d6004602435018061261a565b9590866040519788926a02430ba39902b30bab63a160ad1b602085015284840137810160008382015203600b810187520185611b24565b6112b961128a602480350160243560040161261a565b9490856040519687926212105560ea1b6020850152848401378101600083820152036003810186520184611b24565b6112d360ff60005460081c166112ce816126a9565b6126a9565b83516001600160401b03811161164c576112ee603654611bed565b601f81116116f1575b50602094601f821160011461166d57948192939495600092611662575b50508160011b916000199060031b1c1916176036555b82516001600160401b03811161164c57611345603754611bed565b601f81116115df575b506020601f821160011461156d5781929394600092611562575b50508160011b916000199060031b1c1916176037555b6001600160a01b0391602435606401358381169081900361000e576113f69060ff60005460081c16906113b0826126a9565b6113b9826126a9565b6113c281612748565b901561155a575b6065549060ff60a01b9060a01b16906affffffffffffffffffffff60a81b1617176065556112ce816126a9565b600160c95560846024350135838116810361000e57916114168493611b9d565b6024356044019060005b61142f8360243560040161264c565b9050811015611485576114478360243560040161264c565b82101561146f578160051b013590858216820361000e5761146960019261366c565b01611420565b634e487b7160e01b600052603260045260246000fd5b5082846bffffffffffffffffffffffff60a01b92168260fb54161760fb5560a460243501359182151580930361000e5761ff009261010090815490851995869160081b169116179055339060fc54161760fc557ff4c65ddb6aed78463fc27d79ccd85368bb0ecd80bd763b891a8b64ef41ac750b61150d60c46024350160243560040161261a565b9061151d60405192839283612681565b0390a161152657005b600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b5060126113c9565b015190508480611368565b601f19821690603760005260008051602061376a8339815191529160005b8181106115c7575095836001959697106115ae575b505050811b0160375561137e565b015160001960f88460031b161c191690558480806115a0565b9192602060018192868b01518155019401920161158b565b6037600052601f820160051c60008051602061376a833981519152019060208310611636575b601f0160051c60008051602061376a83398151915201905b81811061162a575061134e565b6000815560010161161d565b60008051602061376a8339815191529150611605565b634e487b7160e01b600052604160045260246000fd5b015190508580611314565b601f1982169560366000527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b89160005b8881106116d9575083600195969798106116c0575b505050811b0160365561132a565b015160001960f88460031b161c191690558580806116b2565b9192602060018192868501518155019401920161169d565b60366000527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b8601f830160051c81016020841061174b575b601f830160051c8201811061173f5750506112f7565b60008155600101611729565b5080611729565b61ffff1916610101176000558461122a565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561120e5750600160ff83161461120e565b50600160ff831610611207565b3461000e57602036600319011261000e576020610ed6600435613143565b3461000e57604036600319011261000e576107f761181e61196f565b6024359033612078565b3461000e57602036600319011261000e57602060043560355480156000146118535750604051908152f35b6106fc9161185f612212565b90612596565b3461000e57600036600319011261000e57604051600060365461188781611bed565b80845290600190818116908115610a6257506001146118b05761031984610a0d81860382611b24565b6036600090815292507f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b85b8284106118f3575050508101602001610a0d826109fd565b805460208587018101919091529093019281016118db565b3461000e57600036600319011261000e5760206105b5612212565b6020808252825181830181905290939260005b82811061195b57505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501611939565b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b608090600319011261000e57600435906001600160a01b0390602435828116810361000e5791604435908116810361000e579060643590565b503461000e57602036600319011261000e576119ee61196f565b5060206105b5613099565b606090600319011261000e57600435906001600160a01b0390602435828116810361000e5791604435908116810361000e5790565b606090600319011261000e57600435906024356001600160a01b038116810361000e579060443590565b503461000e57602036600319011261000e57602060043560355481158015611a9c575b15611a895750604051908152f35b906106fc91611a96612212565b91612596565b508015611a7b565b60fe5481101561146f5760fe6000527f54075df80ec1ae6ac9100e1fd0ebf3246c17f5c933137af392011f4c5f61513a0190600090565b6001600160401b03811161164c57604052565b604081019081106001600160401b0382111761164c57604052565b60a081019081106001600160401b0382111761164c57604052565b90601f801991011681019081106001600160401b0382111761164c57604052565b6097546001600160a01b03163303611b5957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6097549060018060a01b0380911691826bffffffffffffffffffffffff60a01b821617609755167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b90600182811c92168015611c1d575b6020831014611c0757565b634e487b7160e01b600052602260045260246000fd5b91607f1691611bfc565b91908201809211611c3457565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03939092909184841691908215612025578516948515611fd4578115611fc257858314611fb0578060fc541693604093845195630a43443160e21b875260209060049782818a81855afa908115611f6857600091611f83575b50611f73578960005260fd8252878288600020549283611eea575b5050505060005b60fe54811015611d455784611ce082611aa4565b90549060031b1c1690813b1561000e5787516344d18cd960e01b81528b8a820152876024820152600081606481836001978860448401525af18015611d3a57611d2b575b5001611ccc565b611d3490611adb565b38611d24565b89513d6000823e3d90fd5b509290939197949596611d5790613103565b8211611eda578360005260fd835260008681205560ff6101005460181c1615611e46575b5082600052603382528460002054818110611df457908060008051602061374a8339815191529392856000526033845203866000205584600052856000208181540190558551908152a36035548015159081611de8575b50611ddb575050565b516302dab21760e21b8152fd5b6103e891501038611dd2565b855162461bcd60e51b8152808801849052602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b9195936000979195975b60fe54811015611ecd5783611e6482611aa4565b90549060031b1c1690813b1561000e576000809260648c51809581936344d18cd960e01b83528b8d8401528d60248401528160448401525af1918215611ec257600192611eb3575b5001611e50565b611ebc90611adb565b38611eac565b8a513d6000823e3d90fd5b5093959150959338611d7b565b855163232b212d60e11b81528790fd5b895163f4bde09760e01b815292839182905afa908115611f6857600091611f36575b50611f1691611c27565b421115611f265738878282611cc5565b855163144229c360e01b81528790fd5b908382813d8311611f61575b611f4c8183611b24565b81010312611f5e575051611f16611f0c565b80fd5b503d611f42565b88513d6000823e3d90fd5b8651635ed0818960e01b81528890fd5b611fa39150833d8511611fa9575b611f9b8183611b24565b810190612890565b38611caa565b503d611f91565b604051636d6c4ee560e11b8152600490fd5b60405163d11b25af60e01b8152600490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b0390811691821561212957169182156120d95760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260348252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b9060018060a01b03808316600052603460205260406000209082166000526020526040600020549260001984036121b2575b50505050565b8084106121cd576121c4930391612078565b388080806121ac565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b6065546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa9081156104bd57600091612250575090565b906020823d8211612276575b8161226960209383611b24565b81010312611f5e57505190565b3d915061225c565b90612287613099565b821161249c57603554806124845750815b6122a06129bb565b60ff610100541615612472576001600160a01b0382811692903384148061245b575b612446575b606554169160409182519361232660209586926000808584016323b872dd60e01b81523360248601523060448601528c60648601526064855261230985611b09565b612311612857565b94519082855af1612320612709565b91612907565b80519081612426575b50505084156123e257816123429161325b565b61234e81603554611c27565b60355583600052603383528160002081815401905583600060008051602061374a833981519152858551858152a360355480151590816123d6575b506123c557907fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7918151938685528401523392a3600160c95590565b81516302dab21760e21b8152600490fd5b6103e891501038612389565b825162461bcd60e51b815260048101859052601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b8261243e93612439938301019101612890565b6128a8565b83388061232f565b8360005260fd602052600060408120556122c7565b508360005260fd60205260406000205415156122c2565b604051632fda1ca360e01b8152600490fd5b61249690612490612212565b846124e1565b91612298565b60405162461bcd60e51b815260206004820152601b60248201527f455243343632363a206d696e74206d6f7265207468616e206d617800000000006044820152606490fd5b91906124ee828285612596565b92821561250b57096124fd5790565b60018101809111611c345790565b634e487b7160e01b600052601260045260246000fd5b90919060001983820983820291828083109203948286039260009614612589576127109183831115612585577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e919596500990828211900360fc1b910360041c170290565b8680fd5b5050506127109192500490565b91600019828409928281029283808610950394808603951461260c578483111561000e578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b50508092501561250b570490565b903590601e198136030182121561000e57018035906001600160401b03821161000e5760200191813603831361000e57565b903590601e198136030182121561000e57018035906001600160401b03821161000e57602001918160051b3603831361000e57565b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b156126b057565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b3d15612743573d906001600160401b03821161164c5760405191612737601f8201601f191660200184611b24565b82523d6000602084013e565b606090565b90604051602081019063313ce56760e01b825260048152604081018181106001600160401b0382111761164c576040525160009384928392916001600160a01b03165afa612794612709565b90806127cc575b6127a5575b508190565b6020818051810103126127c8576020015160ff81116127a0576001925060ff1690565b8280fd5b5060208151101561279b565b60405163a9059cbb60e01b602082019081526001600160a01b039384166024830152604480830195909552938152919290608083016001600160401b0381118482101761164c576128359460009283926040521692612311612857565b805180612840575050565b81602080612439936128559501019101612890565b565b6040519061286482611aee565b602082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020830152565b9081602091031261000e5751801515810361000e5790565b156128af57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b91929015612969575081511561291b575090565b3b156129245790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561297c5750805190602001fd5b60405162461bcd60e51b81529081906129989060048301611926565b0390fd5b9081602091031261000e57516001600160a01b038116810361000e5790565b600260c954146129cc57600260c955565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b919091612a1d81613143565b919093612a286129bb565b8115612c47576001600160a01b038481169490919033869003612c37575b8515612be85786612a56916133f4565b60008581526020906033825260409586822054898110612b99578990898452603385520387832055603554898082039182603555848b60008051602061374a833981519152888d51868152a314159081612b8d575b50612b7c579188918594938796606554169181612af4575b505060008051602061372a8339815191529584612adf926127d8565b865195865285015216923392a4600160c95590565b91935091939495506004848760fc54168a5192838092638da5cb5b60e01b82525afa918215612b7157958b94612b4a829795612adf958c9560008051602061372a8339815191529c9b91612b54575b50836127d8565b9250819750612ac3565b612b6b9150883d8a116104b6576104a78183611b24565b38612b43565b8951903d90823e3d90fd5b86516302dab21760e21b8152600490fd5b6103e891501038612aab565b875162461bcd60e51b815260048101859052602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b612c4287338361217a565b612a46565b604051630fbf08cb60e21b8152600490fd5b919091612c658161319c565b919093612c706129bb565b8415612c47576001600160a01b038481169490919033869003612e0d575b8515612be85783612c9e916133f4565b6000928584526020936033855260409586822054838110612dbe578390898452603388520387832055603554838082039182603555848b60008051602061374a8339815191528b8d51868152a314159081612db2575b50612b7c5790889185606554169181612d3d575b505083929160008051602061372a8339815191529594612d27926127d8565b85519488865285015216923392a4600160c95590565b909192506004878760fc54168a5192838092638da5cb5b60e01b82525afa918215612b715793612d8e612d27948d948998979460008051602061372a8339815191529b9a9591612d9b5750836127d8565b9250949581939450612d08565b612b6b91508c8d3d106104b6576104a78183611b24565b6103e891501038612cf4565b875162461bcd60e51b815260048101889052602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b612e1884338361217a565b612c8e565b90612e26613099565b82116130065760355482158015612ffe575b15612fe55750815b612e486129bb565b60ff610100541615612472576001600160a01b03828116929033841480612fce575b612fb9575b60655416604091825191612eb060209384926000808584016323b872dd60e01b81523360248601523060448601528a60648601526064855261230985611b09565b80519081612f9e575b5050508415612f5b5785612ecc9161325b565b612ed885603554611c27565b60355583600052603381528160002085815401905583600060008051602061374a833981519152838551898152a36035548015159081612f4f575b506123c55790847fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79282519485528401523392a3600160c95590565b6103e891501038612f13565b50606491519062461bcd60e51b82526004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b82612fb193612439938301019101612890565b813880612eb9565b8360005260fd60205260006040812055612e6f565b508360005260fd6020526040600020541515612e6a565b612ff890612ff1612212565b9084612596565b91612e40565b508015612e38565b60405162461bcd60e51b815260206004820152601e60248201527f455243343632363a206465706f736974206d6f7265207468616e206d617800006044820152606490fd5b906130569291612a11565b9081116130605790565b60405163ad5f70f360e01b8152600490fd5b9061307d9291612c59565b9081106130875790565b604051632e1a5a5360e21b8152600490fd5b6101005460081c60ff16156130ad57600090565b60001990565b60ff6101005460101c1680156130f3575b6130ed576001600160a01b03166000908152603360205260409020546130e99061319c565b5090565b50600090565b506130fd816134ee565b156130c4565b60ff6101005460101c168015613133575b6130ed576001600160a01b031660009081526033602052604090205490565b5061313d816134ee565b15613114565b60ff5461271090808203918211611c3457613169916131629184612596565b8092611c27565b60355481158015613194575b1561317e575091565b906131919161318b612212565b916124e1565b91565b508015613175565b603554806131b857505b6131b260ff5482612521565b80910391565b6131c49161185f612212565b6131a6565b6000915b60fe54831015613256576131e083611aa4565b90546001600160a01b03949160031b1c8416803b1561000e57600080916044604097885194859384926324a9e3c160e11b84523060048501528a1660248401525af1801561324b5760019394955061323c575b500191906131cd565b61324590611adb565b38613233565b85513d6000823e3d90fd5b915050565b91908015611fc2576001600160a01b03928316928315611fb0578060fc541691604091825193630a43443160e21b8552602060049581818881865afa908115613335576000916133d7575b506133c7578760005260fd81528585600020549283613349575b5050505060005b60fe5481101561334057816132db82611aa4565b90549060031b1c1690813b1561000e5784516344d18cd960e01b81528887820152846024820152600081606481836001978860448401525af1801561333557613326575b50016132c7565b61332f90611adb565b3861331f565b86513d6000823e3d90fd5b50505050509050565b829087519283809263f4bde09760e01b82525afa91821561333557600092613396575b505061337791611c27565b42111561338757388085816132c0565b50505163144229c360e01b8152fd5b81819392933d83116133c0575b6133ad8183611b24565b81010312611f5e5750516133773861336c565b503d6133a3565b8451635ed0818960e01b81528690fd5b6133ee9150823d8411611fa957611f9b8183611b24565b386132a6565b9190918215611fc2576001600160a01b03818116918215611fb05761341890613103565b84116134dc5760009382855260fd602052604091858381205560ff6101005460181c1615613449575b505050509050565b855b60fe548110156134cb57868261346083611aa4565b90549060031b1c16803b156134c757819060648751809481936344d18cd960e01b83528b60048401528960248401528160448401525af180156134bd5790600192916134ae575b500161344b565b6134b790611adb565b386134a7565b85513d8a823e3d90fd5b5080fd5b505050505090508038808080613441565b60405163232b212d60e11b8152600490fd5b60fc54604080516302ea7f2560e41b81526001600160a01b0392831693919260209290918381600481895afa90811561324b5760009161363f575b50845163eeb3388760e01b815284816004818a5afa801561333557600090613610575b613557915082611c27565b801561250b5742061015613606571660005260fd8152816000205490814210159384613585575b5050505090565b83959450819060049394519384809263f4bde09760e01b82525afa9485156135fc57506000946135c9575b5050916135bd9192611c27565b4211153880808061357e565b81813d83116135f5575b6135dd8183611b24565b810103126135f1575192506135bd386135b0565b8380fd5b503d6135d3565b513d6000823e3d90fd5b5050505050600090565b8582813d8311613638575b6136258183611b24565b81010312611f5e5750613557905161354c565b503d61361b565b908482813d8311613665575b6136558183611b24565b81010312611f5e57505138613529565b503d61364b565b60fe5460005b8181106136ea57506801000000000000000081101561164c5780600161369b920160fe55611aa4565b81546001600160a01b0360039290921b82811b8019909216929094169384901b161790556040517fcd6999167b4b18e50d7046fa427cd31c7106b4e945bcaa6f9efb4ecd3b7d122a90600090a2565b6136f381611aa4565b905460039190911b1c6001600160a01b039081169084161461371757600101613672565b6040516314ebaef760e31b8152600490fdfefbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8dbddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31aea26469706673582212202713a9790a181af3e78bc5c5394f63e2d80aa2bfcb88d91948f030c190cb004c64736f6c63430008100033",
  "devdoc": {
    "author": "Hats.finance",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "asset()": {
        "details": "See {IERC4626-asset}. "
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "convertToAssets(uint256)": {
        "details": "See {IERC4626-convertToAssets}. "
      },
      "convertToShares(uint256)": {
        "details": "See {IERC4626-convertToShares}. "
      },
      "decimals()": {
        "details": "Decimals are read from the underlying asset in the constructor and cached. If this fails (e.g., the asset has not been created yet), the cached value is set to a default obtained by `super.decimals()` (which depends on inheritance but is most likely 18). Override this function in order to set a guaranteed hardcoded value. See {IERC20Metadata-decimals}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "mint(uint256,address)": {
        "details": "See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "previewDeposit(uint256)": {
        "details": "See {IERC4626-previewDeposit}. "
      },
      "previewMint(uint256)": {
        "details": "See {IERC4626-previewMint}. "
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalAssets()": {
        "details": "See {IERC4626-totalAssets}. "
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "VERSION": {
        "return": "The vault's version",
        "returns": {
          "_0": "The vault's version"
        }
      },
      "claimsManager": {
        "return": "The registry's address",
        "returns": {
          "_0": "The registry's address"
        }
      },
      "registry": {
        "return": "The registry's address",
        "returns": {
          "_0": "The registry's address"
        }
      }
    },
    "title": "A Hats.finance vault which holds the funds for a specific project's bug bounties",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "VERSION()": {
        "notice": "Returns the vault's version"
      },
      "addRewardController(address)": {
        "notice": "See {IHATVault-addRewardController}. "
      },
      "claimsManager()": {
        "notice": "Returns the vault's registry"
      },
      "deposit(uint256,address)": {
        "notice": "See {IHATVault-deposit}. "
      },
      "deposit(uint256,address,uint256)": {
        "notice": "See {IHATVault-deposit}. "
      },
      "destroyVault()": {
        "notice": "See {IHATVault-destroyVault}. "
      },
      "emergencyWithdraw(address)": {
        "notice": "See {IHATVault-emergencyWithdraw}. "
      },
      "initialize(address,(string,string,address[],address,address,bool,string))": {
        "notice": "See {IHATVault-initialize}. "
      },
      "makePayout(uint256)": {
        "notice": "See {IHATVault-approveClaim}. "
      },
      "maxDeposit(address)": {
        "notice": "See {IERC4626Upgradeable-maxDeposit}. "
      },
      "maxMint(address)": {
        "notice": "See {IERC4626Upgradeable-maxMint}. "
      },
      "maxRedeem(address)": {
        "notice": "See {IERC4626Upgradeable-maxRedeem}. "
      },
      "maxWithdraw(address)": {
        "notice": "See {IERC4626Upgradeable-maxWithdraw}. "
      },
      "mint(uint256,address,uint256)": {
        "notice": "See {IHATVault-mint}. "
      },
      "previewRedeem(uint256)": {
        "notice": "See {IERC4626Upgradeable-previewRedeem}. "
      },
      "previewRedeemAndFee(uint256)": {
        "notice": "See {IHATVault-previewRedeemAndFee}. "
      },
      "previewWithdraw(uint256)": {
        "notice": "See {IERC4626Upgradeable-previewWithdraw}. "
      },
      "previewWithdrawAndFee(uint256)": {
        "notice": "See {IHATVault-previewWithdrawAndFee}. "
      },
      "redeem(uint256,address,address)": {
        "notice": "See {IHATVault-redeem}. "
      },
      "redeem(uint256,address,address,uint256)": {
        "notice": "See {IHATVault-redeem}. "
      },
      "redeemAndClaim(uint256,address,address)": {
        "notice": "See {IHATVault-redeemAndClaim}. "
      },
      "redeemAndClaim(uint256,address,address,uint256)": {
        "notice": "See {IHATVault-redeemAndClaim}. "
      },
      "registry()": {
        "notice": "Returns the vault's registry"
      },
      "setDepositPause(bool)": {
        "notice": "See {IHATVault-setDepositPause}. "
      },
      "setVaultDescription(string)": {
        "notice": "See {IHATVault-setVaultDescription}. "
      },
      "setWithdrawPaused(bool)": {
        "notice": "See {IHATVault-setWithdrawPaused}. "
      },
      "setWithdrawalFee(uint256)": {
        "notice": "See {IHATVault-setWithdrawalFee}. "
      },
      "startVault()": {
        "notice": "See {IHATVault-destroyVault}. "
      },
      "withdraw(uint256,address,address)": {
        "notice": "See {IHATVault-withdraw}. "
      },
      "withdraw(uint256,address,address,uint256)": {
        "notice": "See {IHATVault-withdraw}. "
      },
      "withdrawAndClaim(uint256,address,address)": {
        "notice": "See {IHATVault-withdrawAndClaim}. "
      },
      "withdrawAndClaim(uint256,address,address,uint256)": {
        "notice": "See {IHATVault-withdrawAndClaim}. "
      },
      "withdrawRequest()": {
        "notice": "See {IHATVault-withdrawRequest}. "
      }
    },
    "notice": "The HATVault can be deposited into in a permissionless manner using the vault’s native token. Anyone can deposit the vault's native token into the vault and  recieve shares for it. Shares represent the user's relative part in the vault, and when a bounty is paid out, users lose part of their deposits (based on percentage paid), but keep their share of the vault. Users also receive rewards for their deposits, which can be claimed at any time. To withdraw previously deposited tokens, a user must first send a withdraw request, and the withdrawal will be made available after a pending period. Withdrawals are not permitted during safety periods or while there is an  active claim for a bounty payout. This project is open-source and can be found at: https://github.com/hats-finance/hats-contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1092,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1095,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3390,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1346,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1352,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1354,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 1356,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 1358,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1938,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 2037,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "_asset",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IERC20Upgradeable)2017"
      },
      {
        "astId": 2039,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "_decimals",
        "offset": 20,
        "slot": "101",
        "type": "t_uint8"
      },
      {
        "astId": 2722,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 296,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 416,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1268,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 1326,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 19369,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "claimsManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 19372,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "registry",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(IHATVaultsRegistry)24544"
      },
      {
        "astId": 19376,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "withdrawEnableStartTime",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 19380,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "rewardControllers",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_contract(IRewardController)24744)dyn_storage"
      },
      {
        "astId": 19382,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "withdrawalFee",
        "offset": 0,
        "slot": "255",
        "type": "t_uint256"
      },
      {
        "astId": 19384,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "vaultStarted",
        "offset": 0,
        "slot": "256",
        "type": "t_bool"
      },
      {
        "astId": 19386,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "depositPause",
        "offset": 1,
        "slot": "256",
        "type": "t_bool"
      },
      {
        "astId": 19388,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "withdrawPaused",
        "offset": 2,
        "slot": "256",
        "type": "t_bool"
      },
      {
        "astId": 19390,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "_isEmergencyWithdraw",
        "offset": 3,
        "slot": "256",
        "type": "t_bool"
      },
      {
        "astId": 19392,
        "contract": "contracts/HATVault.sol:HATVault",
        "label": "_vaultDestroyed",
        "offset": 4,
        "slot": "256",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IRewardController)24744)dyn_storage": {
        "base": "t_contract(IRewardController)24744",
        "encoding": "dynamic_array",
        "label": "contract IRewardController[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)2017": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IHATVaultsRegistry)24544": {
        "encoding": "inplace",
        "label": "contract IHATVaultsRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardController)24744": {
        "encoding": "inplace",
        "label": "contract IRewardController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}